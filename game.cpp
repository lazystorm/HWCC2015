#include <netinet/in.h>
#include <arpa/inet.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <unistd.h>
#include <string.h>
#include <cstdlib>
#include <iostream>
#include <algorithm>
#include <ctime>
#include <fstream>

using namespace std;

enum Color {
	SPADES,
	HEARTS,
	CLUBS,
	DIAMONDS
};
enum CardsPattern {
	HIGH_CARD,		//顺次比较
	ONE_PAIR,		//对子点数，单张点�?	
	TWO_PAIR,		//对子点数1，对子点�?，单张点�?	
	THREE_OF_A_KIND,//相同牌点数，单张点数1，单张点�?
	STRAIGHT,		//最大点�?	
	FLUSH,			//顺次比较大小
	FULL_HOUSE,		//3张相同牌的点数，对子的点数，
	FOUR_OF_A_KIND,	//相同牌的的点数，单张点数
	STRAIGHT_FLUSH,	//最大点�?
};
enum Stage {
	BEGIN,			//开始
	HOLD,			//只有手牌
	FLOP,			//手牌+3张公共牌
	TURN,			//手牌+4张公共牌
	RIVER,			//所有2+5=7张牌
	END,			//结束
};
enum Seat {
	OUT,
	BUTTON,
	SMALL_BLIND,
	BIG_BLIND,
	FORTH,
	FIFTH,
	SIXTH,
	SEVENTH,
	EIGHTH,
};
enum State {
	LOSE,
	WAIT,
	BLIND,
	FOLD,
	CHECK,
	CALL,
	RAISE,
	ALL_IN,
};
struct Card {
	Color	color;
	int		point;
	int to52() {
		return color * 13 + (point - 2);
	}
};
struct CardValue {
	CardsPattern rank;
	int val[5];
};
struct Player {
	int id;
	int jetton;
	int money;
	int bet;
	int bet_num;
	double bet_Prob;
	bool in;
	Seat seat;
	State state;
};

double rand_d();
void rand_b(int beg_, int rd[], int end_);
bool cmpCard(const Card &c1, const Card &c2);
int server_msg_process(int size, const char* msg);
int seat_msg_process(int size, const char* msg);
int bet_msg_process(int size, const char* msg);
int pot_win_msg_process(int size, const char* msg);
int card_msg_process(int size, const char* msg, int card_ix, const int end_ix);
int inquire_msg_process(int size, const char* msg);
void getValue(Card cds[], CardValue &cval);
int compare(Card cards1[], Card cards2[]);
double get_winProb_flop(const int times, const int beg_, const int opp_num);
double get_winProb(const int opp_num, const int times = 1000);
void str2card(const char *s, Card &c);
void getline(const char *s, char *line, int &i_);
void getword(const char *line, char *word, int &i_);
int first_inquire_handler();
int rand_mode();
int all_in_mode();
int check_mode();
int raise_mode(int level = 0);
int fold_mode();
int prob_all_in_mode();
int prob_decision_mode();
int prob_decision_mode_1();
int prob_decision_mode_2();
int prob_decision_mode_2_t();
int prob_decision_mode_2_n();
int my_mode_1();
int my_mode_2();
int my_mode_3();
int stagebased_mode();
int stagebased_mode_1();
int poki_mode();
int playerNumBased_mode();
int betBased_mode();

static const double A[52][52] = {
0.125,0.0935932,0.0983751,0.0992244,0.103058,0.0955877,0.100236,0.106178,0.11462,0.118546,0.126611,0.13711,0.150805,0.133476,0.0547423,0.058271,0.0608496,0.0624766,0.0567214,0.0614579,0.0647387,0.0733618,0.0775643,0.0833525,0.0942004,0.107037,0.133142,0.0542629,0.0569589,0.0601358,0.0647158,0.0587037,0.0596729,0.0626925,0.0717893,0.075353,0.0824249,0.0937902,0.103582,0.133338,0.0533174,0.0566184,0.0592532,0.0631881,0.0559207,0.0576414,0.0650528,0.0732031,0.0840741,0.0941451,0.0933869,0.108421,
0.0933911,0.125,0.104871,0.110939,0.113497,0.106617,0.102125,0.107392,0.114974,0.122676,0.130468,0.13956,0.153339,0.0517536,0.134613,0.066435,0.0739859,0.0763559,0.0680036,0.0615066,0.0666084,0.0745507,0.0807826,0.0877604,0.0966035,0.110381,0.0533574,0.134466,0.0685872,0.0731649,0.0764049,0.066795,0.0611356,0.0664022,0.0731202,0.0779448,0.083665,0.0974715,0.103391,0.0528457,0.134491,0.0651749,0.0696416,0.0749644,0.0649289,0.0601718,0.0678668,0.0772743,0.0861199,0.0956543,0.0953235,0.109044,
0.0970914,0.105316,0.125,0.11943,0.124684,0.119053,0.114182,0.110665,0.11898,0.123539,0.132398,0.142018,0.155105,0.0584449,0.0683497,0.139117,0.083452,0.0887023,0.0808549,0.0752819,0.0689371,0.0766784,0.0817749,0.0918738,0.0981134,0.112643,0.0586124,0.0658777,0.138091,0.0802075,0.0878107,0.079707,0.0721891,0.0686644,0.0753585,0.0798815,0.0865671,0.097334,0.108068,0.0576673,0.0662891,0.139976,0.0799088,0.0864087,0.0782757,0.0703965,0.0704967,0.0801657,0.0880797,0.0997454,0.097807,0.113022,
0.0998445,0.111019,0.119824,0.125,0.135292,0.129195,0.125497,0.121007,0.118183,0.128049,0.134161,0.145679,0.15962,0.0625928,0.0747164,0.0819642,0.143286,0.0985158,0.0910438,0.0865964,0.0821305,0.0812577,0.0867172,0.0904466,0.104593,0.115074,0.0602882,0.0736407,0.0813041,0.144152,0.098768,0.0911687,0.0861605,0.0808046,0.0787266,0.0844531,0.0917478,0.103286,0.111835,0.0603448,0.0708759,0.0806036,0.143885,0.0968392,0.0915091,0.0850268,0.0801076,0.0835039,0.0918033,0.101758,0.102913,0.116731,
0.104117,0.114618,0.124594,0.133468,0.125,0.138087,0.136351,0.131802,0.132723,0.129195,0.138131,0.148463,0.163816,0.0644795,0.0756619,0.0883512,0.0971412,0.152941,0.103702,0.0996891,0.097255,0.0928058,0.0898671,0.0986471,0.107052,0.123487,0.0642224,0.0755782,0.0874188,0.0998012,0.151579,0.103521,0.0978505,0.0926027,0.0913975,0.0880876,0.0954362,0.105534,0.116935,0.0631631,0.0752673,0.0867192,0.0967283,0.154956,0.102362,0.09741,0.0973594,0.0966053,0.0962,0.107547,0.107659,0.122126,
0.0962855,0.107458,0.118241,0.128515,0.139583,0.125,0.147288,0.147182,0.145066,0.143221,0.1448,0.155843,0.170521,0.058352,0.0669771,0.0800789,0.0932635,0.103312,0.162849,0.109491,0.107721,0.107312,0.104629,0.102071,0.113608,0.129269,0.057676,0.067211,0.0791616,0.0937832,0.103488,0.164025,0.109544,0.107469,0.106977,0.10168,0.099235,0.111972,0.124453,0.0578462,0.0678727,0.0794644,0.0911179,0.103756,0.166072,0.108518,0.107769,0.109836,0.110072,0.11436,0.112326,0.127387,
0.101124,0.103577,0.111345,0.124742,0.135042,0.145926,0.125,0.155631,0.158473,0.155253,0.154117,0.159246,0.175868,0.0606736,0.0637912,0.0741044,0.0857993,0.0977988,0.111546,0.176079,0.11992,0.121794,0.119055,0.116381,0.121238,0.135493,0.0620512,0.0634332,0.0729427,0.0852979,0.0992561,0.111777,0.177974,0.118409,0.121753,0.116355,0.116111,0.119102,0.131762,0.0596655,0.0613162,0.0737752,0.0858548,0.0989837,0.112079,0.179446,0.122014,0.126432,0.127366,0.129778,0.119831,0.135733,
0.10557,0.107548,0.108593,0.120807,0.132022,0.145009,0.155218,0.125,0.175469,0.174583,0.170921,0.176468,0.186562,0.0649404,0.0680174,0.0699475,0.0822859,0.0962131,0.109093,0.1211,0.193193,0.138284,0.136099,0.135916,0.135455,0.144402,0.0655133,0.0675238,0.069859,0.0809185,0.094376,0.108546,0.119547,0.193432,0.138223,0.133965,0.134655,0.134132,0.141156,0.0663054,0.0671413,0.0691519,0.0814906,0.0953617,0.10807,0.121697,0.211216,0.142932,0.144789,0.146734,0.135271,0.144926,
0.114842,0.116048,0.118959,0.120379,0.131057,0.144791,0.158854,0.17244,0.125,0.193119,0.192582,0.198346,0.208065,0.0717365,0.0750503,0.0779476,0.0804466,0.0922732,0.107051,0.122259,0.137875,0.215811,0.159707,0.15761,0.163352,0.170462,0.0727146,0.0741798,0.0777164,0.0811882,0.0921912,0.107345,0.121231,0.140361,0.21577,0.155772,0.156946,0.161972,0.163495,0.0725073,0.073803,0.0771647,0.0812263,0.0931411,0.10736,0.122804,0.141535,0.244346,0.167735,0.172044,0.160757,0.16905,
0.120914,0.121071,0.124718,0.12937,0.131536,0.141824,0.156121,0.172613,0.196104,0.125,0.202745,0.206809,0.217692,0.0779449,0.0785764,0.0832498,0.0844374,0.0900215,0.10469,0.117794,0.133911,0.160678,0.24263,0.168121,0.170695,0.180149,0.0777688,0.0796311,0.0840322,0.0862865,0.091555,0.104372,0.117531,0.134251,0.159122,0.243824,0.164783,0.169886,0.175527,0.0790041,0.0797457,0.084762,0.0870962,0.0903003,0.103946,0.118526,0.141184,0.166721,0.284476,0.183585,0.17117,0.179071,
0.128044,0.129422,0.131582,0.135401,0.13772,0.143413,0.157498,0.170896,0.194632,0.202186,0.125,0.220243,0.228833,0.0858928,0.0872259,0.0910111,0.0938882,0.0981048,0.101705,0.115205,0.134768,0.156618,0.165632,0.274178,0.18391,0.194401,0.0858944,0.0873401,0.0900364,0.0915067,0.0970518,0.10088,0.11781,0.135514,0.157594,0.166629,0.274541,0.182402,0.190659,0.0853944,0.0884123,0.0912206,0.0957103,0.0983977,0.104039,0.119892,0.138999,0.166854,0.180537,0.325986,0.184351,0.191955,
0.138268,0.13869,0.1424,0.146456,0.148637,0.154674,0.158963,0.176197,0.196991,0.207588,0.218947,0.125,0.245124,0.0933889,0.0968251,0.098424,0.102906,0.10998,0.113752,0.119341,0.136938,0.160689,0.170426,0.182414,0.321069,0.211667,0.0929079,0.0960587,0.0991526,0.102812,0.107627,0.113238,0.119138,0.135633,0.16053,0.171096,0.184326,0.317654,0.209195,0.0992453,0.103664,0.103063,0.108042,0.114497,0.118259,0.125699,0.140655,0.163343,0.171604,0.182451,0.320729,0.211747,
0.151127,0.156991,0.157362,0.160695,0.166005,0.170513,0.176608,0.185707,0.206335,0.215403,0.229056,0.243335,0.125,0.107355,0.109779,0.112978,0.116627,0.121437,0.126545,0.136641,0.144708,0.169868,0.180489,0.190897,0.211277,0.375357,0.107066,0.110987,0.11273,0.117414,0.122226,0.128671,0.136066,0.145415,0.168692,0.178922,0.190179,0.209637,0.377824,0.109602,0.110632,0.114158,0.118394,0.122029,0.130682,0.137351,0.150969,0.175889,0.191422,0.210636,0.209088,0.374739,
0.131994,0.0532515,0.0586413,0.0622012,0.0630628,0.056518,0.0613112,0.0659652,0.0727239,0.0775863,0.0851487,0.0932207,0.107951,0.125,0.0934951,0.0974852,0.100092,0.103016,0.096499,0.100196,0.10771,0.114096,0.12148,0.127011,0.13645,0.152655,0.132869,0.0533213,0.0588633,0.0604458,0.0624425,0.0583299,0.0595485,0.0630732,0.0695687,0.075415,0.0820312,0.09316,0.101264,0.1327,0.0535779,0.0554206,0.0599104,0.0613776,0.0561187,0.0588478,0.0635088,0.0738067,0.0818607,0.0937295,0.092832,0.106565,
0.0536562,0.136556,0.0672032,0.0725848,0.0758295,0.0677721,0.0635708,0.0679301,0.0728746,0.0802547,0.0865878,0.0970475,0.110195,0.0932405,0.125,0.103728,0.110764,0.1151,0.106323,0.101671,0.108175,0.117227,0.120916,0.131326,0.138944,0.153951,0.0537198,0.136795,0.0661996,0.0725248,0.0772424,0.0680965,0.0622589,0.0659403,0.0719407,0.0788744,0.0832221,0.0940965,0.106636,0.0527024,0.13606,0.0670781,0.070998,0.0757836,0.0647864,0.0605956,0.066909,0.0768668,0.0866286,0.0966261,0.0951862,0.110376,
0.0573453,0.0657225,0.13874,0.0821433,0.0879014,0.0811097,0.0726828,0.0714069,0.0777617,0.0834636,0.0897235,0.101798,0.113605,0.0954333,0.105572,0.125,0.12057,0.125966,0.118665,0.111753,0.110119,0.119501,0.124618,0.131077,0.141756,0.158538,0.0585402,0.0660625,0.139406,0.0823809,0.0896265,0.0792359,0.0725984,0.0682505,0.0757151,0.0802677,0.0862022,0.0972841,0.107297,0.0568488,0.0662242,0.138267,0.0820041,0.0858684,0.0793278,0.0724023,0.0719303,0.0788179,0.0878351,0.0993925,0.0983231,0.112434,
0.0622925,0.0725458,0.0824785,0.14354,0.0986758,0.0914084,0.0861575,0.081426,0.0804057,0.087079,0.0938589,0.103502,0.118736,0.0994749,0.11264,0.119196,0.125,0.134177,0.129929,0.124647,0.120194,0.120366,0.126881,0.132849,0.144103,0.160606,0.0611865,0.0711377,0.0833753,0.144641,0.0993236,0.0919994,0.0851222,0.0812611,0.0787491,0.0838284,0.0904278,0.101006,0.112057,0.0604598,0.0709266,0.0807525,0.146313,0.0958063,0.0921833,0.0846997,0.0808568,0.0840506,0.0910605,0.103021,0.102244,0.117716,
0.0648715,0.0769889,0.0862642,0.0994649,0.151811,0.102788,0.0992699,0.0959647,0.0923803,0.0912749,0.0964839,0.107513,0.122523,0.102589,0.113882,0.125508,0.134053,0.125,0.140001,0.137503,0.131274,0.132228,0.13059,0.139864,0.149808,0.165015,0.0633951,0.0763687,0.0876823,0.0989841,0.152048,0.103986,0.0971375,0.0954523,0.0914419,0.089261,0.0967244,0.10701,0.116785,0.0635731,0.075872,0.0882882,0.0977137,0.152011,0.102109,0.0973005,0.0957282,0.0954683,0.0964504,0.108547,0.10703,0.122424,
0.0583934,0.0675926,0.0806271,0.0920792,0.105015,0.16486,0.110005,0.107896,0.108016,0.104965,0.103343,0.112301,0.128718,0.0972587,0.105258,0.117781,0.128926,0.139577,0.125,0.146313,0.147078,0.144289,0.1421,0.143795,0.154112,0.17226,0.0575,0.068559,0.0806811,0.0923637,0.103118,0.163222,0.108432,0.107756,0.105091,0.102602,0.0999335,0.112393,0.124582,0.0568504,0.0668173,0.0804423,0.090622,0.101679,0.166735,0.10906,0.106836,0.11013,0.111007,0.113706,0.111062,0.129768,
0.0603588,0.0635934,0.0753192,0.0857112,0.0995379,0.112753,0.177264,0.120745,0.121297,0.117563,0.116264,0.120622,0.137041,0.0991461,0.102937,0.111136,0.123277,0.136336,0.146391,0.125,0.156824,0.158177,0.156734,0.154827,0.160225,0.174888,0.0602222,0.0638947,0.0727302,0.0865477,0.097967,0.108551,0.176973,0.118663,0.120272,0.116649,0.114515,0.118773,0.134289,0.0605055,0.0626109,0.0724724,0.0849171,0.0996477,0.111423,0.181713,0.122336,0.126825,0.12521,0.131099,0.119683,0.13614,
0.066745,0.067257,0.0695735,0.0812718,0.0947125,0.109583,0.120539,0.193613,0.139608,0.136151,0.134733,0.13795,0.143652,0.105376,0.106511,0.112327,0.12056,0.130895,0.144593,0.155875,0.125,0.174293,0.172495,0.174663,0.175424,0.184979,0.0659456,0.0677468,0.0700432,0.0814059,0.0947148,0.108136,0.119579,0.194214,0.137336,0.134552,0.132347,0.135682,0.141066,0.0651207,0.0665221,0.0692694,0.0807071,0.095835,0.10836,0.120725,0.211713,0.144174,0.141026,0.147547,0.134879,0.145971,
0.0731033,0.0748963,0.0769819,0.0798598,0.0939704,0.106285,0.122225,0.139934,0.216185,0.158387,0.158745,0.160223,0.16849,0.114558,0.113031,0.118329,0.121346,0.132535,0.145874,0.159389,0.174761,0.125,0.195625,0.193583,0.2,0.206678,0.0731169,0.0751453,0.0779457,0.0822406,0.0930011,0.106591,0.119575,0.137299,0.218586,0.15911,0.155618,0.159023,0.165607,0.0721304,0.0755818,0.0783662,0.0816741,0.0934171,0.106285,0.12245,0.141761,0.246171,0.16607,0.170924,0.162111,0.169093,
0.0787828,0.0794348,0.0833853,0.0871,0.0895922,0.103725,0.118825,0.136375,0.160241,0.242343,0.165675,0.173868,0.179884,0.119212,0.121149,0.123492,0.127805,0.129839,0.142892,0.155086,0.171954,0.191155,0.125,0.202434,0.204431,0.217571,0.0779704,0.0785833,0.0832533,0.0885631,0.0894291,0.102974,0.117686,0.134351,0.155858,0.243795,0.165662,0.170178,0.177439,0.0784953,0.0803623,0.0830047,0.0869206,0.0897331,0.104062,0.119867,0.141275,0.167101,0.283242,0.179872,0.170295,0.178486,
0.0848858,0.0864496,0.0891018,0.0950027,0.0971532,0.103654,0.116887,0.133143,0.159546,0.168212,0.273612,0.184086,0.191558,0.127702,0.129108,0.130432,0.135635,0.138166,0.143011,0.155916,0.173369,0.193529,0.202755,0.125,0.220012,0.229081,0.0844241,0.0877444,0.0900576,0.0932627,0.0977424,0.103036,0.119315,0.133719,0.157335,0.168681,0.27506,0.183917,0.190169,0.0848225,0.0892665,0.0903471,0.0947783,0.0987067,0.104584,0.119909,0.140034,0.1653,0.17788,0.32785,0.183976,0.192126,
0.094409,0.0960328,0.0984018,0.103893,0.106376,0.114427,0.120049,0.136578,0.16249,0.17018,0.181226,0.321292,0.209022,0.137296,0.141174,0.14341,0.145297,0.150182,0.154523,0.158678,0.176924,0.198392,0.20685,0.21687,0.125,0.244921,0.0932565,0.0953967,0.0997432,0.10271,0.104929,0.114073,0.120115,0.137715,0.161449,0.171822,0.180038,0.320113,0.209155,0.0988801,0.10127,0.104849,0.112161,0.113341,0.121283,0.126685,0.143479,0.162346,0.170932,0.179451,0.317535,0.211028,
0.109169,0.11083,0.115114,0.116294,0.123152,0.128268,0.135205,0.145316,0.170426,0.180454,0.193113,0.214423,0.375732,0.151312,0.156223,0.15745,0.161256,0.164722,0.16944,0.17604,0.187549,0.207994,0.214072,0.224921,0.244101,0.125,0.108219,0.111272,0.113142,0.118857,0.121718,0.127199,0.135762,0.144481,0.168292,0.179343,0.190447,0.208794,0.378929,0.107506,0.110782,0.11611,0.118809,0.124573,0.130172,0.138881,0.148605,0.177753,0.192471,0.210504,0.209888,0.375909,
0.134313,0.0543024,0.0581062,0.0610378,0.0640616,0.0578737,0.0592082,0.0659282,0.0723533,0.0775677,0.0858259,0.0946237,0.107509,0.133732,0.0530775,0.0575596,0.0619278,0.0644492,0.0573437,0.059864,0.0657817,0.0714515,0.0775345,0.0858214,0.0948775,0.107079,0.125,0.091321,0.0938552,0.0962732,0.101381,0.0939791,0.0969067,0.101543,0.107652,0.115649,0.121997,0.134515,0.14497,0.134549,0.0516561,0.0579033,0.0594204,0.0627773,0.0563564,0.0598148,0.0651756,0.0755959,0.085018,0.0935194,0.0922768,0.108282,
0.0538302,0.13622,0.0661302,0.0714112,0.0748069,0.0672552,0.0633708,0.0670158,0.0736602,0.0793189,0.0880012,0.0963171,0.108885,0.052873,0.133611,0.0680971,0.0724888,0.0752246,0.0687904,0.062313,0.0677196,0.0740162,0.0792419,0.0863724,0.0961983,0.110555,0.0893495,0.125,0.103598,0.10886,0.111589,0.104035,0.0987749,0.102503,0.111541,0.115581,0.126716,0.137338,0.149346,0.0518481,0.135742,0.0650992,0.0705081,0.0745911,0.06489,0.0604298,0.0679112,0.0777718,0.0845283,0.0953174,0.0965646,0.110092,
0.0577008,0.0660797,0.139248,0.0822006,0.0885893,0.0819724,0.0733412,0.0699497,0.0778008,0.0830312,0.0890271,0.0980064,0.115082,0.0583537,0.06679,0.14026,0.0841987,0.0894922,0.0786105,0.0743104,0.0698403,0.0777213,0.0833097,0.089742,0.0990266,0.113863,0.0944484,0.103075,0.125,0.11645,0.122379,0.116002,0.110277,0.105387,0.113712,0.119296,0.126876,0.140244,0.150456,0.0567049,0.0668559,0.139799,0.0803008,0.0858074,0.0782161,0.0719212,0.070602,0.0810982,0.0896203,0.100399,0.0989844,0.115264,
0.0604448,0.072151,0.0839473,0.142851,0.0973584,0.0922736,0.0862112,0.0818436,0.080494,0.0866559,0.0920469,0.102882,0.118015,0.0617017,0.0735732,0.0822112,0.144111,0.0992791,0.0917833,0.0867528,0.0808169,0.0811212,0.0862643,0.0916568,0.101816,0.117696,0.0957387,0.107605,0.116534,0.125,0.132959,0.128656,0.121896,0.116823,0.114643,0.12314,0.131195,0.144684,0.156885,0.0606241,0.0714339,0.0820074,0.146273,0.0969909,0.0919435,0.0846243,0.0807103,0.0827162,0.092639,0.102453,0.102455,0.118045,
0.0636612,0.0752558,0.0867517,0.0974277,0.153412,0.103735,0.100621,0.0948372,0.0928062,0.0904745,0.0967585,0.105746,0.121334,0.0634353,0.0756013,0.0882697,0.0994406,0.15592,0.103397,0.0995288,0.0929087,0.092196,0.0897708,0.098542,0.108118,0.123108,0.101203,0.112314,0.121289,0.13257,0.125,0.136682,0.132592,0.129214,0.128196,0.125889,0.134089,0.149431,0.159894,0.0630494,0.0749452,0.0876249,0.0977881,0.152653,0.102371,0.098326,0.0945533,0.0953898,0.0984843,0.104724,0.108348,0.120682,
0.055815,0.0667674,0.0784856,0.0929208,0.102407,0.163727,0.110785,0.108969,0.106876,0.102314,0.101949,0.11212,0.128998,0.0572627,0.0672735,0.0803513,0.0919788,0.102056,0.164618,0.110584,0.108758,0.106327,0.103034,0.102216,0.11155,0.13,0.0956094,0.103936,0.115646,0.124848,0.135469,0.125,0.143185,0.14382,0.138349,0.13907,0.139116,0.152803,0.166201,0.0573615,0.0660694,0.0778348,0.0922949,0.102597,0.163445,0.109187,0.106527,0.109126,0.10985,0.113129,0.110675,0.127157,
0.0588094,0.0620115,0.0724436,0.0841703,0.0988494,0.109068,0.175445,0.120087,0.121793,0.118942,0.117618,0.12017,0.137624,0.0601418,0.0604509,0.0721684,0.0846039,0.0989421,0.110724,0.174557,0.120068,0.120502,0.117129,0.114598,0.1194,0.13626,0.0981277,0.0987475,0.107329,0.121778,0.132571,0.145019,0.125,0.15403,0.154771,0.153713,0.152907,0.160003,0.17335,0.0588831,0.0601126,0.0725269,0.0865667,0.098418,0.108877,0.179131,0.122739,0.125635,0.126158,0.131173,0.118407,0.13585,
0.0638247,0.0665721,0.0694204,0.0796895,0.0944295,0.108688,0.119654,0.194303,0.137547,0.135917,0.133323,0.13489,0.144722,0.0643614,0.066895,0.0697943,0.0791443,0.093172,0.106842,0.119356,0.193749,0.139059,0.136439,0.131494,0.137196,0.145248,0.102045,0.104322,0.107558,0.118454,0.128721,0.14105,0.153641,0.125,0.170568,0.168891,0.170297,0.174843,0.184113,0.0626821,0.0648365,0.0687914,0.0794608,0.0934172,0.108306,0.120101,0.209507,0.143758,0.144966,0.146764,0.135708,0.144576,
0.0701282,0.0736107,0.0765047,0.0784724,0.0919477,0.106116,0.119297,0.135291,0.214354,0.158986,0.157633,0.162186,0.169245,0.0708891,0.073548,0.0749869,0.0779876,0.0905391,0.105783,0.12074,0.137481,0.214743,0.157825,0.157167,0.16158,0.170884,0.109169,0.112319,0.11375,0.116346,0.127367,0.141858,0.155235,0.172224,0.125,0.192646,0.192643,0.1974,0.20749,0.0706293,0.0741716,0.0762144,0.0789923,0.0900535,0.105658,0.121782,0.143232,0.246099,0.168032,0.168682,0.160384,0.167714,
0.0754285,0.0785848,0.0814487,0.0843331,0.0876998,0.101566,0.116051,0.135681,0.15854,0.243,0.166243,0.169703,0.179542,0.0757067,0.0770962,0.0798831,0.0840528,0.0882869,0.101894,0.115521,0.134277,0.159134,0.243751,0.166684,0.17078,0.180582,0.11422,0.114433,0.121009,0.122519,0.125889,0.138474,0.152387,0.169024,0.191374,0.125,0.200725,0.205715,0.216536,0.0747666,0.0776604,0.0808752,0.0833672,0.0884237,0.102226,0.117719,0.137816,0.162888,0.285665,0.18004,0.171676,0.181115,
0.081272,0.0841166,0.0876257,0.0914622,0.0939401,0.100488,0.115041,0.131577,0.158412,0.166886,0.277643,0.183861,0.192535,0.0825774,0.0848069,0.0875305,0.091526,0.0944876,0.101292,0.115096,0.131573,0.156203,0.167379,0.276796,0.182771,0.193872,0.124024,0.125614,0.127552,0.129235,0.135036,0.138776,0.152481,0.168521,0.192936,0.200492,0.125,0.219081,0.230061,0.0835248,0.0851027,0.0894152,0.09105,0.0971997,0.102578,0.116818,0.140064,0.166314,0.178817,0.330129,0.182513,0.193933,
0.0889562,0.0942475,0.0972213,0.101088,0.102804,0.109161,0.118034,0.134065,0.16043,0.169165,0.185033,0.323728,0.210436,0.0915256,0.0920457,0.0959079,0.0988497,0.105989,0.110667,0.117466,0.134342,0.158875,0.170703,0.182687,0.324051,0.211764,0.132063,0.133615,0.138927,0.139873,0.147274,0.153649,0.156214,0.1733,0.196679,0.204232,0.220282,0.125,0.242457,0.0949436,0.098803,0.103034,0.105256,0.111036,0.118025,0.123057,0.140935,0.162586,0.167709,0.181332,0.325805,0.208804,
0.108888,0.111972,0.114649,0.11609,0.121689,0.12793,0.135668,0.142547,0.16945,0.179245,0.191924,0.210884,0.375537,0.106526,0.108281,0.114321,0.115454,0.120564,0.128772,0.135224,0.14382,0.169033,0.179755,0.193683,0.211197,0.372775,0.149492,0.150272,0.155756,0.159676,0.164141,0.170858,0.176989,0.186311,0.208426,0.217869,0.228703,0.2438,0.125,0.106797,0.111061,0.112121,0.118861,0.124107,0.129402,0.139277,0.149034,0.176403,0.193602,0.209386,0.208254,0.378689,
0.133522,0.0538013,0.0586644,0.0606156,0.0631855,0.0577606,0.0614377,0.0649129,0.0728781,0.0789861,0.0865221,0.0962448,0.116509,0.132936,0.0525957,0.0575671,0.0626623,0.0638901,0.0570773,0.0612783,0.0665442,0.0729312,0.0777077,0.0862946,0.095114,0.113681,0.132703,0.0533289,0.0572075,0.0601218,0.0640095,0.0566787,0.0599774,0.0633348,0.0705991,0.0759391,0.0825908,0.0956768,0.108901,0.125,0.0912377,0.0909155,0.0982705,0.102362,0.0968649,0.100255,0.108765,0.114541,0.125343,0.136321,0.139708,0.151591,
0.0530031,0.134499,0.0665667,0.0722061,0.0755237,0.0675689,0.0614377,0.0665583,0.0756306,0.0796601,0.0890727,0.0977567,0.116722,0.0513349,0.136521,0.0659364,0.0717665,0.0750127,0.06828,0.0617455,0.065087,0.0744896,0.0799317,0.0876579,0.0963115,0.117385,0.052397,0.135326,0.0674379,0.0722298,0.0741411,0.0682328,0.0622115,0.064815,0.0728853,0.0777477,0.0838977,0.0981062,0.111413,0.0908864,0.125,0.101545,0.106986,0.11313,0.106244,0.102815,0.108982,0.119691,0.127624,0.139334,0.142211,0.152234,
0.0565552,0.0650227,0.140463,0.0824952,0.0866474,0.080581,0.0735572,0.0702108,0.0766976,0.0841081,0.0919399,0.101361,0.12226,0.0564236,0.066304,0.138954,0.0813459,0.0883337,0.0790712,0.071571,0.0696174,0.0771664,0.0855481,0.0912506,0.102933,0.12011,0.0569448,0.0662954,0.138823,0.0810768,0.0863471,0.0784111,0.0724164,0.0678304,0.0750522,0.0814998,0.0884463,0.100935,0.116376,0.0933454,0.103016,0.125,0.116174,0.12448,0.115383,0.113641,0.111861,0.122249,0.130273,0.142313,0.142916,0.155761,
0.059365,0.0706682,0.0820272,0.145456,0.0985134,0.0911956,0.086908,0.0805775,0.0799203,0.0874902,0.0940215,0.103911,0.127339,0.0590151,0.0705701,0.0799218,0.145532,0.0975951,0.0911568,0.084841,0.0817781,0.081331,0.0866893,0.0950645,0.105454,0.127271,0.0600745,0.0717389,0.081454,0.145219,0.0959573,0.0918692,0.0833998,0.080369,0.0798859,0.0840596,0.0924896,0.103827,0.119906,0.0969437,0.109084,0.117731,0.125,0.131807,0.128947,0.121938,0.122855,0.126706,0.132381,0.146589,0.149036,0.159531,
0.0617264,0.0736423,0.0846875,0.0968412,0.154311,0.103148,0.0986525,0.095606,0.0923245,0.0914941,0.0988497,0.109428,0.130834,0.06362,0.0742962,0.0869526,0.0981734,0.151514,0.10301,0.0986718,0.0929447,0.0940627,0.0910909,0.0983507,0.108491,0.131584,0.0636176,0.0736652,0.0856216,0.0968078,0.151532,0.102302,0.0985276,0.0937554,0.0911603,0.0900464,0.0965092,0.10875,0.126507,0.101941,0.111889,0.123246,0.130927,0.125,0.137826,0.133224,0.136577,0.138079,0.139672,0.15171,0.150802,0.162859,
0.0562623,0.0658945,0.07764,0.0920801,0.10105,0.164047,0.111143,0.110068,0.106444,0.105504,0.105359,0.11723,0.135518,0.0565813,0.0668476,0.0784174,0.09,0.102767,0.163756,0.11116,0.107692,0.108983,0.105948,0.103892,0.115944,0.13885,0.0563883,0.0659859,0.0799668,0.0900356,0.10146,0.165942,0.110287,0.107023,0.105943,0.104275,0.102543,0.114854,0.133422,0.0966443,0.103638,0.116775,0.127509,0.139384,0.125,0.147528,0.148166,0.149315,0.153571,0.156347,0.15637,0.167991,
0.0584089,0.0606005,0.071799,0.0816872,0.0966595,0.10924,0.178649,0.120487,0.123249,0.119376,0.118504,0.123085,0.142914,0.0584298,0.0614108,0.0723686,0.0830441,0.0980669,0.107775,0.1797,0.118249,0.122992,0.118572,0.118294,0.121552,0.144493,0.057296,0.0601444,0.0713733,0.0841898,0.0966112,0.108564,0.177513,0.117499,0.118948,0.11896,0.117221,0.123667,0.142249,0.099562,0.103302,0.111571,0.120994,0.13454,0.147901,0.125,0.16092,0.163709,0.166121,0.173294,0.162032,0.173148,
0.0649877,0.067551,0.0711379,0.0808084,0.0965027,0.110105,0.121134,0.211423,0.144988,0.141774,0.139418,0.144491,0.149428,0.0654299,0.0678384,0.0704269,0.0817756,0.0966612,0.10896,0.122257,0.211178,0.142187,0.142228,0.141326,0.144812,0.150877,0.065633,0.0676231,0.0697121,0.0812594,0.0963089,0.109435,0.120494,0.209065,0.141345,0.139967,0.141155,0.143861,0.148342,0.107363,0.109402,0.109883,0.123131,0.136004,0.147121,0.160306,0.125,0.180532,0.184451,0.190417,0.183535,0.187005,
0.0736359,0.078203,0.081646,0.0838822,0.0966463,0.110719,0.123758,0.143835,0.245256,0.167091,0.167005,0.172133,0.17171,0.0756446,0.0762435,0.0803095,0.0835085,0.0968436,0.1091,0.124619,0.144381,0.242461,0.164982,0.170395,0.17341,0.169429,0.07577,0.0760498,0.0789741,0.082938,0.0971001,0.108287,0.12575,0.14394,0.244932,0.164775,0.169207,0.171237,0.169474,0.119614,0.118433,0.121495,0.125464,0.135921,0.150124,0.165328,0.182457,0.125,0.207199,0.214094,0.205637,0.211581,
0.0845257,0.0848295,0.0891847,0.0936256,0.0966223,0.10975,0.127314,0.144158,0.167396,0.281741,0.179298,0.186875,0.177802,0.0842889,0.084954,0.0887639,0.0912475,0.0969661,0.110241,0.126495,0.145632,0.165084,0.283155,0.180973,0.184744,0.180207,0.0842787,0.0850015,0.0877024,0.0919983,0.0974627,0.110866,0.125575,0.144767,0.166487,0.282409,0.180444,0.187837,0.179132,0.126305,0.128461,0.131974,0.134954,0.139542,0.151908,0.165408,0.185623,0.207441,0.125,0.228991,0.219295,0.224429,
0.0936659,0.0971592,0.0986175,0.102848,0.108144,0.114636,0.127595,0.147945,0.171063,0.184441,0.326353,0.205248,0.188064,0.0960912,0.0941186,0.0994589,0.105076,0.107503,0.114779,0.129726,0.147476,0.172688,0.184964,0.329832,0.203196,0.189197,0.0932718,0.0964396,0.0988711,0.101328,0.107591,0.115213,0.129996,0.146383,0.173469,0.18376,0.327227,0.203935,0.191354,0.140131,0.138253,0.143689,0.14654,0.150341,0.157207,0.171175,0.191792,0.21632,0.229207,0.125,0.237549,0.239927,
0.105244,0.109776,0.112815,0.116851,0.121567,0.130926,0.137918,0.157894,0.179899,0.195446,0.207754,0.386787,0.20797,0.107281,0.109348,0.112335,0.117456,0.122636,0.132279,0.138881,0.156533,0.180664,0.194571,0.209092,0.384345,0.20659,0.107049,0.110925,0.113709,0.117582,0.120353,0.128312,0.138653,0.158313,0.180329,0.193066,0.210233,0.384192,0.20649,0.156904,0.157919,0.16315,0.166155,0.170306,0.177,0.184439,0.198799,0.218631,0.229358,0.241034,0.125,0.239561,
0.106958,0.110988,0.112475,0.117067,0.120337,0.129648,0.135959,0.142899,0.169284,0.17928,0.194506,0.208568,0.376815,0.106839,0.109603,0.113077,0.116018,0.123381,0.127225,0.134869,0.1417,0.167516,0.177775,0.190332,0.21,0.373345,0.106951,0.110424,0.113562,0.115728,0.121863,0.12877,0.136204,0.141978,0.16803,0.178772,0.190072,0.209116,0.37615,0.149212,0.154583,0.15687,0.158945,0.164317,0.16975,0.175954,0.187311,0.212319,0.224353,0.24117,0.240502,0.125,
};

static const double A1[52][52] = {
0.5,0.342885,0.35106,0.36399,0.377195,0.378705,0.402725,0.422855,0.448935,0.47139,0.498845,0.52902,0.562405,0.498795,0.30641,0.312075,0.326525,0.33838,0.343695,0.365775,0.38974,0.41482,0.44249,0.469705,0.506195,0.536865,0.497945,0.30726,0.31547,0.32305,0.33919,0.341345,0.365235,0.38773,0.413655,0.44376,0.46674,0.504045,0.536515,0.498885,0.309805,0.315715,0.326175,0.343545,0.3452,0.36706,0.395525,0.42922,0.46112,0.493695,0.50026,0.537245,
0.343785,0.5,0.370545,0.38555,0.39599,0.399965,0.405065,0.429545,0.45509,0.48121,0.505915,0.539275,0.57032,0.30846,0.531715,0.335425,0.34603,0.36052,0.36164,0.373085,0.397605,0.42525,0.45076,0.479075,0.512785,0.549425,0.30639,0.53137,0.33687,0.350345,0.363055,0.36232,0.372725,0.39629,0.424745,0.451765,0.479465,0.511235,0.549395,0.304905,0.53375,0.33587,0.34689,0.36176,0.367645,0.3743,0.406445,0.440405,0.47126,0.504685,0.511525,0.544585,
0.352975,0.373215,0.5,0.401445,0.413325,0.41724,0.427185,0.437875,0.463005,0.4883,0.515355,0.54751,0.57983,0.31663,0.334845,0.567345,0.3651,0.384195,0.386,0.393195,0.40565,0.43458,0.46251,0.488975,0.51982,0.555515,0.313045,0.3358,0.567235,0.36522,0.379355,0.380955,0.39165,0.40647,0.431945,0.459955,0.489005,0.521535,0.55386,0.31794,0.33467,0.5658,0.36638,0.380025,0.38379,0.39612,0.41359,0.446845,0.48064,0.5147,0.521785,0.554855,
0.363655,0.381345,0.39914,0.5,0.435,0.43547,0.44161,0.45784,0.472105,0.49677,0.522895,0.555385,0.589905,0.327055,0.345735,0.36553,0.601885,0.402295,0.403735,0.410915,0.42326,0.44156,0.469235,0.50019,0.528805,0.564325,0.32756,0.34501,0.3633,0.599325,0.40105,0.40338,0.41343,0.42752,0.44113,0.46985,0.49773,0.52966,0.56712,0.326955,0.34767,0.367775,0.59996,0.4016,0.40083,0.412945,0.436035,0.45715,0.49066,0.52681,0.53059,0.565185,
0.377045,0.398305,0.41282,0.431475,0.5,0.45281,0.459575,0.475805,0.49099,0.50716,0.535505,0.565595,0.59823,0.341025,0.36003,0.3817,0.40141,0.63339,0.4201,0.434085,0.4455,0.461475,0.479305,0.509235,0.542535,0.57723,0.340795,0.360535,0.380605,0.40056,0.63121,0.4265,0.435145,0.44478,0.461975,0.47768,0.51082,0.54228,0.578825,0.33987,0.364415,0.38023,0.39901,0.63178,0.425245,0.43618,0.45416,0.47564,0.49759,0.536565,0.5415,0.576095,
0.37872,0.39782,0.416745,0.435725,0.45282,0.5,0.480285,0.49525,0.50841,0.52606,0.54273,0.57488,0.606755,0.343985,0.36643,0.383375,0.40555,0.42276,0.66362,0.44861,0.463155,0.48144,0.49804,0.518755,0.550635,0.59111,0.34247,0.366,0.38449,0.40198,0.4198,0.66362,0.448725,0.46654,0.48072,0.49839,0.51486,0.551715,0.58532,0.34301,0.36296,0.38136,0.40368,0.424205,0.66846,0.45693,0.4775,0.4966,0.518705,0.545265,0.551825,0.58608,
0.40139,0.40622,0.425755,0.44382,0.462685,0.479485,0.5,0.508095,0.52588,0.53664,0.561305,0.58354,0.61972,0.36602,0.371335,0.39364,0.41284,0.43531,0.452405,0.69013,0.480325,0.49912,0.51491,0.53522,0.560775,0.59988,0.365395,0.373295,0.39196,0.410785,0.432895,0.44853,0.694195,0.48403,0.499345,0.518165,0.533635,0.563365,0.59753,0.365495,0.373015,0.393065,0.4119,0.43482,0.454075,0.702755,0.49238,0.51458,0.53943,0.565715,0.560735,0.598985,
0.42112,0.431795,0.43684,0.455235,0.47319,0.49152,0.505975,0.5,0.542175,0.558725,0.57651,0.60055,0.627405,0.38833,0.4015,0.404155,0.424895,0.4458,0.466045,0.48187,0.721635,0.518605,0.53046,0.55401,0.5775,0.606705,0.389395,0.4004,0.40416,0.42835,0.443335,0.46184,0.47662,0.72323,0.518625,0.534065,0.554125,0.57972,0.608955,0.38774,0.397135,0.402755,0.42324,0.44508,0.46735,0.486445,0.73599,0.53413,0.559085,0.582055,0.5797,0.60508,
0.446115,0.45473,0.463145,0.467935,0.48932,0.505265,0.524845,0.542345,0.5,0.57741,0.593545,0.6182,0.645295,0.41444,0.426585,0.433935,0.44184,0.462745,0.479825,0.498265,0.51409,0.750445,0.554335,0.57584,0.59889,0.62616,0.41516,0.423095,0.433615,0.438715,0.464955,0.48059,0.49744,0.51992,0.754005,0.55533,0.570785,0.59442,0.62647,0.41566,0.422425,0.43242,0.441185,0.461965,0.48063,0.502935,0.529595,0.76817,0.577585,0.60125,0.59853,0.62664,
0.47282,0.48078,0.48895,0.49861,0.50905,0.52285,0.539285,0.555895,0.57557,0.5,0.60388,0.62432,0.651375,0.4421,0.452245,0.459295,0.470345,0.475075,0.498985,0.512685,0.532275,0.55289,0.775195,0.58184,0.60538,0.6359,0.444755,0.45176,0.461055,0.46839,0.479565,0.49617,0.513085,0.531745,0.5511,0.77727,0.579015,0.60489,0.63452,0.44159,0.450125,0.460055,0.469395,0.479535,0.50432,0.523425,0.54916,0.572375,0.79319,0.60701,0.60436,0.632815,
0.496965,0.506955,0.516835,0.524575,0.53754,0.54367,0.562545,0.5758,0.59523,0.602575,0.5,0.63289,0.658135,0.4686,0.478805,0.49201,0.49899,0.506885,0.517345,0.53865,0.55394,0.571055,0.579925,0.8009,0.6171,0.644355,0.47038,0.477895,0.48593,0.498775,0.50966,0.515515,0.53929,0.552905,0.57554,0.578835,0.799645,0.61353,0.64064,0.468135,0.47804,0.48781,0.49873,0.510145,0.52255,0.544005,0.566075,0.590475,0.606925,0.821755,0.60999,0.64155,
0.530475,0.539935,0.548125,0.558365,0.56683,0.57667,0.58142,0.60107,0.620695,0.62574,0.63341,0.5,0.6707,0.50414,0.513135,0.51968,0.530635,0.53972,0.554055,0.559135,0.575675,0.59594,0.605225,0.61399,0.825135,0.653055,0.504205,0.51165,0.52109,0.53399,0.544835,0.551965,0.56022,0.5762,0.59846,0.604415,0.614405,0.824955,0.651765,0.502575,0.511855,0.522495,0.531085,0.541485,0.556685,0.56776,0.58502,0.59693,0.606205,0.612755,0.824035,0.65183,
0.56392,0.57448,0.577865,0.591205,0.599255,0.611005,0.620115,0.626535,0.64589,0.65216,0.662055,0.66877,0.5,0.538015,0.54647,0.557055,0.566,0.577935,0.58583,0.59935,0.60718,0.62705,0.635305,0.642805,0.650575,0.84808,0.53606,0.54847,0.55725,0.567615,0.577805,0.588175,0.59851,0.60739,0.627445,0.635365,0.641035,0.65172,0.848425,0.538925,0.54657,0.557285,0.56521,0.577825,0.58728,0.605865,0.616915,0.636705,0.649705,0.662925,0.650225,0.85129,
0.499385,0.306305,0.31686,0.32605,0.338165,0.342655,0.364115,0.389405,0.41447,0.442225,0.468735,0.501595,0.53756,0.5,0.344495,0.350805,0.363,0.3782,0.37866,0.399235,0.421765,0.445745,0.473355,0.50012,0.528815,0.562965,0.49614,0.30547,0.31614,0.326935,0.34171,0.345785,0.369155,0.390585,0.414385,0.44019,0.472285,0.50331,0.535755,0.49875,0.307015,0.31364,0.3269,0.34332,0.344165,0.366715,0.400885,0.428985,0.4598,0.495085,0.50251,0.535435,
0.30781,0.530295,0.335345,0.34532,0.35955,0.366045,0.37556,0.39899,0.42381,0.453345,0.476515,0.51422,0.5441,0.345035,0.5,0.372235,0.383805,0.39638,0.39648,0.40753,0.430475,0.458065,0.48303,0.508725,0.53818,0.57328,0.306565,0.530445,0.33532,0.34726,0.36194,0.362695,0.368325,0.399435,0.424935,0.451645,0.4786,0.50958,0.549925,0.30466,0.530765,0.336615,0.34684,0.36192,0.36744,0.37261,0.405695,0.44043,0.47204,0.50577,0.509065,0.547855,
0.31672,0.334425,0.567365,0.36369,0.38135,0.3829,0.39189,0.403415,0.4326,0.459545,0.488665,0.52157,0.55562,0.352615,0.372405,0.5,0.40342,0.412925,0.417025,0.42511,0.436555,0.46452,0.48824,0.51657,0.54612,0.581755,0.31551,0.33625,0.56639,0.365125,0.381685,0.38443,0.39286,0.404485,0.43413,0.460615,0.48861,0.52009,0.55555,0.31838,0.33652,0.56609,0.366705,0.38226,0.38529,0.392545,0.412815,0.449655,0.483785,0.514855,0.518725,0.55592,
0.32636,0.347115,0.36223,0.599425,0.40325,0.402835,0.410435,0.428635,0.443405,0.4709,0.49791,0.532505,0.569595,0.361805,0.383935,0.40192,0.5,0.43098,0.43327,0.444585,0.454975,0.47172,0.49582,0.525445,0.55479,0.58772,0.328475,0.34797,0.366145,0.600965,0.40074,0.405785,0.409975,0.42505,0.441595,0.46671,0.498905,0.529585,0.566955,0.32557,0.34769,0.365395,0.599275,0.401935,0.405655,0.413445,0.43201,0.45606,0.493295,0.521645,0.530585,0.565475,
0.343545,0.360815,0.38,0.40085,0.632915,0.423625,0.431395,0.444785,0.46082,0.47777,0.51165,0.54126,0.577775,0.37705,0.39658,0.412945,0.430685,0.5,0.45438,0.46379,0.473325,0.492,0.50616,0.535225,0.5668,0.597955,0.34188,0.36098,0.381695,0.40111,0.6297,0.423515,0.43565,0.446315,0.460295,0.477215,0.509765,0.541965,0.57826,0.343365,0.362515,0.383265,0.40062,0.630345,0.424015,0.432625,0.456765,0.475615,0.50043,0.53449,0.541055,0.577665,
0.342525,0.361565,0.381295,0.404565,0.423885,0.66396,0.44991,0.46459,0.479835,0.499535,0.51758,0.55112,0.589265,0.380205,0.39941,0.421445,0.43478,0.451515,0.5,0.480175,0.49263,0.506285,0.52399,0.543165,0.575915,0.60958,0.34308,0.363425,0.383405,0.39923,0.42318,0.6627,0.45157,0.46416,0.4825,0.498465,0.51631,0.553885,0.589685,0.3448,0.363875,0.38576,0.402405,0.424355,0.66863,0.454365,0.47337,0.498905,0.522035,0.544325,0.55198,0.5881,
0.36319,0.37388,0.39362,0.4089,0.42967,0.45173,0.69291,0.48189,0.498945,0.513975,0.53367,0.55969,0.600825,0.40158,0.40528,0.42468,0.445415,0.46253,0.48066,0.5,0.508475,0.525755,0.54227,0.559085,0.58492,0.61869,0.365845,0.370225,0.39382,0.415135,0.43223,0.451505,0.691975,0.48144,0.49682,0.517675,0.53582,0.560485,0.600165,0.365235,0.37348,0.391655,0.411505,0.43145,0.453415,0.703455,0.49198,0.515845,0.53858,0.564215,0.558875,0.59667,
0.387705,0.39817,0.406975,0.426455,0.446305,0.46735,0.481655,0.72186,0.519765,0.532365,0.55264,0.57952,0.607595,0.422465,0.43065,0.436425,0.45616,0.4762,0.4896,0.51014,0.5,0.54146,0.555785,0.57641,0.600535,0.62619,0.38793,0.397575,0.40323,0.422835,0.445225,0.462655,0.48165,0.724165,0.51686,0.535045,0.554135,0.58001,0.609705,0.391255,0.397645,0.40682,0.42509,0.445725,0.46422,0.4876,0.732775,0.53484,0.55598,0.58018,0.57878,0.60841,
0.41603,0.42444,0.43335,0.440345,0.461615,0.48026,0.49834,0.51753,0.752185,0.55192,0.572105,0.59776,0.626315,0.447875,0.455695,0.463165,0.471335,0.490835,0.50548,0.526255,0.540845,0.5,0.575605,0.595625,0.62009,0.645175,0.416875,0.425995,0.43228,0.440935,0.46402,0.47938,0.496655,0.516015,0.753115,0.554375,0.57343,0.59952,0.626805,0.4138,0.42559,0.433245,0.44141,0.46265,0.484515,0.50423,0.5295,0.76808,0.57533,0.599435,0.597915,0.623695,
0.44291,0.45321,0.45616,0.468975,0.4801,0.49534,0.512655,0.533675,0.55395,0.775385,0.583265,0.60701,0.63487,0.469425,0.47918,0.48825,0.49678,0.50719,0.523195,0.54,0.557225,0.576585,0.5,0.60262,0.625325,0.650475,0.441175,0.45227,0.462075,0.469165,0.480105,0.497705,0.515005,0.53334,0.554435,0.77755,0.575305,0.60457,0.632905,0.443125,0.451125,0.459335,0.47024,0.478595,0.506015,0.523725,0.548045,0.57194,0.79539,0.609795,0.606555,0.63437,
0.470095,0.480565,0.48743,0.501345,0.509565,0.518245,0.536865,0.55324,0.572805,0.579055,0.8021,0.613345,0.642455,0.498565,0.50904,0.5193,0.52452,0.53265,0.543395,0.558015,0.576525,0.59422,0.6018,0.5,0.63311,0.6595,0.46957,0.47997,0.48811,0.498845,0.510335,0.520365,0.535795,0.554005,0.57244,0.579915,0.80031,0.613285,0.64061,0.47225,0.47511,0.491205,0.49959,0.50956,0.52547,0.548515,0.56838,0.59052,0.60476,0.81974,0.61509,0.64128,
0.500395,0.51349,0.524295,0.53138,0.540635,0.552065,0.560135,0.581145,0.599335,0.60661,0.613005,0.82657,0.652895,0.529775,0.54143,0.546725,0.55738,0.568245,0.576295,0.58425,0.60297,0.617075,0.6274,0.634425,0.5,0.667815,0.501355,0.51035,0.519535,0.53021,0.543575,0.552885,0.56216,0.579625,0.597285,0.60733,0.614205,0.825285,0.649225,0.50422,0.512565,0.517365,0.53086,0.5428,0.556165,0.56614,0.583945,0.598715,0.60792,0.61167,0.82502,0.65159,
0.53834,0.549905,0.554225,0.566905,0.577,0.58664,0.596605,0.60951,0.62659,0.634805,0.641515,0.65242,0.85054,0.564465,0.569575,0.580085,0.58974,0.59834,0.609395,0.61982,0.62921,0.643775,0.65272,0.660795,0.667745,0.5,0.5355,0.54637,0.55601,0.5661,0.577385,0.58592,0.60112,0.60625,0.62907,0.632425,0.642745,0.64855,0.849655,0.536175,0.546385,0.554385,0.568325,0.576405,0.588275,0.602905,0.616335,0.638725,0.650795,0.665815,0.65042,0.85057,
0.49978,0.307345,0.316135,0.32764,0.340005,0.34438,0.36594,0.392665,0.415595,0.446105,0.471165,0.50176,0.53787,0.499265,0.305605,0.315335,0.32748,0.341755,0.342735,0.367245,0.39157,0.41536,0.439505,0.47222,0.501645,0.539555,0.5,0.341265,0.35144,0.361075,0.37702,0.378455,0.400015,0.4246,0.44788,0.47508,0.500475,0.52899,0.56699,0.497195,0.30812,0.31643,0.32597,0.338855,0.34366,0.366435,0.39635,0.42775,0.461555,0.495905,0.50137,0.53798,
0.307695,0.533015,0.336985,0.346975,0.364695,0.363735,0.37335,0.397515,0.42578,0.45156,0.47884,0.5115,0.545,0.30531,0.53123,0.33794,0.35049,0.362935,0.364485,0.370355,0.40048,0.423825,0.45388,0.48172,0.51432,0.545595,0.34557,0.5,0.370135,0.38141,0.393165,0.395545,0.40873,0.431305,0.45312,0.479905,0.506295,0.541215,0.571045,0.304655,0.53274,0.33506,0.349775,0.361365,0.366545,0.373755,0.405215,0.43787,0.4716,0.506035,0.51013,0.546545,
0.31584,0.335,0.56865,0.363945,0.38049,0.382415,0.395025,0.4008,0.43569,0.45806,0.488585,0.520205,0.5545,0.317805,0.33406,0.568325,0.366035,0.38096,0.381915,0.394255,0.40642,0.431685,0.46054,0.48885,0.52019,0.55889,0.35271,0.371915,0.5,0.40091,0.41526,0.416185,0.42424,0.435705,0.464525,0.48685,0.515655,0.546655,0.577105,0.31586,0.3364,0.56609,0.365475,0.38159,0.38369,0.394075,0.41269,0.447535,0.47956,0.514875,0.520675,0.559435,
0.32736,0.34559,0.367985,0.59642,0.397955,0.405335,0.41285,0.425685,0.439455,0.47113,0.50034,0.53409,0.56472,0.32957,0.34579,0.36641,0.59967,0.400265,0.402005,0.41433,0.42352,0.44186,0.47131,0.49916,0.53316,0.564865,0.363675,0.38271,0.40176,0.5,0.43159,0.43389,0.44389,0.45656,0.472555,0.49818,0.523725,0.55518,0.593765,0.32518,0.345775,0.363745,0.59887,0.39964,0.406655,0.41546,0.432155,0.4549,0.49248,0.52562,0.52889,0.565615,
0.34299,0.36278,0.379105,0.40222,0.63404,0.421585,0.43152,0.445645,0.46072,0.478335,0.509945,0.541135,0.575565,0.341335,0.36405,0.38039,0.40231,0.63485,0.422625,0.428215,0.446765,0.4585,0.476835,0.50892,0.542325,0.57778,0.37774,0.395835,0.415745,0.434705,0.5,0.45501,0.461405,0.4763,0.493035,0.505625,0.532075,0.56689,0.59919,0.341225,0.363025,0.3813,0.39986,0.63313,0.42546,0.43382,0.454295,0.474685,0.49973,0.533815,0.542,0.57931,
0.34009,0.363785,0.383215,0.40117,0.422755,0.664075,0.450445,0.464525,0.48051,0.497565,0.5189,0.551055,0.587705,0.34172,0.362805,0.381195,0.403395,0.42236,0.665755,0.452065,0.46617,0.4784,0.49712,0.519125,0.55061,0.5914,0.378265,0.399295,0.418175,0.43371,0.451815,0.5,0.481825,0.49273,0.50554,0.523695,0.545435,0.57566,0.6094,0.34168,0.360675,0.383325,0.403415,0.42208,0.66693,0.4551,0.472675,0.49508,0.517885,0.54333,0.55023,0.58941,
0.36868,0.37436,0.389665,0.41321,0.433775,0.45211,0.69392,0.481265,0.49592,0.51479,0.536215,0.563995,0.600225,0.365395,0.37329,0.391945,0.41237,0.43249,0.45134,0.69148,0.479935,0.49614,0.516675,0.534085,0.56048,0.599735,0.400125,0.405145,0.426015,0.444835,0.46356,0.481555,0.5,0.50968,0.522405,0.539275,0.557395,0.58475,0.61987,0.367265,0.372485,0.39194,0.411295,0.43512,0.45441,0.704435,0.491605,0.512735,0.53621,0.564835,0.558645,0.59735,
0.390075,0.398795,0.404245,0.42419,0.44517,0.46433,0.48066,0.72233,0.51673,0.532495,0.55501,0.579955,0.60901,0.387935,0.397305,0.40598,0.42665,0.44523,0.46603,0.47931,0.7216,0.51935,0.53549,0.554745,0.581295,0.606865,0.423145,0.429345,0.43807,0.45628,0.477435,0.49362,0.507275,0.5,0.544415,0.55732,0.57681,0.60024,0.62984,0.39112,0.399905,0.401765,0.426255,0.44458,0.467415,0.48825,0.73428,0.533845,0.557165,0.582875,0.58027,0.60882,
0.41694,0.42217,0.433045,0.443135,0.461635,0.48005,0.49701,0.51528,0.75028,0.55323,0.572105,0.596935,0.628065,0.412905,0.42568,0.43199,0.439975,0.462905,0.482295,0.495825,0.516595,0.74993,0.55504,0.57267,0.598055,0.62759,0.447515,0.454955,0.46548,0.47237,0.488725,0.50596,0.52503,0.53857,0.5,0.575635,0.5926,0.61945,0.645625,0.415565,0.42646,0.434615,0.44026,0.46,0.48273,0.507625,0.531875,0.76456,0.57452,0.599565,0.599065,0.625015,
0.441545,0.45106,0.462475,0.470365,0.480525,0.50092,0.514905,0.5324,0.555085,0.77632,0.58252,0.606525,0.635965,0.438595,0.45066,0.458105,0.469715,0.479735,0.500005,0.516655,0.534855,0.55338,0.77635,0.5813,0.606475,0.63499,0.47475,0.47953,0.48825,0.497165,0.505155,0.52165,0.54435,0.55634,0.577595,0.5,0.60186,0.62388,0.651405,0.44274,0.45134,0.4606,0.46963,0.482405,0.499315,0.527145,0.547995,0.569185,0.795775,0.60792,0.60654,0.6345,
0.469735,0.47857,0.48695,0.495775,0.508055,0.515745,0.538205,0.552695,0.57313,0.577485,0.79994,0.615085,0.6417,0.46701,0.47933,0.489455,0.499665,0.50744,0.521165,0.536605,0.552475,0.572605,0.58157,0.801925,0.613625,0.640305,0.499215,0.506705,0.51562,0.524545,0.53507,0.54362,0.55933,0.580145,0.59433,0.59996,0.5,0.632545,0.659225,0.47255,0.47796,0.485905,0.49955,0.508065,0.52425,0.547395,0.570405,0.58974,0.60418,0.82042,0.615375,0.642035,
0.50094,0.512815,0.521335,0.52979,0.541995,0.55197,0.56369,0.5808,0.60205,0.607135,0.61244,0.827945,0.65216,0.50052,0.512605,0.52012,0.53013,0.54141,0.55172,0.563345,0.577235,0.595415,0.606765,0.611715,0.826725,0.65125,0.529035,0.53442,0.546725,0.558485,0.56564,0.5778,0.582925,0.602625,0.61821,0.62665,0.6325,0.5,0.66981,0.50122,0.513285,0.521105,0.530185,0.546225,0.55395,0.567825,0.58241,0.599355,0.60624,0.610465,0.828915,0.650955,
0.54113,0.550085,0.55639,0.564805,0.576795,0.5899,0.59857,0.6076,0.62774,0.631925,0.64121,0.651755,0.849015,0.53674,0.545865,0.5577,0.56629,0.575825,0.58623,0.59914,0.608295,0.62676,0.63731,0.64321,0.64876,0.852135,0.564235,0.571055,0.58071,0.588715,0.59987,0.6083,0.619035,0.62521,0.645775,0.65464,0.66092,0.66624,0.5,0.537465,0.547715,0.5544,0.56732,0.57835,0.591385,0.60353,0.615545,0.63782,0.652045,0.66476,0.651845,0.85269,
0.496575,0.30524,0.313875,0.326305,0.34193,0.34208,0.367165,0.38848,0.41258,0.441975,0.471585,0.502115,0.536905,0.49612,0.30716,0.31832,0.32744,0.34208,0.342875,0.367195,0.39287,0.416245,0.4422,0.47069,0.50281,0.539945,0.498075,0.30375,0.316435,0.32805,0.344145,0.342765,0.364415,0.38885,0.41443,0.441615,0.46808,0.503245,0.53597,0.5,0.346235,0.35205,0.363405,0.376435,0.377815,0.402255,0.431005,0.457105,0.485845,0.51999,0.52943,0.563145,
0.30662,0.53254,0.333225,0.348275,0.361505,0.36324,0.371585,0.39997,0.422385,0.448395,0.478055,0.512315,0.549365,0.307745,0.534555,0.337395,0.345015,0.362365,0.362545,0.372625,0.397135,0.42416,0.45089,0.47953,0.513175,0.548525,0.30524,0.532005,0.33676,0.34606,0.360295,0.365615,0.374855,0.398165,0.42385,0.452585,0.47757,0.5102,0.54856,0.341885,0.5,0.371465,0.384925,0.39552,0.398005,0.40821,0.43605,0.46846,0.497265,0.525175,0.53961,0.571315,
0.314685,0.334635,0.566125,0.367285,0.379455,0.383195,0.39439,0.405775,0.43252,0.45677,0.48999,0.52101,0.556175,0.3134,0.33407,0.566895,0.364805,0.37869,0.382895,0.39281,0.40829,0.433875,0.462075,0.487685,0.518845,0.55512,0.316105,0.335955,0.56613,0.364385,0.38135,0.384285,0.39371,0.404805,0.433145,0.461455,0.49097,0.521285,0.55645,0.3523,0.37056,0.5,0.40229,0.41614,0.415905,0.42553,0.445205,0.474635,0.50477,0.53618,0.545825,0.58016,
0.32599,0.345665,0.36717,0.598645,0.40189,0.402475,0.41232,0.42708,0.43983,0.46864,0.50007,0.53248,0.56417,0.328395,0.34881,0.368135,0.598405,0.398675,0.40226,0.414105,0.422635,0.441135,0.468285,0.49646,0.532515,0.5684,0.32654,0.34493,0.364885,0.60175,0.403245,0.40269,0.410485,0.424905,0.440815,0.46768,0.498185,0.53329,0.568805,0.36618,0.383245,0.39804,0.5,0.431895,0.43478,0.44651,0.46249,0.487295,0.517505,0.54675,0.55613,0.586145,
0.341395,0.36318,0.37962,0.40015,0.635135,0.4207,0.432195,0.44471,0.462815,0.47672,0.512245,0.54196,0.576665,0.34148,0.3587,0.37891,0.398915,0.62934,0.424445,0.430575,0.446245,0.46113,0.47954,0.510085,0.542165,0.57659,0.34225,0.3629,0.381115,0.399565,0.630795,0.42406,0.43309,0.447135,0.46483,0.477025,0.508525,0.54187,0.57631,0.3772,0.396925,0.413445,0.43014,0.5,0.452285,0.469,0.483905,0.500895,0.523705,0.558595,0.56533,0.59781,
0.34514,0.36373,0.38258,0.402545,0.420725,0.66587,0.4556,0.46648,0.48361,0.500875,0.520675,0.55904,0.590035,0.346735,0.36547,0.38528,0.40476,0.42528,0.66407,0.45386,0.466315,0.484995,0.503645,0.52405,0.55888,0.59054,0.344955,0.36665,0.384495,0.403205,0.424655,0.665355,0.45381,0.46825,0.486335,0.503265,0.52517,0.55832,0.593905,0.380755,0.398685,0.417635,0.434685,0.456875,0.5,0.48484,0.50114,0.52321,0.546595,0.5689,0.58307,0.61002,
0.366725,0.37783,0.39299,0.416835,0.436075,0.45325,0.702305,0.48937,0.50879,0.52717,0.54782,0.57303,0.605705,0.366945,0.37233,0.39538,0.41586,0.434685,0.45291,0.699535,0.48754,0.505515,0.52385,0.545255,0.573945,0.604745,0.36653,0.376315,0.393615,0.41554,0.434235,0.455625,0.703885,0.489775,0.50309,0.525475,0.545145,0.5744,0.606605,0.401275,0.409645,0.425975,0.443655,0.467975,0.486925,0.5,0.524765,0.546775,0.56953,0.59421,0.596795,0.62619,
0.396895,0.40971,0.413945,0.430405,0.453865,0.47224,0.490145,0.736625,0.532155,0.549535,0.569845,0.595035,0.611265,0.397425,0.40413,0.412675,0.436785,0.45355,0.47571,0.491725,0.73652,0.5301,0.54753,0.57269,0.595065,0.6125,0.39771,0.407875,0.4142,0.435195,0.452285,0.47291,0.491355,0.7356,0.526355,0.54642,0.56833,0.59705,0.611625,0.4293,0.441245,0.442645,0.46174,0.48177,0.50316,0.526465,0.5,0.56714,0.591605,0.61272,0.61165,0.635905,
0.430155,0.43889,0.44985,0.45745,0.47961,0.49664,0.514875,0.534405,0.767485,0.57219,0.59258,0.618435,0.627805,0.43079,0.441385,0.44797,0.457785,0.478015,0.49515,0.513565,0.536615,0.76616,0.57127,0.590595,0.61658,0.62873,0.430775,0.439725,0.44762,0.45455,0.47594,0.49419,0.51599,0.53286,0.76926,0.572435,0.592035,0.617285,0.629395,0.45921,0.467995,0.475145,0.482275,0.50145,0.526145,0.54644,0.572025,0.5,0.61078,0.63591,0.637135,0.65524,
0.461925,0.469935,0.48045,0.48861,0.501315,0.518465,0.53689,0.558545,0.57806,0.79477,0.605745,0.629645,0.63383,0.46121,0.4696,0.48071,0.48917,0.502635,0.518745,0.53993,0.556795,0.578495,0.79583,0.60413,0.63151,0.635275,0.46094,0.46976,0.48034,0.49066,0.500955,0.52111,0.537895,0.55916,0.575135,0.79457,0.607005,0.63116,0.633755,0.48818,0.499965,0.50583,0.51616,0.52347,0.548105,0.57162,0.59188,0.612475,0.5,0.64935,0.645005,0.664805,
0.493055,0.5078,0.513615,0.52332,0.532545,0.54704,0.564155,0.583345,0.598705,0.61117,0.81944,0.64564,0.639715,0.494875,0.50616,0.513845,0.525865,0.535345,0.545935,0.562365,0.58347,0.600465,0.60944,0.82145,0.645975,0.63919,0.49483,0.504105,0.51676,0.52602,0.536665,0.54129,0.565055,0.582635,0.601735,0.6128,0.82127,0.64516,0.638975,0.51875,0.52966,0.537405,0.54511,0.556015,0.57242,0.596595,0.61714,0.63588,0.65173,0.5,0.661045,0.677335,
0.532445,0.54367,0.549525,0.5611,0.571125,0.58133,0.591045,0.6118,0.630725,0.63974,0.64899,0.849455,0.65119,0.530915,0.53884,0.551395,0.55997,0.57131,0.582225,0.591335,0.61066,0.627545,0.639255,0.647325,0.84779,0.65044,0.530975,0.542035,0.549805,0.55845,0.56934,0.58075,0.59228,0.61289,0.628895,0.639245,0.647835,0.84673,0.648725,0.55466,0.56202,0.571885,0.58043,0.592045,0.60413,0.620365,0.632245,0.648455,0.65502,0.66331,0.5,0.670265,
0.53849,0.5488,0.55599,0.567435,0.578005,0.58811,0.597125,0.608685,0.626325,0.63264,0.642715,0.65214,0.851585,0.537975,0.546895,0.55635,0.565935,0.57898,0.587625,0.598665,0.60827,0.62619,0.63186,0.64452,0.65287,0.84899,0.538795,0.54722,0.555935,0.56414,0.575425,0.588415,0.59888,0.60718,0.624125,0.63292,0.642885,0.65093,0.851845,0.56263,0.572355,0.582525,0.59057,0.60055,0.609955,0.62382,0.63404,0.6549,0.6693,0.67941,0.669495,0.5,
};

static const double AP[7][52][52] = {
0.5,0.34498,0.351455,0.362035,0.37782,0.377435,0.399465,0.42167,0.44582,0.471285,0.49924,0.52771,0.563365,0.497855,0.309455,0.31544,0.325625,0.340075,0.34605,0.36455,0.38994,0.417395,0.442275,0.471145,0.503625,0.538245,0.497175,0.306575,0.316195,0.32604,0.342155,0.346325,0.365355,0.38762,0.412255,0.441,0.472265,0.50646,0.536735,0.499195,0.305545,0.31531,0.325275,0.342565,0.342165,0.36982,0.394,0.431885,0.46078,0.49869,0.50153,0.538475,
0.34584,0.5,0.37176,0.38063,0.394435,0.395285,0.405995,0.431805,0.45409,0.478695,0.506405,0.540665,0.570535,0.304525,0.53165,0.33588,0.344595,0.362045,0.36479,0.37232,0.39845,0.42575,0.45169,0.47726,0.51057,0.54811,0.307835,0.53424,0.33747,0.34807,0.361635,0.362585,0.37031,0.399725,0.42549,0.45348,0.478445,0.512225,0.54857,0.308055,0.533815,0.33421,0.346555,0.361465,0.363325,0.376255,0.405695,0.43753,0.46974,0.504565,0.512445,0.54681,
0.35302,0.36763,0.5,0.39764,0.41211,0.41688,0.426165,0.437025,0.464925,0.4885,0.515595,0.547065,0.579615,0.316315,0.33712,0.56661,0.36375,0.38076,0.38227,0.392785,0.40423,0.43542,0.460715,0.49201,0.522155,0.558285,0.31766,0.33414,0.565295,0.366875,0.38246,0.384485,0.39091,0.40601,0.434115,0.460325,0.488955,0.519625,0.5555,0.31745,0.335415,0.563905,0.365435,0.382235,0.382455,0.391165,0.41203,0.448835,0.478265,0.51475,0.52195,0.555825,
0.364325,0.38226,0.400125,0.5,0.43112,0.433795,0.44012,0.456005,0.470915,0.499035,0.52517,0.55908,0.58802,0.3256,0.349065,0.36792,0.596585,0.399055,0.403625,0.412,0.42543,0.44047,0.470025,0.49748,0.53051,0.567065,0.327525,0.346595,0.36704,0.59981,0.401405,0.40161,0.407965,0.425735,0.438755,0.47097,0.499855,0.532465,0.56573,0.324605,0.34582,0.365625,0.59686,0.402195,0.40654,0.415485,0.434935,0.45768,0.49254,0.52338,0.53074,0.563945,
0.376815,0.398055,0.415455,0.431845,0.5,0.45413,0.465095,0.476345,0.491355,0.50531,0.532715,0.566795,0.59736,0.340185,0.36014,0.38058,0.40305,0.6323,0.422905,0.43303,0.44628,0.458685,0.478865,0.51167,0.53924,0.576555,0.340305,0.363425,0.38175,0.399855,0.631575,0.423815,0.4326,0.44774,0.462235,0.476795,0.511195,0.538685,0.57638,0.33984,0.361625,0.382705,0.40007,0.63206,0.422865,0.43495,0.45325,0.47768,0.497795,0.535555,0.540565,0.576345,
0.381205,0.39698,0.415545,0.436865,0.45219,0.5,0.47945,0.491535,0.50728,0.5241,0.54523,0.57569,0.60875,0.344285,0.361755,0.382965,0.403385,0.422895,0.66385,0.449925,0.46403,0.48063,0.499265,0.516285,0.552375,0.588915,0.34705,0.36279,0.38405,0.401905,0.42234,0.664935,0.450895,0.466335,0.481115,0.501235,0.51761,0.55007,0.587635,0.342645,0.36225,0.38484,0.404695,0.42079,0.66714,0.457425,0.47505,0.497265,0.51908,0.54555,0.551645,0.59023,
0.40318,0.406775,0.42474,0.44232,0.46339,0.48014,0.5,0.507515,0.52591,0.53962,0.56052,0.584095,0.621015,0.366105,0.3752,0.393415,0.41366,0.4331,0.45371,0.69413,0.48145,0.4978,0.51417,0.53557,0.563815,0.59946,0.365915,0.372235,0.38976,0.41251,0.432215,0.45267,0.69343,0.481825,0.49908,0.51589,0.53776,0.55914,0.5974,0.36358,0.37401,0.391585,0.412485,0.435965,0.455375,0.70186,0.496475,0.516985,0.537835,0.564135,0.561445,0.599255,
0.421955,0.43482,0.43783,0.45828,0.47393,0.49133,0.506925,0.5,0.54272,0.555815,0.57541,0.601605,0.626645,0.38994,0.397915,0.405615,0.424695,0.4465,0.464945,0.48235,0.721595,0.51605,0.533175,0.556975,0.5795,0.60899,0.393,0.397865,0.405895,0.42485,0.44721,0.46383,0.482525,0.72104,0.51819,0.535895,0.54981,0.57658,0.60442,0.38953,0.396505,0.40427,0.426295,0.446225,0.466265,0.48682,0.736395,0.535125,0.557135,0.58382,0.57826,0.604015,
0.446505,0.456,0.46499,0.471305,0.48761,0.50723,0.52424,0.5428,0.5,0.57568,0.59366,0.620225,0.646105,0.41397,0.426285,0.435345,0.44319,0.463255,0.47879,0.50032,0.516095,0.752455,0.553285,0.573245,0.597095,0.629475,0.41782,0.42604,0.434355,0.440805,0.45966,0.47895,0.499585,0.516145,0.750295,0.55172,0.572415,0.597005,0.62665,0.4135,0.423685,0.43523,0.44276,0.46189,0.48132,0.509725,0.53127,0.770155,0.57563,0.5962,0.595645,0.62381,
0.472515,0.47809,0.48894,0.498855,0.506955,0.52694,0.54549,0.55638,0.57398,0.5,0.60389,0.62645,0.65413,0.442215,0.451415,0.46004,0.47054,0.48202,0.497215,0.516345,0.532275,0.55317,0.77525,0.580185,0.605945,0.630795,0.44371,0.449,0.458635,0.47092,0.480305,0.50008,0.51776,0.533235,0.55295,0.777225,0.577525,0.604115,0.634755,0.439355,0.44981,0.457125,0.46883,0.478765,0.50265,0.52642,0.54673,0.56946,0.794965,0.60946,0.605205,0.633355,
0.49916,0.506395,0.514635,0.524725,0.53462,0.543995,0.55991,0.574625,0.59542,0.600515,0.5,0.6312,0.66054,0.471485,0.476435,0.489295,0.49991,0.511275,0.514535,0.53713,0.556925,0.57338,0.581145,0.80067,0.611035,0.64264,0.469555,0.47908,0.48678,0.497625,0.51072,0.515865,0.53557,0.554845,0.575055,0.580405,0.800065,0.61641,0.64655,0.468575,0.477255,0.489525,0.500035,0.508455,0.523515,0.54452,0.567535,0.591525,0.6052,0.82001,0.613035,0.64269,
0.530995,0.536935,0.54719,0.555575,0.56674,0.578425,0.58477,0.601345,0.62024,0.625115,0.63509,0.5,0.666375,0.49881,0.515505,0.52159,0.53074,0.54389,0.55091,0.56411,0.582835,0.59492,0.604035,0.612805,0.825615,0.65336,0.50297,0.513205,0.520065,0.53079,0.54324,0.554165,0.56171,0.57784,0.5985,0.605145,0.61441,0.824055,0.650835,0.503105,0.510835,0.51842,0.532125,0.54327,0.55472,0.567645,0.583255,0.599205,0.60633,0.616885,0.82625,0.649845,
0.561485,0.570755,0.580945,0.59246,0.598385,0.609305,0.6172,0.628275,0.647235,0.654075,0.66197,0.67113,0.5,0.538455,0.547435,0.55664,0.564695,0.57198,0.585575,0.599205,0.609645,0.62557,0.636055,0.643715,0.65262,0.848175,0.5391,0.54687,0.55651,0.562435,0.57736,0.586485,0.599,0.607095,0.623915,0.634205,0.642775,0.654995,0.849805,0.53936,0.54776,0.55641,0.568585,0.57581,0.59058,0.602265,0.617085,0.64039,0.651795,0.6653,0.65348,0.85195,
0.4987,0.309175,0.317475,0.32675,0.34259,0.346165,0.36777,0.38629,0.415065,0.441005,0.47067,0.50424,0.538505,0.5,0.343625,0.35504,0.3637,0.376165,0.37998,0.39913,0.42227,0.448085,0.471395,0.49911,0.531145,0.567435,0.498375,0.306205,0.315035,0.3298,0.34221,0.34392,0.365205,0.388915,0.41632,0.441585,0.46984,0.503845,0.53885,0.500355,0.30724,0.316815,0.32726,0.34381,0.34635,0.367015,0.396875,0.42952,0.46424,0.49533,0.50303,0.53597,
0.307185,0.53367,0.33303,0.34652,0.36135,0.36465,0.37334,0.398875,0.423035,0.452185,0.480585,0.510335,0.54999,0.343145,0.5,0.36998,0.381155,0.39544,0.40001,0.40604,0.430465,0.456835,0.48164,0.507695,0.53744,0.56854,0.3061,0.53151,0.335325,0.349095,0.361895,0.361395,0.37253,0.396485,0.425365,0.45101,0.47572,0.5123,0.548815,0.307625,0.532415,0.33385,0.346745,0.36011,0.363985,0.37314,0.404585,0.438685,0.47138,0.50464,0.513155,0.54955,
0.316055,0.335475,0.566475,0.36435,0.380745,0.38423,0.394415,0.40522,0.43257,0.459245,0.489875,0.52041,0.55651,0.35051,0.37173,0.5,0.39847,0.413075,0.416865,0.42549,0.436495,0.464975,0.49018,0.51837,0.548335,0.579875,0.315895,0.335525,0.564845,0.365165,0.380275,0.382975,0.392525,0.40522,0.435025,0.46076,0.49181,0.520925,0.55491,0.31837,0.338885,0.566485,0.36618,0.379105,0.379345,0.393015,0.414935,0.445425,0.47902,0.513475,0.521385,0.55452,
0.32573,0.348725,0.366905,0.59978,0.39897,0.402325,0.41314,0.42501,0.441275,0.466395,0.499615,0.52868,0.566625,0.362185,0.380585,0.40184,0.5,0.435865,0.434495,0.442555,0.45571,0.469175,0.49988,0.525525,0.55374,0.58967,0.328975,0.35028,0.366085,0.60098,0.400745,0.4025,0.410805,0.42438,0.441785,0.472735,0.500915,0.53196,0.56537,0.32419,0.34591,0.36661,0.599455,0.400235,0.40232,0.41248,0.43484,0.455855,0.490445,0.522415,0.530345,0.56577,
0.34189,0.36194,0.380405,0.39981,0.632855,0.42429,0.43138,0.44912,0.46281,0.478665,0.51005,0.54145,0.57747,0.37447,0.400245,0.41606,0.43399,0.5,0.4511,0.46345,0.47524,0.489745,0.506475,0.53539,0.567195,0.59784,0.34322,0.363055,0.38283,0.401625,0.63006,0.42251,0.43475,0.446235,0.462765,0.479995,0.50775,0.54372,0.575755,0.343185,0.36207,0.37978,0.399995,0.635365,0.42301,0.434225,0.456355,0.477775,0.49877,0.536435,0.54061,0.57761,
0.34258,0.366015,0.382495,0.403335,0.42416,0.663485,0.450305,0.4644,0.48059,0.496755,0.51492,0.553685,0.58739,0.379445,0.39774,0.41757,0.436285,0.451505,0.5,0.477505,0.490195,0.50697,0.523875,0.54012,0.575315,0.60989,0.342855,0.363535,0.3847,0.40191,0.423115,0.66429,0.451385,0.46601,0.48097,0.497955,0.51518,0.555845,0.58895,0.34468,0.36485,0.381605,0.404015,0.421415,0.665115,0.452305,0.474665,0.495245,0.51812,0.54511,0.555515,0.588075,
0.36708,0.36904,0.394065,0.413525,0.432915,0.44969,0.69363,0.481725,0.499525,0.516825,0.53594,0.55937,0.59884,0.40099,0.403965,0.421345,0.445505,0.46084,0.47834,0.5,0.50935,0.524205,0.543495,0.56009,0.582875,0.61813,0.36623,0.3746,0.39362,0.411805,0.434955,0.44836,0.69158,0.477485,0.497795,0.51573,0.535015,0.557205,0.59744,0.36441,0.37251,0.391995,0.41285,0.43372,0.45312,0.70015,0.491085,0.51767,0.535825,0.56113,0.562365,0.598345,
0.391525,0.395185,0.40761,0.425955,0.443195,0.463095,0.48175,0.72192,0.516335,0.533605,0.551875,0.58186,0.6081,0.420015,0.43116,0.4353,0.45784,0.476745,0.49171,0.509465,0.5,0.541205,0.5572,0.57811,0.598585,0.62841,0.38972,0.399,0.4046,0.428005,0.449525,0.46118,0.48234,0.72549,0.51608,0.534705,0.552405,0.5793,0.606355,0.3889,0.39854,0.404885,0.42643,0.445145,0.466545,0.488945,0.736325,0.53542,0.556545,0.577845,0.579135,0.604115,
0.416165,0.42311,0.43194,0.440425,0.460025,0.47886,0.49777,0.51604,0.75335,0.554115,0.57379,0.597865,0.62674,0.448115,0.457855,0.462985,0.47092,0.48947,0.50742,0.52388,0.54054,0.5,0.573195,0.59431,0.61791,0.645505,0.416255,0.425505,0.43343,0.441775,0.461755,0.481535,0.500835,0.517415,0.75205,0.55403,0.572745,0.6001,0.625835,0.415155,0.4238,0.43364,0.440395,0.46296,0.48458,0.503955,0.527785,0.769725,0.5733,0.59711,0.59744,0.629235,
0.44281,0.449805,0.461645,0.47186,0.47832,0.49855,0.51695,0.53421,0.55502,0.777795,0.580965,0.606805,0.63226,0.47355,0.480995,0.48746,0.4994,0.506355,0.52555,0.541835,0.5555,0.575435,0.5,0.602605,0.624975,0.65318,0.44231,0.452105,0.456125,0.472685,0.48326,0.497255,0.51565,0.53461,0.554435,0.77674,0.57994,0.60703,0.63453,0.444185,0.450935,0.462665,0.470085,0.47907,0.502785,0.525045,0.548605,0.569265,0.793685,0.60945,0.60773,0.63621,
0.469405,0.47665,0.487935,0.497955,0.510965,0.519635,0.535195,0.553645,0.57457,0.581375,0.799845,0.613145,0.64183,0.501995,0.50444,0.51721,0.525605,0.5342,0.54313,0.562675,0.576645,0.594215,0.60393,0.5,0.630905,0.65948,0.47233,0.47917,0.48988,0.49874,0.508175,0.514765,0.53532,0.55357,0.57533,0.582715,0.79889,0.612545,0.643185,0.470005,0.480575,0.488995,0.49921,0.50703,0.52263,0.54634,0.570585,0.59186,0.60441,0.81893,0.61393,0.641255,
0.503375,0.51042,0.52392,0.530925,0.54287,0.550955,0.561375,0.58039,0.5956,0.6016,0.612115,0.825575,0.652075,0.5288,0.53774,0.546565,0.554605,0.567735,0.57619,0.58592,0.60227,0.61698,0.62597,0.633385,0.5,0.66968,0.502785,0.5123,0.522715,0.5332,0.54496,0.553,0.562875,0.58006,0.597695,0.603165,0.614205,0.826745,0.652545,0.50219,0.510345,0.522495,0.530705,0.54285,0.55645,0.568905,0.582585,0.598875,0.601545,0.61285,0.82543,0.65065,
0.539655,0.5459,0.555105,0.56646,0.57986,0.5874,0.595965,0.60824,0.62544,0.63387,0.64041,0.65218,0.85045,0.5641,0.57077,0.58235,0.58823,0.59975,0.60904,0.619615,0.62841,0.6443,0.65511,0.659595,0.6704,0.5,0.53768,0.548065,0.556895,0.56651,0.57861,0.587075,0.599545,0.60852,0.624705,0.63515,0.645385,0.6513,0.8506,0.540205,0.54634,0.554805,0.562425,0.577255,0.593245,0.601305,0.615245,0.640435,0.650345,0.666545,0.65006,0.85287,
0.500285,0.307535,0.316525,0.326115,0.34181,0.3414,0.365245,0.389575,0.414565,0.44253,0.469905,0.50109,0.53812,0.49968,0.3032,0.316985,0.324745,0.34111,0.344735,0.36666,0.389635,0.415295,0.443775,0.469765,0.5006,0.54006,0.5,0.346865,0.35334,0.361675,0.37855,0.37761,0.40261,0.42428,0.447685,0.473295,0.498655,0.530835,0.56263,0.49667,0.30772,0.31513,0.32652,0.34404,0.34314,0.3677,0.3984,0.42847,0.464045,0.495655,0.49995,0.533905,
0.309225,0.52986,0.334675,0.34636,0.3615,0.364405,0.37197,0.399015,0.42641,0.45184,0.4788,0.51023,0.545785,0.30589,0.53155,0.33683,0.34717,0.36005,0.360565,0.373465,0.398775,0.425215,0.45039,0.47791,0.51162,0.545615,0.3452,0.5,0.3714,0.382625,0.396045,0.396895,0.408935,0.4299,0.45675,0.476075,0.507235,0.535675,0.571555,0.3074,0.53589,0.33786,0.344945,0.36005,0.363155,0.375865,0.40522,0.439385,0.473785,0.50634,0.508805,0.547415,
0.31325,0.33614,0.56719,0.36651,0.380955,0.382195,0.39366,0.400765,0.432125,0.46056,0.487225,0.52099,0.554065,0.31735,0.336745,0.566275,0.365855,0.38128,0.38292,0.39247,0.4069,0.433535,0.45974,0.48869,0.52123,0.558135,0.356885,0.373265,0.5,0.40027,0.41543,0.41783,0.425925,0.437605,0.461395,0.490825,0.516275,0.54767,0.58044,0.31545,0.33553,0.56503,0.365285,0.38108,0.38355,0.39269,0.413905,0.44808,0.47821,0.51355,0.523355,0.55504,
0.325015,0.346775,0.364205,0.599055,0.39989,0.40357,0.41377,0.424025,0.442585,0.472165,0.49916,0.52998,0.5662,0.329335,0.347335,0.36429,0.600395,0.401285,0.40467,0.414075,0.42597,0.44036,0.469205,0.50183,0.531225,0.565165,0.362035,0.381175,0.399675,0.5,0.43345,0.43331,0.44263,0.456285,0.46811,0.498635,0.52662,0.55412,0.588895,0.330265,0.346065,0.36588,0.599385,0.399455,0.404655,0.41174,0.436745,0.458165,0.48829,0.524015,0.53076,0.56865,
0.34238,0.36197,0.38188,0.401715,0.62979,0.424185,0.43157,0.44394,0.463965,0.48151,0.508135,0.541845,0.577485,0.339175,0.36327,0.381635,0.400625,0.633855,0.42398,0.432705,0.443505,0.46411,0.478455,0.51328,0.542155,0.577985,0.377715,0.39527,0.41361,0.4345,0.5,0.452895,0.461705,0.47672,0.488045,0.50601,0.537525,0.566805,0.5987,0.33931,0.361055,0.3857,0.399115,0.63028,0.42602,0.434805,0.455585,0.47653,0.49707,0.535525,0.542405,0.575715,
0.34366,0.366155,0.382365,0.405385,0.42218,0.66051,0.452955,0.463615,0.480365,0.499365,0.519975,0.554815,0.586715,0.3435,0.36633,0.382235,0.401635,0.423865,0.66312,0.45018,0.46458,0.48351,0.496715,0.5184,0.554845,0.58738,0.38229,0.39915,0.41692,0.43515,0.454615,0.5,0.48096,0.490995,0.50745,0.52391,0.54135,0.574245,0.609625,0.340395,0.36403,0.382585,0.40576,0.42585,0.66741,0.45522,0.473825,0.495655,0.52039,0.544595,0.55162,0.588445,
0.36309,0.37185,0.391155,0.41085,0.43317,0.45055,0.69199,0.47984,0.49947,0.51823,0.53537,0.56044,0.59954,0.365565,0.3714,0.39538,0.415105,0.43212,0.45147,0.693345,0.48174,0.49904,0.514665,0.535985,0.561505,0.597665,0.398965,0.407575,0.424885,0.44192,0.462815,0.479645,0.5,0.50804,0.524105,0.54088,0.560645,0.58226,0.62012,0.365035,0.37343,0.39014,0.411385,0.432055,0.45401,0.699795,0.49448,0.517215,0.54094,0.566375,0.56055,0.5992,
0.389775,0.40218,0.40469,0.42339,0.44658,0.46233,0.48036,0.7233,0.51581,0.531785,0.5551,0.57644,0.6095,0.388505,0.39544,0.40687,0.423525,0.445745,0.46403,0.47933,0.720565,0.51635,0.534375,0.55301,0.580175,0.608205,0.4227,0.429335,0.43984,0.45619,0.476155,0.49178,0.5098,0.5,0.54065,0.556445,0.575025,0.60127,0.629525,0.389895,0.39807,0.405415,0.425495,0.446135,0.46674,0.489615,0.737505,0.5351,0.55838,0.580045,0.57869,0.609295,
0.416435,0.42259,0.43461,0.440185,0.459925,0.482805,0.495685,0.519855,0.75353,0.553415,0.57433,0.59945,0.6262,0.414215,0.424745,0.434295,0.43935,0.462445,0.482665,0.495945,0.517575,0.75232,0.55272,0.573685,0.596495,0.62776,0.448015,0.456335,0.46376,0.47248,0.48846,0.50713,0.52252,0.543005,0.5,0.57347,0.596715,0.618625,0.646065,0.417685,0.424195,0.43454,0.43932,0.460645,0.483915,0.50667,0.528715,0.76916,0.574985,0.595845,0.597835,0.62239,
0.44435,0.45242,0.46198,0.46916,0.48082,0.49707,0.51538,0.531225,0.55261,0.77762,0.57825,0.605245,0.63474,0.44153,0.4508,0.45951,0.47113,0.479365,0.498545,0.516065,0.53268,0.55528,0.77441,0.581285,0.60604,0.63416,0.47296,0.47827,0.488405,0.4984,0.508335,0.523285,0.540675,0.55689,0.577955,0.5,0.6051,0.626095,0.6528,0.44295,0.452245,0.46141,0.470725,0.477015,0.50278,0.52518,0.54643,0.5678,0.79497,0.61038,0.606975,0.63285,
0.46977,0.477905,0.48865,0.49866,0.51083,0.5164,0.538465,0.553875,0.574125,0.584015,0.79967,0.61099,0.641,0.47227,0.477205,0.48629,0.49689,0.50799,0.51866,0.53661,0.55503,0.57443,0.57821,0.797755,0.616205,0.64185,0.50148,0.507285,0.51638,0.520795,0.536185,0.54165,0.561195,0.57659,0.593535,0.60169,0.5,0.63273,0.660465,0.473105,0.48031,0.486855,0.498485,0.50742,0.52508,0.54744,0.56807,0.59327,0.60328,0.819895,0.612825,0.640215,
0.503825,0.51048,0.517845,0.53323,0.541475,0.554345,0.56037,0.581105,0.59631,0.604745,0.61434,0.82384,0.651115,0.504325,0.513005,0.52232,0.53196,0.544175,0.55089,0.56133,0.578415,0.598325,0.60565,0.61484,0.825195,0.650205,0.530355,0.539385,0.547075,0.554975,0.567395,0.57679,0.583535,0.600825,0.618755,0.62518,0.63125,0.5,0.67043,0.50376,0.516225,0.51903,0.533135,0.543145,0.55553,0.56735,0.5841,0.59505,0.603425,0.612625,0.824285,0.65233,
0.538545,0.547945,0.556655,0.56687,0.577165,0.590695,0.59891,0.609685,0.628505,0.635095,0.640575,0.65099,0.85331,0.538055,0.548375,0.556445,0.566615,0.577565,0.58759,0.59961,0.60735,0.627745,0.630085,0.642675,0.653845,0.850105,0.564205,0.574995,0.581655,0.589185,0.60129,0.610615,0.61759,0.62521,0.64733,0.649315,0.6594,0.669335,0.5,0.53963,0.545245,0.556845,0.56661,0.577295,0.590215,0.602305,0.61757,0.635955,0.650185,0.662925,0.649305,0.84966,
0.500165,0.307235,0.31651,0.326715,0.342325,0.343835,0.367535,0.388615,0.41529,0.442725,0.47048,0.5031,0.537335,0.499475,0.30751,0.31412,0.32647,0.34071,0.341445,0.365285,0.38934,0.41338,0.44131,0.47166,0.502895,0.53687,0.499115,0.30748,0.31476,0.32822,0.34145,0.344095,0.364885,0.388285,0.41747,0.44263,0.468315,0.50302,0.53834,0.5,0.34573,0.35284,0.364605,0.37742,0.38008,0.40299,0.42975,0.459505,0.4881,0.52125,0.53142,0.56291,
0.308895,0.531825,0.337805,0.345635,0.35981,0.36437,0.37259,0.40006,0.42601,0.451235,0.478765,0.510185,0.54441,0.305055,0.53445,0.336565,0.349345,0.361115,0.364355,0.37425,0.396675,0.425835,0.452265,0.478925,0.5113,0.547915,0.30499,0.53309,0.3345,0.34442,0.364175,0.365985,0.373205,0.401925,0.42444,0.449625,0.479355,0.51062,0.545265,0.342655,0.5,0.37014,0.38298,0.394475,0.39914,0.4081,0.43757,0.46605,0.493975,0.530175,0.538985,0.57032,
0.31617,0.33703,0.56543,0.367445,0.380295,0.38476,0.391925,0.40396,0.43414,0.458085,0.48607,0.52146,0.553805,0.317315,0.335775,0.56466,0.366555,0.381,0.38261,0.393145,0.406555,0.43478,0.460705,0.488365,0.52487,0.556935,0.315985,0.33345,0.567195,0.36646,0.383105,0.380085,0.393745,0.406705,0.43314,0.457225,0.487595,0.52346,0.55877,0.35124,0.3714,0.5,0.39823,0.41357,0.416365,0.42475,0.4443,0.47636,0.505395,0.538935,0.549315,0.582485,
0.326625,0.34802,0.365235,0.601445,0.39767,0.401525,0.411275,0.42458,0.44219,0.47043,0.49968,0.52873,0.56497,0.32525,0.346495,0.36534,0.59969,0.396865,0.401695,0.40954,0.423565,0.443295,0.46842,0.50002,0.534115,0.56586,0.326385,0.34882,0.36468,0.598405,0.402855,0.405385,0.4103,0.42683,0.44223,0.468725,0.497645,0.53268,0.56342,0.36542,0.383485,0.400875,0.5,0.429995,0.43464,0.4446,0.463735,0.481925,0.515735,0.5457,0.55325,0.589275,
0.34245,0.36182,0.38228,0.39932,0.63068,0.42561,0.431105,0.444795,0.463015,0.480065,0.510025,0.54158,0.57921,0.344515,0.36184,0.38175,0.398875,0.631175,0.423145,0.43105,0.44428,0.461865,0.47713,0.511495,0.5409,0.576275,0.34333,0.36138,0.378735,0.404195,0.631465,0.42261,0.43324,0.444975,0.461805,0.478265,0.510885,0.541185,0.577855,0.377765,0.39543,0.41354,0.431565,0.5,0.45321,0.463735,0.481045,0.505135,0.522325,0.55792,0.56701,0.60146,
0.346085,0.366495,0.386075,0.4029,0.421555,0.66781,0.453195,0.46764,0.48249,0.5018,0.52414,0.55903,0.590795,0.346365,0.36539,0.383545,0.405895,0.423355,0.666495,0.45301,0.467365,0.48522,0.502875,0.52152,0.561105,0.59281,0.34375,0.36199,0.38244,0.40625,0.42243,0.66883,0.45309,0.4658,0.48302,0.50131,0.522665,0.55655,0.593785,0.37882,0.398115,0.414855,0.437285,0.454905,0.5,0.48528,0.50794,0.52378,0.54899,0.568365,0.58239,0.609765,
0.36752,0.372225,0.392815,0.414865,0.43403,0.45339,0.70253,0.48992,0.50415,0.52532,0.548255,0.57633,0.607055,0.36812,0.374325,0.39369,0.41528,0.433965,0.4544,0.701015,0.487955,0.505305,0.522935,0.5456,0.573255,0.605725,0.366335,0.37423,0.39073,0.41488,0.434305,0.45617,0.700165,0.48863,0.50672,0.526025,0.54617,0.57173,0.603045,0.402075,0.408015,0.42804,0.44491,0.46428,0.48343,0.5,0.527895,0.547655,0.570805,0.595575,0.60026,0.62428,
0.39799,0.408165,0.413635,0.434945,0.45502,0.475515,0.4934,0.735505,0.529875,0.549475,0.5704,0.595035,0.612555,0.399295,0.40649,0.415065,0.4354,0.45366,0.47688,0.49219,0.73788,0.52961,0.548905,0.571545,0.595445,0.61293,0.400355,0.40725,0.41498,0.433375,0.45999,0.47512,0.493645,0.7361,0.52977,0.54858,0.570255,0.59553,0.612965,0.42884,0.438595,0.444055,0.465135,0.48222,0.505895,0.525055,0.5,0.569735,0.5926,0.61634,0.61697,0.63691,
0.42742,0.437215,0.448755,0.45645,0.47773,0.49495,0.519345,0.53392,0.770115,0.570655,0.592785,0.61893,0.628165,0.43086,0.44132,0.4496,0.455935,0.476775,0.495515,0.514595,0.534225,0.77074,0.57204,0.591295,0.62076,0.628985,0.42738,0.437225,0.44797,0.452785,0.477375,0.49638,0.51427,0.535585,0.76738,0.573055,0.592085,0.616585,0.62758,0.457435,0.467855,0.47722,0.482305,0.503195,0.526115,0.54792,0.56952,0.5,0.61063,0.635645,0.63704,0.65462,
0.46058,0.4725,0.48008,0.49192,0.500815,0.52028,0.538415,0.556735,0.57941,0.795335,0.601865,0.62544,0.635885,0.46015,0.473275,0.484145,0.489035,0.49532,0.518645,0.538435,0.55459,0.577185,0.793775,0.607165,0.632885,0.63133,0.4608,0.470675,0.482935,0.489835,0.499495,0.518885,0.537995,0.557595,0.57554,0.79589,0.60332,0.631055,0.63266,0.48901,0.494875,0.50507,0.515025,0.522905,0.54864,0.568995,0.590385,0.613295,0.5,0.647815,0.64773,0.66816,
0.49411,0.50385,0.51343,0.522555,0.53329,0.54325,0.56455,0.58222,0.60001,0.61196,0.822295,0.642545,0.6383,0.494495,0.50499,0.513645,0.52267,0.537145,0.54454,0.56267,0.583485,0.599645,0.6097,0.820335,0.64337,0.641735,0.49371,0.502515,0.513545,0.52239,0.538275,0.54511,0.56485,0.58363,0.600385,0.610415,0.820175,0.64285,0.64081,0.52201,0.529265,0.539355,0.544175,0.553365,0.57083,0.59376,0.615535,0.63325,0.648825,0.5,0.660015,0.68063,
0.531275,0.54116,0.551645,0.55889,0.570945,0.582085,0.592155,0.610365,0.630155,0.63659,0.64758,0.847115,0.65162,0.533605,0.540425,0.55004,0.557615,0.570275,0.583385,0.593405,0.610545,0.62826,0.639615,0.64954,0.849765,0.65281,0.53387,0.54011,0.55421,0.560365,0.57322,0.58118,0.590735,0.61425,0.62968,0.638685,0.64914,0.84835,0.64885,0.556325,0.567805,0.57084,0.58371,0.59074,0.605865,0.619415,0.63246,0.650395,0.65244,0.66552,0.5,0.670435,
0.537325,0.5438,0.555955,0.56351,0.57866,0.58824,0.59813,0.608285,0.62737,0.63181,0.64278,0.652985,0.849885,0.53551,0.543335,0.55467,0.569275,0.57657,0.58921,0.60061,0.608005,0.62646,0.633495,0.64161,0.65303,0.849645,0.538395,0.54705,0.560115,0.56628,0.57564,0.58725,0.59857,0.60524,0.62455,0.632345,0.641675,0.652245,0.851175,0.56405,0.57107,0.5805,0.58729,0.59743,0.61348,0.62504,0.634895,0.65482,0.66751,0.678535,0.66872,0.5,
0.333333,0.223098,0.234558,0.239458,0.24636,0.244232,0.256043,0.266953,0.283738,0.302485,0.322582,0.345707,0.373322,0.30034,0.182893,0.190913,0.19879,0.206133,0.201645,0.214542,0.228702,0.247078,0.259783,0.284208,0.309545,0.34075,0.30393,0.178465,0.188872,0.197788,0.205367,0.200747,0.214213,0.230102,0.244025,0.262712,0.283832,0.309937,0.339402,0.301317,0.18081,0.188693,0.19679,0.208537,0.199002,0.213717,0.232813,0.257217,0.282102,0.30965,0.30977,0.337442,
0.220625,0.333333,0.248888,0.257843,0.267383,0.260288,0.260202,0.27468,0.293375,0.310678,0.329907,0.35571,0.382538,0.176918,0.32902,0.206422,0.21781,0.226433,0.222013,0.222147,0.23703,0.255092,0.271328,0.291373,0.317282,0.34803,0.18047,0.332303,0.208542,0.21895,0.226617,0.224475,0.218495,0.236127,0.254093,0.26911,0.291952,0.316827,0.34865,0.17853,0.330528,0.208275,0.219133,0.227642,0.220472,0.218708,0.241205,0.26481,0.292052,0.318943,0.317323,0.34775,
0.233647,0.249192,0.333333,0.273665,0.28227,0.278502,0.280863,0.281812,0.298438,0.319032,0.335003,0.363475,0.392797,0.190785,0.208255,0.363555,0.23864,0.248795,0.241122,0.24059,0.24509,0.264288,0.281098,0.300355,0.328653,0.357187,0.189008,0.208143,0.360778,0.23818,0.245723,0.240785,0.241608,0.246203,0.265827,0.281605,0.299122,0.327232,0.357723,0.188538,0.205465,0.361527,0.233743,0.248022,0.239332,0.241008,0.250798,0.27284,0.300202,0.327817,0.328172,0.35831,
0.238282,0.259587,0.274365,0.333333,0.300835,0.296962,0.295323,0.302613,0.30704,0.32853,0.343912,0.37255,0.402227,0.19901,0.21765,0.236243,0.393593,0.26466,0.26248,0.261982,0.261947,0.270842,0.288988,0.30854,0.33695,0.36961,0.199413,0.221575,0.236007,0.398832,0.264307,0.263795,0.26043,0.266107,0.266745,0.289402,0.312645,0.33974,0.367998,0.199087,0.216383,0.236962,0.397517,0.263363,0.262812,0.2595,0.270325,0.280657,0.30837,0.33652,0.337633,0.369205,
0.246037,0.266802,0.285275,0.301408,0.333333,0.317193,0.317727,0.321142,0.327953,0.335717,0.356035,0.3821,0.412285,0.207723,0.22379,0.246232,0.264037,0.434012,0.281682,0.281732,0.282828,0.292947,0.298517,0.321913,0.346975,0.379655,0.205195,0.228067,0.247055,0.26535,0.430912,0.280578,0.281867,0.284178,0.290815,0.29871,0.319852,0.346545,0.382313,0.206893,0.22696,0.24825,0.266207,0.435855,0.279497,0.280557,0.29013,0.300707,0.315682,0.347547,0.345667,0.380898,
0.242962,0.261688,0.28183,0.296827,0.316667,0.333333,0.337612,0.338797,0.346325,0.352353,0.365442,0.391752,0.424247,0.200158,0.221497,0.243243,0.259075,0.286052,0.466577,0.303532,0.304318,0.316967,0.319158,0.329278,0.35875,0.393455,0.200837,0.222633,0.244362,0.260528,0.285832,0.467777,0.302008,0.3071,0.311665,0.321115,0.32831,0.360302,0.39258,0.20157,0.21881,0.241882,0.261495,0.280592,0.472925,0.30309,0.3118,0.32508,0.338105,0.357968,0.36118,0.39355,
0.255692,0.260158,0.279655,0.29946,0.317897,0.33537,0.333333,0.358103,0.369867,0.37339,0.385813,0.400302,0.435672,0.215407,0.219787,0.239795,0.259508,0.28203,0.303435,0.500842,0.328337,0.335337,0.343457,0.348975,0.368463,0.405835,0.21488,0.222247,0.242385,0.260915,0.277932,0.303828,0.49964,0.325178,0.336487,0.339028,0.34977,0.370942,0.405635,0.216655,0.218383,0.241065,0.260095,0.282655,0.3038,0.513452,0.332652,0.347967,0.365327,0.381663,0.369908,0.404528,
0.271155,0.27399,0.280535,0.30236,0.321812,0.338438,0.3591,0.333333,0.388567,0.393893,0.406463,0.423358,0.445342,0.228667,0.235835,0.245117,0.263848,0.287647,0.303583,0.329025,0.5402,0.3594,0.365102,0.372033,0.388897,0.41648,0.229218,0.237952,0.245502,0.265963,0.285407,0.304875,0.327685,0.540773,0.360807,0.364765,0.377837,0.39352,0.415258,0.227953,0.234057,0.244163,0.263293,0.285848,0.308933,0.331578,0.557633,0.372448,0.38277,0.403243,0.395927,0.41494,
0.285063,0.291325,0.300035,0.305107,0.324865,0.346817,0.366057,0.390463,0.333333,0.417535,0.43145,0.450218,0.469297,0.245593,0.25577,0.264578,0.269798,0.292855,0.312058,0.33339,0.356752,0.57946,0.39156,0.402282,0.419225,0.443623,0.244733,0.251693,0.262187,0.270717,0.28935,0.310987,0.332807,0.359048,0.579475,0.391743,0.400008,0.420007,0.444405,0.24338,0.253768,0.261458,0.27145,0.29258,0.31677,0.339088,0.367655,0.601307,0.412187,0.430085,0.420487,0.443997,
0.301972,0.308768,0.315053,0.327967,0.333267,0.35277,0.375053,0.394635,0.421963,0.333333,0.441097,0.45686,0.47748,0.262408,0.27118,0.280437,0.291267,0.29509,0.321147,0.339048,0.36401,0.390703,0.61422,0.410552,0.428708,0.453252,0.263528,0.271988,0.278348,0.28764,0.297508,0.322123,0.341872,0.364078,0.389798,0.615325,0.413165,0.427547,0.452978,0.263992,0.26852,0.27918,0.289525,0.299675,0.326093,0.34486,0.375805,0.408733,0.642717,0.443965,0.428855,0.45464,
0.322853,0.329167,0.336903,0.346898,0.357287,0.36385,0.383983,0.409182,0.42985,0.440005,0.333333,0.467512,0.49241,0.283247,0.291682,0.29765,0.311258,0.322993,0.329802,0.352223,0.375788,0.401285,0.413377,0.64952,0.44304,0.467133,0.282655,0.292013,0.301043,0.311127,0.322575,0.329912,0.351365,0.37742,0.400257,0.413197,0.64647,0.443247,0.465452,0.281552,0.292427,0.301758,0.312078,0.325802,0.336715,0.363457,0.385955,0.41866,0.435528,0.682985,0.443085,0.463992,
0.343125,0.353493,0.361517,0.37323,0.381818,0.3918,0.402553,0.42505,0.447732,0.457185,0.4696,0.333333,0.507247,0.306803,0.31761,0.326615,0.334352,0.34841,0.360235,0.371222,0.39548,0.41856,0.43157,0.440913,0.691943,0.48023,0.307278,0.317868,0.32538,0.337397,0.346053,0.361642,0.369133,0.394375,0.420622,0.434048,0.440633,0.690353,0.478855,0.306967,0.317033,0.326572,0.340502,0.352747,0.364378,0.376512,0.395632,0.419962,0.425643,0.440473,0.687928,0.478772,
0.376128,0.381945,0.393502,0.399983,0.412732,0.427002,0.432772,0.444892,0.471318,0.480852,0.491323,0.506972,0.333333,0.338533,0.347673,0.359288,0.368953,0.37533,0.393345,0.409108,0.41957,0.441025,0.453917,0.466225,0.482533,0.731073,0.338458,0.347392,0.357947,0.369128,0.38313,0.391673,0.407738,0.416912,0.4466,0.455798,0.46479,0.476753,0.731282,0.339947,0.34873,0.358935,0.37053,0.383947,0.392465,0.412618,0.42431,0.453905,0.471917,0.4912,0.481268,0.728892,
0.301528,0.183457,0.18923,0.198222,0.208505,0.200697,0.214365,0.228795,0.242705,0.262858,0.281883,0.30883,0.338202,0.333333,0.221173,0.234828,0.241652,0.248585,0.24233,0.251103,0.269112,0.281538,0.298708,0.320637,0.345588,0.373622,0.302447,0.183055,0.188317,0.199883,0.204643,0.201545,0.215147,0.22986,0.246645,0.263043,0.28284,0.307365,0.340683,0.300398,0.180975,0.18976,0.195833,0.203225,0.201842,0.213537,0.233262,0.255353,0.280352,0.307417,0.308845,0.34121,
0.181077,0.333473,0.2089,0.219358,0.227455,0.219258,0.220745,0.237522,0.251542,0.272923,0.290662,0.31876,0.34466,0.221953,0.333333,0.246673,0.25663,0.264967,0.258985,0.261858,0.274797,0.293698,0.309528,0.329947,0.352307,0.383585,0.179278,0.332355,0.209827,0.218107,0.225218,0.22285,0.220413,0.23602,0.253162,0.271337,0.291648,0.318717,0.349013,0.179445,0.329843,0.207173,0.216225,0.226623,0.219065,0.219285,0.241538,0.26631,0.288275,0.318762,0.319692,0.349253,
0.190422,0.210248,0.363365,0.236987,0.247733,0.242317,0.242585,0.243297,0.263963,0.278795,0.30166,0.325902,0.357417,0.229143,0.249298,0.333333,0.27632,0.28727,0.278483,0.278767,0.28139,0.301847,0.315343,0.336293,0.36058,0.391475,0.188445,0.209722,0.366263,0.236702,0.245135,0.240828,0.241497,0.244917,0.262538,0.27892,0.303085,0.327975,0.356405,0.190558,0.210943,0.363178,0.236992,0.245387,0.241453,0.240567,0.250685,0.276147,0.299047,0.327123,0.326628,0.356638,
0.198673,0.219057,0.234502,0.397753,0.265128,0.263823,0.260642,0.264122,0.270622,0.289862,0.308292,0.337367,0.368523,0.23952,0.259472,0.275408,0.333333,0.302225,0.296128,0.298668,0.300958,0.310262,0.325368,0.344215,0.371137,0.401943,0.197675,0.21842,0.237853,0.396207,0.263013,0.260635,0.261528,0.263628,0.269573,0.288568,0.309327,0.33541,0.37008,0.19831,0.217468,0.235723,0.399718,0.264582,0.259595,0.2589,0.268308,0.28151,0.309423,0.337677,0.335573,0.367782,
0.203705,0.227642,0.248565,0.266437,0.429465,0.282692,0.282918,0.284052,0.290205,0.29891,0.321543,0.34803,0.378468,0.248567,0.265225,0.282427,0.301652,0.333333,0.318353,0.315975,0.319885,0.32632,0.332482,0.35446,0.381437,0.411237,0.20474,0.228665,0.245698,0.266852,0.43168,0.282448,0.280513,0.28454,0.291688,0.29659,0.320813,0.351147,0.3802,0.208073,0.225915,0.247503,0.265797,0.435372,0.281183,0.281505,0.290278,0.304068,0.316018,0.347107,0.348365,0.380217,
0.201385,0.221418,0.244327,0.260888,0.281183,0.464843,0.303535,0.305072,0.311498,0.319052,0.32935,0.361312,0.39304,0.243512,0.262357,0.277002,0.296502,0.316488,0.333333,0.33864,0.340525,0.347648,0.352012,0.364077,0.395107,0.425725,0.202037,0.220842,0.241243,0.262682,0.279763,0.466775,0.303107,0.309172,0.311728,0.318518,0.328163,0.359898,0.392227,0.199897,0.224817,0.23957,0.262438,0.282375,0.47411,0.301162,0.311827,0.325387,0.340407,0.36031,0.36227,0.392495,
0.214468,0.221068,0.239353,0.261413,0.280867,0.301997,0.499818,0.325885,0.334653,0.341688,0.353092,0.36784,0.402528,0.256783,0.261055,0.280227,0.298623,0.318392,0.33419,0.333333,0.359202,0.366188,0.374735,0.38595,0.401398,0.434525,0.215162,0.220297,0.243725,0.264607,0.282418,0.30169,0.499177,0.326007,0.331175,0.340107,0.353965,0.369405,0.40407,0.213515,0.218673,0.239792,0.26167,0.282793,0.307262,0.51352,0.334925,0.348088,0.363468,0.382943,0.370033,0.402247,
0.22957,0.23716,0.240733,0.262528,0.283722,0.305155,0.326383,0.541492,0.358078,0.365435,0.376042,0.392423,0.415757,0.265888,0.276478,0.28237,0.302467,0.32056,0.340092,0.359847,0.333333,0.38769,0.395278,0.403902,0.423312,0.4462,0.229087,0.238258,0.243387,0.263168,0.28146,0.307078,0.326015,0.538737,0.356562,0.36424,0.3737,0.391467,0.417138,0.227778,0.23683,0.244125,0.265263,0.284117,0.30771,0.327095,0.557938,0.3725,0.386207,0.406307,0.3925,0.41461,
0.244958,0.252633,0.261758,0.271113,0.288603,0.311962,0.335297,0.357473,0.579702,0.391975,0.400812,0.419345,0.445068,0.283342,0.290155,0.301022,0.305888,0.327247,0.34847,0.368928,0.388798,0.333333,0.417973,0.429343,0.450497,0.471603,0.245277,0.253488,0.261758,0.269133,0.290005,0.311512,0.334928,0.353837,0.577377,0.390293,0.402268,0.418233,0.439783,0.244337,0.253718,0.262455,0.270325,0.29254,0.316305,0.339835,0.370603,0.600392,0.409857,0.430503,0.418188,0.443037,
0.264175,0.272528,0.281667,0.289635,0.297493,0.319422,0.341145,0.364048,0.389958,0.614398,0.416313,0.427715,0.455593,0.303347,0.308625,0.316133,0.324877,0.335287,0.352713,0.373125,0.396683,0.420992,0.333333,0.440098,0.457187,0.479707,0.262567,0.270623,0.277928,0.288627,0.297055,0.317578,0.343295,0.364793,0.390485,0.61346,0.410832,0.429013,0.452643,0.263675,0.269873,0.279832,0.29009,0.300022,0.32701,0.34662,0.373743,0.407577,0.646057,0.442632,0.42956,0.453653,
0.283947,0.292947,0.300218,0.308137,0.320822,0.331688,0.35009,0.374975,0.400805,0.41306,0.648927,0.441052,0.467247,0.320217,0.32749,0.336583,0.34785,0.353967,0.363583,0.385018,0.407512,0.431545,0.440455,0.333333,0.469107,0.492097,0.283507,0.292425,0.29997,0.311183,0.321005,0.328997,0.35057,0.376365,0.400855,0.412532,0.650568,0.445455,0.465295,0.284263,0.292388,0.300745,0.313822,0.327725,0.336167,0.360237,0.389663,0.419547,0.434878,0.685763,0.441785,0.464857,
0.309635,0.31735,0.326413,0.337423,0.348883,0.357075,0.366913,0.389495,0.419652,0.432408,0.442943,0.688917,0.478882,0.345412,0.3537,0.363163,0.371502,0.381103,0.394982,0.400075,0.423332,0.447175,0.457412,0.467567,0.333333,0.50582,0.309347,0.31564,0.327478,0.336655,0.348012,0.357488,0.369322,0.391288,0.418813,0.429292,0.44099,0.688787,0.478113,0.306398,0.316405,0.326813,0.339983,0.351397,0.365898,0.376495,0.397133,0.419495,0.429903,0.44314,0.689868,0.478882,
0.3407,0.347277,0.357133,0.367945,0.378157,0.392722,0.4022,0.41845,0.4411,0.453858,0.468072,0.480618,0.730393,0.373768,0.387493,0.39104,0.398617,0.415313,0.423667,0.43289,0.445953,0.469197,0.478673,0.489777,0.505313,0.333333,0.339615,0.349383,0.360027,0.372328,0.379495,0.39198,0.400668,0.414223,0.4424,0.45363,0.465792,0.482682,0.729837,0.340268,0.34764,0.353583,0.368863,0.382852,0.393357,0.409837,0.429375,0.456147,0.474818,0.492563,0.480682,0.730788,
0.30024,0.181177,0.189515,0.19887,0.206365,0.20246,0.213443,0.228762,0.245435,0.264832,0.282192,0.30897,0.340655,0.301047,0.181502,0.191642,0.199005,0.205252,0.201492,0.214473,0.22881,0.249427,0.263388,0.28332,0.310783,0.337652,0.333333,0.221357,0.229943,0.238812,0.247582,0.241257,0.255658,0.26861,0.283415,0.300257,0.321275,0.343452,0.3732,0.302998,0.180888,0.189828,0.197757,0.206912,0.201597,0.21294,0.235468,0.256782,0.279748,0.309547,0.305872,0.338373,
0.18105,0.329287,0.208793,0.218615,0.227862,0.220585,0.219955,0.237063,0.253042,0.271558,0.291153,0.315813,0.348013,0.178757,0.333033,0.209195,0.216573,0.226518,0.221052,0.219137,0.238607,0.255257,0.271922,0.292362,0.317993,0.350702,0.224348,0.333333,0.248617,0.258017,0.26618,0.260198,0.257182,0.27547,0.291813,0.309047,0.330583,0.351595,0.380847,0.179805,0.33304,0.208498,0.218708,0.227128,0.220898,0.218922,0.242588,0.265992,0.290587,0.316615,0.31639,0.350622,
0.190472,0.207467,0.36183,0.235737,0.24882,0.240482,0.240152,0.243082,0.263537,0.280388,0.300142,0.325705,0.35613,0.192508,0.20949,0.362288,0.236203,0.245473,0.241777,0.240182,0.24487,0.262227,0.280045,0.30067,0.327982,0.356255,0.231355,0.248523,0.333333,0.275298,0.285235,0.280358,0.279452,0.283838,0.300237,0.316563,0.337377,0.360597,0.39504,0.188153,0.20955,0.363218,0.23863,0.245143,0.2427,0.240468,0.247818,0.271912,0.297308,0.325572,0.325275,0.35642,
0.197623,0.21712,0.235913,0.398302,0.263848,0.26186,0.261372,0.26441,0.270547,0.289145,0.309715,0.336702,0.368165,0.200475,0.218998,0.236638,0.396027,0.266835,0.261343,0.260952,0.263022,0.271052,0.291128,0.307012,0.336467,0.368717,0.239992,0.257208,0.274488,0.333333,0.302493,0.30132,0.297848,0.301038,0.304845,0.325155,0.347622,0.373392,0.400157,0.199807,0.21752,0.237468,0.397518,0.265358,0.26171,0.260008,0.268838,0.280803,0.308673,0.338253,0.335227,0.36757,
0.206107,0.22815,0.246485,0.266952,0.430628,0.282683,0.281868,0.285877,0.290932,0.298098,0.321788,0.349105,0.381127,0.206558,0.227537,0.247143,0.267793,0.432545,0.282267,0.282975,0.284578,0.290588,0.298942,0.321915,0.348305,0.37977,0.247413,0.267167,0.285288,0.302908,0.333333,0.315825,0.315302,0.318915,0.327323,0.331283,0.354623,0.379152,0.4102,0.206187,0.223408,0.247332,0.267023,0.43567,0.279927,0.282405,0.290355,0.303193,0.316828,0.347935,0.347935,0.379385,
0.200967,0.223182,0.241993,0.26196,0.280408,0.466898,0.302115,0.305565,0.314492,0.320625,0.330147,0.359422,0.388997,0.200212,0.222697,0.23998,0.260665,0.282147,0.466033,0.304947,0.304672,0.309478,0.319925,0.331433,0.35952,0.392825,0.243825,0.260583,0.279292,0.299088,0.315773,0.333333,0.339097,0.339567,0.346618,0.35309,0.365442,0.390968,0.428942,0.200742,0.223553,0.242005,0.260197,0.280842,0.470327,0.304897,0.313718,0.326303,0.33951,0.35853,0.35834,0.392597,
0.214828,0.220373,0.24192,0.261925,0.284355,0.302155,0.49897,0.324225,0.333045,0.33862,0.351533,0.368935,0.403987,0.214713,0.220693,0.239368,0.261897,0.282008,0.30436,0.50156,0.329607,0.333823,0.34006,0.35081,0.371067,0.404553,0.255823,0.259378,0.28037,0.298705,0.316092,0.337298,0.333333,0.361292,0.366083,0.372978,0.383828,0.401303,0.43188,0.215657,0.219105,0.239533,0.262368,0.28165,0.303073,0.513938,0.335517,0.348492,0.362458,0.381277,0.367133,0.403847,
0.228743,0.23733,0.243175,0.263182,0.285055,0.305735,0.327478,0.539748,0.355968,0.36385,0.37646,0.393735,0.416162,0.228448,0.239402,0.245833,0.26526,0.283328,0.308542,0.324828,0.54311,0.355122,0.365002,0.375635,0.394167,0.413838,0.270098,0.272482,0.283558,0.300092,0.320695,0.339852,0.36202,0.333333,0.38726,0.393015,0.409245,0.422455,0.447528,0.227142,0.23681,0.24765,0.26612,0.285765,0.309438,0.332988,0.555712,0.369713,0.384387,0.400955,0.392102,0.417063,
0.244253,0.25477,0.262248,0.271758,0.29095,0.311245,0.337347,0.35537,0.580703,0.392483,0.400323,0.419375,0.443497,0.246857,0.253483,0.262392,0.266217,0.290972,0.312242,0.33519,0.358415,0.578038,0.390317,0.402022,0.420125,0.44391,0.28537,0.292523,0.300195,0.305343,0.327015,0.347565,0.368567,0.387662,0.333333,0.42116,0.428833,0.445773,0.47269,0.247028,0.253813,0.263932,0.269545,0.295365,0.313783,0.337398,0.367687,0.601173,0.410492,0.432422,0.416875,0.441928,
0.260328,0.270627,0.278645,0.290933,0.297387,0.319705,0.338533,0.362832,0.390318,0.614513,0.411365,0.43023,0.454007,0.261508,0.272543,0.280668,0.290762,0.297688,0.319832,0.340927,0.365263,0.393542,0.610513,0.414053,0.43005,0.454365,0.304598,0.310323,0.315907,0.32433,0.331958,0.350998,0.372502,0.394725,0.421603,0.333333,0.440635,0.4578,0.478802,0.262117,0.269677,0.280908,0.290812,0.297705,0.32564,0.346557,0.375833,0.403595,0.642583,0.443945,0.430185,0.451608,
0.280367,0.290747,0.301743,0.3119,0.321972,0.329677,0.35161,0.37593,0.402222,0.412185,0.6526,0.443707,0.466718,0.282052,0.289542,0.301412,0.311375,0.3208,0.328012,0.351185,0.375882,0.40173,0.41136,0.647623,0.444095,0.464792,0.319055,0.328613,0.336935,0.347135,0.351547,0.363498,0.382577,0.401482,0.4316,0.440995,0.333333,0.467315,0.490227,0.281352,0.290003,0.303643,0.310107,0.324322,0.336378,0.358128,0.388058,0.418858,0.435337,0.683972,0.441038,0.466253,
0.309007,0.318318,0.325218,0.339432,0.347765,0.360932,0.369272,0.39393,0.417562,0.429895,0.441392,0.68608,0.48132,0.31074,0.319368,0.327503,0.336597,0.346808,0.359982,0.368492,0.393357,0.419263,0.430817,0.442473,0.68819,0.480233,0.345742,0.350187,0.361982,0.373222,0.383117,0.392973,0.400808,0.425955,0.444897,0.462293,0.46592,0.333333,0.504875,0.307873,0.316177,0.326302,0.338797,0.349985,0.366232,0.377683,0.395462,0.418783,0.428123,0.440598,0.691383,0.480747,
0.337662,0.348565,0.357728,0.367698,0.382438,0.39167,0.402143,0.416108,0.442498,0.45431,0.467945,0.480725,0.731845,0.340798,0.346542,0.356575,0.368248,0.380607,0.39343,0.405732,0.41714,0.440143,0.454125,0.465043,0.480937,0.72979,0.373363,0.382387,0.391408,0.403738,0.412758,0.42612,0.435305,0.447067,0.47092,0.481805,0.491613,0.504638,0.333333,0.337808,0.348355,0.358128,0.370677,0.380447,0.394893,0.41222,0.423848,0.456158,0.472708,0.491902,0.480823,0.729928,
0.300038,0.181968,0.19175,0.199272,0.2066,0.201287,0.216285,0.230807,0.242538,0.263168,0.284233,0.308512,0.341273,0.299692,0.181843,0.18946,0.198427,0.206752,0.203007,0.2126,0.228043,0.245498,0.263943,0.282217,0.308055,0.338763,0.29956,0.182202,0.19129,0.198195,0.20783,0.199365,0.213432,0.22912,0.2442,0.264215,0.28118,0.308628,0.34092,0.333333,0.221308,0.230105,0.23659,0.24279,0.240552,0.253427,0.273222,0.295442,0.317077,0.345098,0.343197,0.374425,
0.18284,0.329838,0.209285,0.217987,0.22771,0.219033,0.220897,0.236302,0.255337,0.271542,0.291968,0.317097,0.350633,0.1791,0.335308,0.208803,0.217267,0.227063,0.221903,0.21828,0.23768,0.25067,0.270007,0.28833,0.316258,0.348012,0.181585,0.33325,0.207782,0.219108,0.227202,0.221337,0.218725,0.23636,0.254027,0.268645,0.290817,0.317688,0.34852,0.22609,0.333333,0.248845,0.25539,0.265795,0.259213,0.259472,0.281793,0.300605,0.32416,0.35199,0.35335,0.382565,
0.190143,0.21016,0.362818,0.235252,0.249783,0.243248,0.23992,0.245517,0.261872,0.278942,0.299168,0.328385,0.357517,0.189513,0.209083,0.363363,0.237037,0.243718,0.241788,0.242822,0.241733,0.263397,0.280817,0.300387,0.32708,0.357032,0.188073,0.208983,0.36263,0.235587,0.247358,0.242113,0.2401,0.244907,0.26016,0.280723,0.299385,0.327977,0.355403,0.230537,0.24916,0.333333,0.275513,0.283307,0.278972,0.274702,0.286007,0.310063,0.333863,0.35874,0.360898,0.390922,
0.197237,0.216723,0.237257,0.397627,0.264818,0.261912,0.259858,0.265197,0.273793,0.290855,0.3113,0.338137,0.371195,0.196602,0.21876,0.234572,0.395148,0.268022,0.264517,0.261675,0.26477,0.270403,0.289897,0.31455,0.339845,0.370437,0.198645,0.218458,0.236175,0.398102,0.264488,0.259702,0.262863,0.266333,0.270937,0.290938,0.31451,0.338423,0.371363,0.237972,0.25411,0.274763,0.333333,0.30218,0.297667,0.299473,0.305373,0.320528,0.343098,0.368903,0.373213,0.40356,
0.209082,0.225957,0.248662,0.268287,0.4359,0.282423,0.281405,0.287342,0.294792,0.304728,0.324793,0.3523,0.387422,0.203838,0.224467,0.247282,0.264628,0.436033,0.282807,0.280542,0.284758,0.2952,0.297992,0.324655,0.351812,0.385322,0.206598,0.227182,0.249007,0.265078,0.435888,0.281843,0.280872,0.285008,0.295455,0.300097,0.324573,0.353468,0.385838,0.24487,0.26575,0.283658,0.302018,0.333333,0.317313,0.317788,0.326138,0.338633,0.35508,0.38169,0.388103,0.415972,
0.200613,0.21813,0.240907,0.261647,0.284087,0.47162,0.304928,0.307678,0.316968,0.322652,0.338832,0.367363,0.400027,0.201782,0.220667,0.240488,0.261503,0.281165,0.473833,0.3062,0.306857,0.31617,0.32024,0.338668,0.367147,0.403428,0.200277,0.21998,0.241907,0.25883,0.2834,0.470565,0.303322,0.309128,0.312985,0.322197,0.335125,0.364878,0.399835,0.240343,0.258545,0.281218,0.298513,0.315605,0.333333,0.336162,0.347952,0.36097,0.376907,0.392005,0.398998,0.4275,
0.212767,0.218978,0.237748,0.259503,0.280513,0.302517,0.514192,0.32989,0.338247,0.348382,0.35863,0.378997,0.415,0.21367,0.218862,0.240697,0.259275,0.279148,0.302132,0.512592,0.330313,0.337963,0.348317,0.36097,0.382157,0.413308,0.21365,0.22093,0.239277,0.260657,0.281478,0.302252,0.51465,0.329012,0.339913,0.350467,0.35973,0.378895,0.412133,0.252382,0.257073,0.277152,0.300898,0.319408,0.339662,0.333333,0.36872,0.382303,0.402485,0.421393,0.409875,0.437273,
0.234092,0.243613,0.249383,0.268882,0.293208,0.312417,0.331192,0.557632,0.365172,0.377733,0.387603,0.40794,0.421423,0.233587,0.241748,0.249807,0.268027,0.289292,0.311652,0.335125,0.559685,0.365897,0.378645,0.390805,0.40788,0.421937,0.234493,0.242218,0.249905,0.269197,0.290252,0.313972,0.333542,0.556698,0.367702,0.376082,0.390275,0.409732,0.422677,0.271267,0.279393,0.28595,0.306137,0.327385,0.347248,0.369632,0.333333,0.40936,0.42398,0.444523,0.43962,0.454568,
0.255858,0.264385,0.275577,0.280997,0.303215,0.32452,0.348433,0.371223,0.601202,0.408628,0.423435,0.439428,0.442503,0.257052,0.265738,0.273428,0.283127,0.304842,0.3266,0.348692,0.374687,0.601033,0.406117,0.419558,0.439452,0.443023,0.25529,0.264927,0.275512,0.280525,0.302285,0.324668,0.349628,0.370978,0.60117,0.408598,0.42174,0.439258,0.444133,0.293408,0.299407,0.309662,0.315668,0.337833,0.361743,0.384033,0.412403,0.333333,0.454718,0.469463,0.465493,0.482212,
0.281775,0.2919,0.299217,0.308405,0.316807,0.338098,0.363812,0.386307,0.413665,0.64192,0.436928,0.458868,0.452887,0.281863,0.291,0.296812,0.310828,0.316933,0.340408,0.362715,0.388287,0.412,0.642872,0.437233,0.457137,0.453797,0.282692,0.288997,0.29766,0.309225,0.319782,0.338712,0.360068,0.38799,0.413648,0.642017,0.439748,0.454968,0.453032,0.315962,0.326067,0.33135,0.342463,0.352558,0.37616,0.398363,0.42723,0.45347,0.333333,0.488937,0.484523,0.498177,
0.309062,0.31639,0.326897,0.333608,0.347827,0.355992,0.380975,0.405213,0.429703,0.442907,0.680037,0.475288,0.466312,0.307578,0.318085,0.325475,0.33585,0.345762,0.360663,0.381007,0.406565,0.430425,0.444633,0.684533,0.478145,0.4635,0.30816,0.318313,0.326365,0.335523,0.345633,0.356332,0.380652,0.405005,0.429432,0.44239,0.683263,0.476033,0.463273,0.340407,0.352232,0.358355,0.371013,0.380722,0.393537,0.419242,0.441947,0.470145,0.491282,0.333333,0.500343,0.515533,
0.342895,0.349508,0.361008,0.369647,0.385048,0.393152,0.404075,0.433128,0.456605,0.466905,0.479258,0.729392,0.476722,0.339627,0.347485,0.359847,0.36873,0.383628,0.394378,0.407145,0.432375,0.456988,0.46792,0.481602,0.728692,0.479173,0.34124,0.351492,0.35896,0.369023,0.382498,0.395098,0.404333,0.434137,0.455493,0.469145,0.484108,0.725697,0.480313,0.375075,0.381402,0.38768,0.401878,0.416965,0.429025,0.441903,0.463785,0.482615,0.49185,0.506027,0.333333,0.502552,
0.338115,0.34948,0.357898,0.368497,0.380612,0.388727,0.401975,0.418703,0.442627,0.45436,0.465772,0.480415,0.729457,0.338612,0.34958,0.354497,0.369242,0.37859,0.391845,0.40524,0.416915,0.444058,0.457275,0.466972,0.478028,0.728423,0.338,0.347978,0.356898,0.365775,0.380275,0.393252,0.406355,0.415955,0.443277,0.451753,0.466048,0.47819,0.732718,0.375813,0.383692,0.391373,0.401698,0.414378,0.427988,0.439222,0.45492,0.48245,0.500575,0.516648,0.505137,0.333333,
0.25,0.165799,0.174066,0.179537,0.187154,0.180043,0.189337,0.199407,0.214538,0.22518,0.239649,0.258817,0.281425,0.219008,0.124508,0.131343,0.138444,0.143398,0.139995,0.14741,0.158302,0.170587,0.181879,0.198162,0.216521,0.241468,0.217539,0.123673,0.130596,0.137494,0.146283,0.137145,0.14749,0.157609,0.173358,0.180773,0.197987,0.217802,0.239491,0.21721,0.126525,0.131174,0.136137,0.144093,0.137241,0.14488,0.161745,0.178724,0.195563,0.219732,0.218266,0.240824,
0.164588,0.25,0.18792,0.195562,0.204388,0.198263,0.193543,0.206441,0.219495,0.233486,0.246552,0.265692,0.290932,0.123974,0.236753,0.148604,0.156611,0.162558,0.155853,0.152824,0.165438,0.180416,0.190236,0.204555,0.224911,0.252622,0.123438,0.237386,0.146819,0.155835,0.164289,0.15688,0.151946,0.165166,0.17838,0.189315,0.206078,0.225236,0.250758,0.121583,0.236663,0.146471,0.153477,0.162268,0.153783,0.150078,0.167648,0.18681,0.203006,0.226938,0.222826,0.2478,
0.171591,0.187725,0.25,0.211528,0.218934,0.211638,0.212618,0.212015,0.227299,0.237244,0.252196,0.272503,0.298762,0.132309,0.147583,0.258455,0.171958,0.182798,0.173513,0.169755,0.170459,0.18605,0.197528,0.214121,0.232867,0.257632,0.131413,0.147623,0.260078,0.172741,0.181443,0.173316,0.170726,0.170243,0.185942,0.197473,0.212687,0.232529,0.25699,0.131958,0.146303,0.261261,0.171102,0.178511,0.174585,0.167522,0.17489,0.192078,0.211749,0.233802,0.234543,0.257292,
0.178059,0.195398,0.21001,0.25,0.235997,0.231909,0.229259,0.227294,0.231607,0.245967,0.262012,0.277965,0.303719,0.138053,0.154572,0.173213,0.28474,0.197537,0.193482,0.191135,0.191274,0.192592,0.204047,0.221615,0.241149,0.268682,0.140508,0.154093,0.171816,0.287514,0.198547,0.189809,0.187594,0.188987,0.193892,0.207284,0.221029,0.239111,0.266783,0.138107,0.155998,0.170616,0.290081,0.196573,0.190389,0.190179,0.192124,0.197589,0.219692,0.243165,0.241799,0.266812,
0.185526,0.202843,0.220659,0.236057,0.25,0.247662,0.247279,0.248017,0.247242,0.252447,0.268219,0.287558,0.312737,0.143487,0.160836,0.182044,0.199614,0.314317,0.210248,0.20791,0.209532,0.209515,0.212917,0.231182,0.249502,0.276088,0.145709,0.162643,0.180657,0.198091,0.317411,0.211922,0.209923,0.208572,0.21036,0.210923,0.229883,0.251867,0.276889,0.144008,0.162165,0.180225,0.196548,0.318032,0.207739,0.207617,0.209222,0.220864,0.228917,0.25219,0.252862,0.277267,
0.181338,0.197384,0.215065,0.233565,0.248055,0.25,0.266127,0.264525,0.267643,0.268452,0.27613,0.299954,0.324307,0.139927,0.154839,0.17566,0.192747,0.209944,0.344498,0.22963,0.227198,0.232779,0.232047,0.238009,0.259336,0.290057,0.139871,0.15556,0.173868,0.194097,0.21127,0.344354,0.229118,0.230366,0.233091,0.234227,0.238406,0.262627,0.29199,0.140169,0.157813,0.173359,0.192531,0.211097,0.354352,0.226906,0.23444,0.243758,0.24903,0.263022,0.260504,0.290157,
0.191271,0.194552,0.211952,0.229234,0.245992,0.266831,0.25,0.285644,0.286438,0.289827,0.295745,0.306794,0.335339,0.14999,0.151111,0.170017,0.191218,0.209416,0.228545,0.376067,0.247441,0.255396,0.255163,0.26017,0.269626,0.298906,0.147135,0.152117,0.173014,0.191558,0.208126,0.228323,0.37946,0.249618,0.253692,0.253161,0.26023,0.269415,0.300066,0.149683,0.153124,0.171913,0.191699,0.21026,0.228625,0.384512,0.252397,0.264271,0.270962,0.28628,0.268758,0.297456,
0.200533,0.205682,0.212422,0.224473,0.245742,0.265229,0.28493,0.25,0.31169,0.312032,0.314862,0.327503,0.344414,0.157009,0.164757,0.170981,0.189194,0.206809,0.228857,0.250882,0.412804,0.276257,0.279059,0.283033,0.295268,0.311067,0.159718,0.165158,0.169521,0.190888,0.207761,0.229016,0.251484,0.416233,0.276227,0.27834,0.28441,0.294027,0.313057,0.159664,0.164272,0.169892,0.188319,0.210378,0.23113,0.248572,0.433328,0.285704,0.296067,0.308474,0.293743,0.311576,
0.212708,0.221338,0.226679,0.230957,0.24691,0.26784,0.287051,0.308176,0.25,0.339417,0.342718,0.357452,0.372541,0.172056,0.177268,0.185099,0.189912,0.212852,0.232956,0.252551,0.276242,0.453329,0.307769,0.309931,0.324292,0.338873,0.170068,0.178153,0.186795,0.191575,0.210377,0.231881,0.253798,0.275844,0.456288,0.306016,0.309132,0.324085,0.338642,0.170473,0.180873,0.185867,0.191459,0.209319,0.232772,0.25754,0.282887,0.484017,0.325787,0.338293,0.321332,0.338038,
0.223228,0.231072,0.242255,0.24558,0.250757,0.270487,0.290794,0.312674,0.338189,0.25,0.353751,0.365881,0.385899,0.183017,0.190593,0.198288,0.207066,0.212081,0.236467,0.253251,0.279193,0.308696,0.495238,0.321934,0.333867,0.352849,0.181472,0.191208,0.196993,0.2055,0.211831,0.233066,0.255669,0.278547,0.309462,0.489925,0.321402,0.33271,0.352459,0.18173,0.190573,0.199024,0.208867,0.215562,0.237384,0.257888,0.287976,0.319577,0.529278,0.349156,0.336034,0.354271,
0.240224,0.247412,0.253377,0.259252,0.270225,0.275883,0.294703,0.31698,0.343904,0.357353,0.25,0.379708,0.398043,0.19874,0.20614,0.212676,0.221498,0.230877,0.236036,0.260787,0.281902,0.312234,0.322232,0.534595,0.349706,0.365905,0.198768,0.205541,0.212962,0.22219,0.229222,0.237662,0.258626,0.284574,0.310897,0.321254,0.531497,0.348527,0.367905,0.197117,0.206304,0.212563,0.225677,0.233134,0.243669,0.266905,0.293542,0.325066,0.342967,0.578262,0.346936,0.365812,
0.26176,0.267528,0.273918,0.279725,0.287948,0.300225,0.309201,0.330327,0.355669,0.364641,0.377831,0.25,0.408828,0.218779,0.223687,0.232549,0.242255,0.249713,0.261954,0.269603,0.293923,0.32416,0.335288,0.348077,0.580468,0.383638,0.217437,0.223719,0.231683,0.239868,0.250897,0.261509,0.270324,0.294202,0.323352,0.336522,0.349692,0.579215,0.385919,0.217627,0.229495,0.236412,0.246159,0.255848,0.269038,0.277358,0.299406,0.322412,0.335632,0.349269,0.580364,0.381917,
0.281022,0.289967,0.29691,0.306212,0.312598,0.323203,0.332721,0.344738,0.372537,0.383366,0.397771,0.410929,0.25,0.242964,0.251509,0.257547,0.268009,0.276038,0.286796,0.297037,0.311404,0.340106,0.352517,0.363995,0.382802,0.635674,0.241562,0.251321,0.258776,0.265163,0.278197,0.288432,0.298775,0.312555,0.340547,0.353294,0.367047,0.384252,0.631359,0.241328,0.251097,0.256967,0.267207,0.280304,0.292525,0.304655,0.320466,0.35459,0.372032,0.394184,0.382484,0.634151,
0.216698,0.121553,0.13134,0.136935,0.144689,0.13878,0.150209,0.155173,0.170988,0.181698,0.197283,0.215696,0.243655,0.25,0.168594,0.171952,0.179426,0.184969,0.182648,0.188714,0.201592,0.211517,0.225467,0.240134,0.258758,0.282567,0.215758,0.124807,0.130824,0.136938,0.146017,0.14034,0.149973,0.159403,0.172606,0.18204,0.196247,0.21805,0.241302,0.216469,0.122986,0.132902,0.136893,0.143007,0.13739,0.146864,0.161322,0.178702,0.198416,0.217817,0.216775,0.241628,
0.123054,0.237867,0.147484,0.155221,0.162364,0.155538,0.152069,0.165362,0.178599,0.190839,0.203889,0.226947,0.247461,0.165194,0.25,0.187183,0.194934,0.203428,0.196226,0.195314,0.207447,0.218044,0.229267,0.245278,0.263174,0.28834,0.123221,0.238518,0.147051,0.154958,0.163424,0.15442,0.153157,0.166094,0.177189,0.189115,0.203947,0.223392,0.252362,0.122496,0.237209,0.147451,0.154746,0.161128,0.155189,0.152247,0.166737,0.184968,0.20456,0.227326,0.2246,0.250821,
0.131306,0.14458,0.261116,0.172914,0.179505,0.17432,0.169772,0.169218,0.18667,0.197907,0.214824,0.231575,0.257498,0.174007,0.188949,0.25,0.213606,0.222259,0.213038,0.211282,0.21043,0.226031,0.237878,0.255008,0.271085,0.294576,0.129123,0.144676,0.256877,0.172722,0.179605,0.175107,0.171534,0.170179,0.185845,0.19719,0.21364,0.232002,0.259075,0.130335,0.148226,0.25983,0.171083,0.179619,0.171444,0.165636,0.171552,0.193611,0.213964,0.233298,0.230017,0.256396,
0.13664,0.155641,0.170393,0.284601,0.197035,0.195016,0.190638,0.189607,0.18881,0.204306,0.218873,0.240382,0.264819,0.178534,0.194085,0.2123,0.25,0.235023,0.231296,0.229653,0.227448,0.232367,0.246057,0.261605,0.280389,0.304207,0.139421,0.154656,0.17283,0.286371,0.197882,0.194704,0.189902,0.187201,0.192427,0.206807,0.223711,0.241331,0.267412,0.138008,0.15534,0.170618,0.29122,0.196745,0.191929,0.186995,0.19198,0.202374,0.220133,0.242242,0.240723,0.266911,
0.144461,0.163015,0.181398,0.197926,0.316911,0.212417,0.208133,0.206789,0.209373,0.215797,0.227637,0.2504,0.276622,0.186154,0.201187,0.217924,0.237531,0.25,0.246787,0.247719,0.249234,0.248121,0.251042,0.268013,0.288296,0.314983,0.146306,0.162093,0.183568,0.199769,0.317419,0.210687,0.210084,0.208842,0.211019,0.211758,0.229838,0.251339,0.274668,0.143733,0.162496,0.180582,0.198745,0.318947,0.208904,0.206386,0.212973,0.222237,0.229627,0.250782,0.251672,0.274879,
0.138358,0.15547,0.173583,0.192147,0.208281,0.345392,0.227583,0.230787,0.231198,0.232934,0.238322,0.261456,0.290805,0.180013,0.197849,0.215317,0.233123,0.245592,0.25,0.26419,0.266437,0.266582,0.271996,0.278443,0.300402,0.324591,0.139779,0.157608,0.17534,0.193586,0.210438,0.345562,0.228717,0.228883,0.23205,0.232539,0.238087,0.25878,0.286009,0.138131,0.155643,0.174303,0.193751,0.210502,0.352564,0.225614,0.234107,0.243167,0.24966,0.262662,0.262654,0.288962,
0.148438,0.152832,0.171455,0.189033,0.209992,0.228028,0.378217,0.249854,0.255211,0.253329,0.260635,0.271947,0.301378,0.190613,0.194758,0.210427,0.227579,0.248802,0.265714,0.25,0.282879,0.28896,0.291118,0.296789,0.307984,0.336209,0.149688,0.15376,0.172243,0.190079,0.210029,0.229063,0.380899,0.250422,0.252042,0.253676,0.259697,0.27342,0.298743,0.150288,0.153618,0.170612,0.188673,0.208816,0.227005,0.387071,0.254744,0.266587,0.270959,0.288044,0.271765,0.300266,
0.159836,0.166936,0.171723,0.189643,0.211236,0.231939,0.248102,0.414776,0.27471,0.275983,0.281217,0.294264,0.307966,0.199347,0.205659,0.212973,0.226902,0.246376,0.265047,0.283321,0.25,0.308782,0.312532,0.31985,0.330001,0.347534,0.158623,0.166162,0.170354,0.19194,0.207917,0.227683,0.248237,0.414237,0.277294,0.280382,0.283996,0.294147,0.311214,0.158876,0.163684,0.170523,0.190303,0.210239,0.230604,0.25045,0.433189,0.289502,0.299288,0.308456,0.294597,0.311121,
0.171668,0.178145,0.186278,0.191826,0.208787,0.233946,0.252803,0.274887,0.454972,0.305367,0.312898,0.325428,0.339487,0.214685,0.216074,0.226881,0.231663,0.248274,0.270442,0.288281,0.30869,0.25,0.339027,0.342062,0.357171,0.371664,0.169412,0.177863,0.184412,0.192088,0.211617,0.233547,0.252541,0.278351,0.451221,0.30627,0.315145,0.322428,0.339827,0.171842,0.179943,0.18714,0.1922,0.210862,0.234267,0.255117,0.287412,0.483179,0.323418,0.335119,0.324549,0.339061,
0.184207,0.18966,0.196136,0.205215,0.212197,0.232653,0.256236,0.279231,0.305993,0.492911,0.322254,0.33602,0.349653,0.223893,0.229681,0.236547,0.245326,0.252086,0.270504,0.290348,0.311276,0.341707,0.25,0.354208,0.366327,0.381817,0.182153,0.193313,0.199364,0.206623,0.213062,0.233629,0.254007,0.274103,0.309464,0.491299,0.323191,0.333921,0.349247,0.18129,0.190478,0.200306,0.207102,0.216058,0.238354,0.258895,0.284869,0.320466,0.526714,0.350344,0.337212,0.352404,
0.195514,0.202096,0.21151,0.222334,0.227993,0.240165,0.259756,0.283298,0.311781,0.323123,0.531712,0.346807,0.368427,0.241381,0.24333,0.254569,0.257809,0.268822,0.273902,0.295367,0.316572,0.345157,0.357095,0.25,0.379683,0.395299,0.197819,0.205925,0.212621,0.220959,0.229117,0.236697,0.260097,0.280134,0.311997,0.32233,0.534935,0.349556,0.368748,0.199074,0.206112,0.215527,0.223821,0.236781,0.243495,0.268098,0.293472,0.323382,0.345497,0.577235,0.349722,0.365533,
0.216417,0.223895,0.230592,0.240353,0.250187,0.259737,0.270354,0.293613,0.321937,0.334701,0.347999,0.579572,0.38263,0.257966,0.264974,0.271978,0.280202,0.289961,0.297434,0.310042,0.328065,0.35553,0.366634,0.378107,0.25,0.410169,0.218724,0.226002,0.234469,0.242364,0.250322,0.262906,0.27357,0.293462,0.323496,0.336545,0.346089,0.583431,0.37997,0.217181,0.226794,0.236521,0.247177,0.257845,0.269187,0.279432,0.29874,0.322802,0.333005,0.342966,0.580807,0.382842,
0.239906,0.248968,0.259582,0.264242,0.277416,0.287428,0.299555,0.312125,0.341926,0.355008,0.366897,0.380877,0.6329,0.28419,0.289045,0.296942,0.302797,0.311945,0.326472,0.334106,0.348462,0.371458,0.382212,0.397211,0.411063,0.25,0.241563,0.249567,0.259613,0.26861,0.278352,0.287827,0.300117,0.311289,0.340197,0.3529,0.36761,0.385363,0.634683,0.242669,0.251202,0.258056,0.26935,0.276577,0.289542,0.303331,0.321755,0.351563,0.372097,0.394502,0.385376,0.633478,
0.215794,0.122424,0.131373,0.137469,0.144741,0.136609,0.147256,0.16001,0.171315,0.182166,0.200563,0.216247,0.243616,0.215432,0.123074,0.131703,0.139674,0.142682,0.141295,0.147845,0.156217,0.172084,0.18353,0.196773,0.21863,0.241983,0.25,0.164883,0.172852,0.180132,0.18542,0.181939,0.190456,0.201034,0.211887,0.225763,0.240476,0.257388,0.282117,0.214579,0.122617,0.131113,0.136795,0.145038,0.137581,0.145078,0.15961,0.180058,0.198983,0.22041,0.215502,0.241949,
0.124679,0.236138,0.146227,0.154218,0.163355,0.156105,0.156067,0.163738,0.178928,0.190919,0.203353,0.225387,0.248623,0.124485,0.236576,0.147449,0.155236,0.16316,0.153978,0.153855,0.165991,0.180629,0.189428,0.207402,0.224398,0.250512,0.167149,0.25,0.188099,0.19588,0.202234,0.196974,0.194439,0.206997,0.218977,0.229342,0.244557,0.264458,0.286771,0.124377,0.239087,0.146446,0.154956,0.159453,0.154414,0.151737,0.167154,0.18391,0.204464,0.225562,0.225148,0.249469,
0.130275,0.144823,0.258522,0.171888,0.180091,0.175657,0.170401,0.169473,0.182833,0.19838,0.213252,0.233043,0.256529,0.133358,0.145503,0.260773,0.173047,0.181171,0.174007,0.172713,0.169718,0.183261,0.197807,0.214094,0.232984,0.258937,0.176656,0.188285,0.25,0.21178,0.219215,0.215486,0.211105,0.208526,0.22485,0.236443,0.252763,0.271462,0.297174,0.130118,0.147627,0.262925,0.17191,0.178013,0.170936,0.169931,0.174088,0.195005,0.211303,0.233152,0.230818,0.257904,
0.138587,0.155166,0.17372,0.286805,0.197867,0.192563,0.188682,0.189779,0.191392,0.205618,0.220783,0.242136,0.267177,0.138526,0.156938,0.171063,0.285852,0.196501,0.194113,0.189867,0.188098,0.190911,0.205442,0.220871,0.240861,0.268902,0.179825,0.196697,0.212468,0.25,0.234663,0.233359,0.227342,0.2263,0.229321,0.246647,0.25959,0.278802,0.305611,0.140004,0.156343,0.171743,0.286395,0.196322,0.18913,0.189053,0.192071,0.199001,0.222234,0.244212,0.240304,0.267095,
0.145328,0.161968,0.180899,0.198645,0.314017,0.212443,0.210498,0.212632,0.210279,0.214271,0.228874,0.25066,0.275374,0.143641,0.162168,0.181035,0.198012,0.317235,0.211343,0.208647,0.208533,0.207921,0.212688,0.231084,0.249125,0.277052,0.185007,0.201167,0.22016,0.23732,0.25,0.248057,0.246438,0.246787,0.248577,0.250712,0.26551,0.290315,0.312108,0.144604,0.161806,0.180513,0.19724,0.319381,0.210272,0.20841,0.211528,0.217756,0.227509,0.251964,0.251534,0.274129,
0.139034,0.156818,0.176574,0.193928,0.211042,0.344871,0.229966,0.230762,0.232274,0.230836,0.238015,0.259917,0.289341,0.139073,0.157294,0.175989,0.194266,0.212682,0.344528,0.228766,0.227989,0.230384,0.232057,0.240218,0.26341,0.286312,0.182162,0.197673,0.211839,0.229194,0.245363,0.25,0.265897,0.266066,0.267292,0.271009,0.275227,0.298287,0.324899,0.136807,0.155895,0.172766,0.192449,0.213541,0.350215,0.228518,0.234906,0.240623,0.250354,0.261132,0.259402,0.289285,
0.149047,0.15189,0.171683,0.190356,0.209835,0.228114,0.376001,0.249746,0.252662,0.253443,0.260947,0.271363,0.299825,0.147981,0.156867,0.169767,0.189411,0.210326,0.228997,0.380304,0.251245,0.252768,0.254503,0.261308,0.27226,0.300945,0.189177,0.192859,0.210393,0.2271,0.248265,0.262472,0.25,0.284662,0.290476,0.289029,0.295617,0.306121,0.333629,0.147598,0.154023,0.16956,0.190498,0.207948,0.228998,0.386952,0.253546,0.263692,0.274833,0.289457,0.269681,0.299723,
0.157082,0.165838,0.169493,0.188612,0.209198,0.228194,0.248854,0.416442,0.279119,0.279719,0.283457,0.295287,0.311087,0.159184,0.166382,0.169755,0.188923,0.208987,0.229192,0.248332,0.413513,0.278014,0.278288,0.282224,0.294087,0.31547,0.201104,0.207668,0.211432,0.228198,0.246187,0.262354,0.283627,0.25,0.310707,0.31444,0.317947,0.327822,0.344792,0.157885,0.164726,0.171822,0.191273,0.209736,0.228783,0.250492,0.436236,0.287733,0.294533,0.308993,0.291982,0.311444,
0.17071,0.177622,0.186901,0.188978,0.211968,0.230012,0.25177,0.274982,0.452945,0.308806,0.311973,0.322629,0.34082,0.173241,0.176812,0.1868,0.189941,0.211455,0.23206,0.253112,0.278033,0.454188,0.306833,0.31353,0.321007,0.34187,0.211515,0.220313,0.227302,0.228564,0.247869,0.267658,0.286148,0.310616,0.25,0.339153,0.343758,0.354168,0.375067,0.171162,0.177139,0.185553,0.194334,0.214275,0.232432,0.255906,0.283582,0.483577,0.321302,0.336566,0.323132,0.340583,
0.18459,0.190807,0.196372,0.206235,0.215932,0.233312,0.255549,0.278693,0.308221,0.492343,0.325433,0.336414,0.349667,0.183438,0.191507,0.19891,0.206029,0.209878,0.234602,0.253522,0.277082,0.307617,0.492711,0.323102,0.332845,0.355086,0.223699,0.232016,0.239182,0.246379,0.250538,0.270496,0.292449,0.312927,0.338479,0.25,0.354377,0.366675,0.383773,0.182193,0.190265,0.198782,0.205858,0.214142,0.237202,0.257821,0.289425,0.320947,0.529619,0.349205,0.334226,0.352628,
0.199664,0.207165,0.21349,0.22173,0.229217,0.239936,0.260045,0.281309,0.315196,0.324607,0.530843,0.348848,0.36908,0.197175,0.206823,0.213786,0.218953,0.231997,0.237769,0.259419,0.283939,0.31139,0.324706,0.532935,0.348192,0.364415,0.241402,0.245558,0.252817,0.260279,0.270022,0.276932,0.294997,0.320507,0.34423,0.356957,0.25,0.379052,0.393427,0.196941,0.205569,0.214375,0.221129,0.231543,0.242335,0.265668,0.293308,0.326858,0.341506,0.573778,0.349947,0.36768,
0.215575,0.223531,0.232372,0.239518,0.25056,0.260935,0.270268,0.294212,0.323893,0.335466,0.349576,0.583023,0.384422,0.218334,0.224135,0.23261,0.242589,0.249593,0.260217,0.269145,0.29396,0.323957,0.334527,0.347823,0.582421,0.38461,0.256907,0.264347,0.27269,0.279573,0.288235,0.297696,0.307673,0.330064,0.355464,0.365958,0.374059,0.25,0.410621,0.218156,0.223176,0.235675,0.245032,0.255782,0.267765,0.278665,0.298328,0.324729,0.334525,0.347123,0.580537,0.382982,
0.242831,0.249609,0.256847,0.267329,0.274712,0.288616,0.301746,0.312305,0.341036,0.354764,0.367388,0.382765,0.633719,0.242433,0.249482,0.258367,0.266092,0.27551,0.288861,0.300407,0.311754,0.339549,0.351913,0.367864,0.384378,0.632077,0.282481,0.291151,0.297754,0.303089,0.312872,0.32355,0.335387,0.347816,0.370732,0.383383,0.397592,0.410726,0.25,0.241947,0.24914,0.258724,0.268722,0.277362,0.291532,0.304274,0.322592,0.352758,0.371057,0.395559,0.383147,0.632939,
0.216001,0.124443,0.131617,0.137881,0.145932,0.140521,0.147137,0.155978,0.171128,0.18356,0.196798,0.21861,0.243457,0.217671,0.122286,0.131133,0.1384,0.146608,0.135298,0.147709,0.160386,0.173453,0.184227,0.197158,0.218456,0.240215,0.216485,0.123682,0.130282,0.138172,0.144538,0.138028,0.148103,0.158637,0.170203,0.182493,0.197763,0.218627,0.240611,0.25,0.168156,0.170712,0.177833,0.182901,0.17808,0.186282,0.201784,0.220515,0.235179,0.258304,0.258266,0.283528,
0.12279,0.236039,0.14705,0.154671,0.164885,0.155428,0.154059,0.166508,0.178918,0.189539,0.205602,0.225597,0.250916,0.123223,0.236224,0.147995,0.155434,0.164851,0.155574,0.154306,0.165908,0.178773,0.189912,0.207049,0.226525,0.250725,0.124071,0.238458,0.146621,0.153978,0.162619,0.153638,0.15255,0.162746,0.178433,0.19193,0.207814,0.227989,0.253064,0.167001,0.25,0.185947,0.193335,0.20161,0.195144,0.191885,0.208498,0.225418,0.243847,0.267071,0.266412,0.289778,
0.13009,0.147203,0.262572,0.173027,0.181992,0.175243,0.170508,0.171761,0.185711,0.198624,0.215905,0.234107,0.263101,0.130887,0.148303,0.259787,0.173332,0.181987,0.174313,0.170879,0.169854,0.184265,0.196677,0.214785,0.236032,0.261834,0.130234,0.149497,0.261456,0.171424,0.179719,0.175688,0.172123,0.170572,0.186398,0.198803,0.213529,0.234622,0.261231,0.172005,0.187242,0.25,0.209821,0.217412,0.209859,0.210081,0.216479,0.234369,0.252198,0.276601,0.274328,0.296077,
0.136639,0.153795,0.171816,0.288829,0.197715,0.192962,0.191385,0.190846,0.193301,0.207747,0.225054,0.244373,0.272378,0.137498,0.15319,0.171606,0.28693,0.197515,0.195016,0.1883,0.188643,0.192411,0.208476,0.225665,0.244019,0.273501,0.13778,0.156498,0.170923,0.28629,0.1977,0.193123,0.19041,0.189968,0.193025,0.206529,0.22512,0.245115,0.272914,0.179291,0.194628,0.208889,0.25,0.234592,0.229539,0.226352,0.231755,0.238948,0.260281,0.28323,0.28191,0.305482,
0.142256,0.161436,0.181833,0.196341,0.319674,0.210881,0.208743,0.209662,0.210322,0.216933,0.236659,0.258324,0.285831,0.142473,0.163076,0.179127,0.196327,0.32115,0.211752,0.210446,0.211037,0.213822,0.216647,0.231813,0.25597,0.283021,0.143602,0.160063,0.179436,0.199995,0.316661,0.211153,0.210566,0.210649,0.213347,0.214627,0.234153,0.254973,0.286932,0.183669,0.200581,0.218548,0.232621,0.25,0.246107,0.241692,0.250626,0.256662,0.269184,0.290437,0.293685,0.3159,
0.137779,0.155511,0.173346,0.191977,0.210874,0.352454,0.228937,0.232479,0.235959,0.238147,0.244551,0.268387,0.296298,0.136344,0.153024,0.17264,0.194335,0.209087,0.351559,0.230515,0.231956,0.233777,0.2347,0.243488,0.267104,0.297718,0.13644,0.15419,0.170983,0.190438,0.210144,0.352579,0.227159,0.231914,0.234403,0.238792,0.241097,0.270776,0.297448,0.179683,0.194698,0.212284,0.230108,0.246942,0.25,0.263487,0.269515,0.280937,0.289837,0.303842,0.301485,0.328011,
0.146559,0.149831,0.170097,0.187748,0.207798,0.227911,0.387316,0.24945,0.254769,0.258925,0.266445,0.28008,0.307256,0.144018,0.150787,0.167823,0.187475,0.208359,0.227974,0.386359,0.249125,0.256682,0.258816,0.265055,0.279344,0.308637,0.146849,0.151884,0.17077,0.189135,0.208798,0.227442,0.386092,0.248617,0.259236,0.259076,0.267797,0.281541,0.308273,0.187597,0.192335,0.209727,0.227685,0.246707,0.263926,0.25,0.290006,0.300547,0.310997,0.325751,0.313489,0.335398,
0.162953,0.16818,0.171833,0.190433,0.214365,0.233614,0.254546,0.431513,0.284401,0.289327,0.291477,0.307672,0.315077,0.161928,0.168462,0.174835,0.191859,0.212086,0.23507,0.25446,0.434983,0.283882,0.287668,0.293443,0.308201,0.315277,0.160436,0.166793,0.173253,0.193256,0.211626,0.23403,0.253421,0.433218,0.284658,0.289877,0.294096,0.311493,0.313644,0.201438,0.209397,0.214053,0.230811,0.252316,0.270012,0.291401,0.25,0.326046,0.336632,0.351629,0.340718,0.35348,
0.180009,0.186614,0.194861,0.198474,0.220362,0.239247,0.265029,0.287587,0.482337,0.31893,0.325887,0.340752,0.338924,0.176965,0.187122,0.193838,0.200677,0.220549,0.241065,0.264647,0.287376,0.481455,0.321299,0.329218,0.341822,0.337449,0.177902,0.187347,0.193507,0.197962,0.217372,0.24037,0.262906,0.287233,0.482348,0.320294,0.32838,0.340262,0.340782,0.218714,0.226181,0.233752,0.240337,0.258799,0.279902,0.299394,0.327792,0.25,0.366842,0.383932,0.371929,0.383172,
0.19805,0.204044,0.2116,0.222496,0.227274,0.249406,0.273934,0.297467,0.324637,0.529698,0.344391,0.35975,0.351665,0.199452,0.206009,0.209478,0.219911,0.226754,0.249104,0.272929,0.299232,0.326586,0.527913,0.345952,0.362191,0.349386,0.197223,0.202785,0.212511,0.221985,0.228144,0.252366,0.273654,0.296524,0.326618,0.530125,0.346769,0.359595,0.347072,0.234847,0.245427,0.253897,0.260658,0.270152,0.288036,0.31035,0.338683,0.362342,0.25,0.394858,0.386993,0.399337,
0.219923,0.22637,0.233964,0.241725,0.252172,0.258554,0.284038,0.309339,0.340409,0.35186,0.577898,0.381972,0.361441,0.219728,0.228819,0.231265,0.239825,0.252344,0.263572,0.285894,0.310813,0.337742,0.353223,0.579181,0.384973,0.363036,0.21868,0.227782,0.235962,0.242415,0.254051,0.26357,0.286511,0.313012,0.337009,0.351964,0.574308,0.383781,0.365931,0.25561,0.266396,0.271446,0.281713,0.290873,0.302468,0.322521,0.355065,0.378348,0.400768,0.25,0.407546,0.419602,
0.244002,0.254335,0.263516,0.270199,0.280636,0.292585,0.304431,0.329297,0.358415,0.372918,0.38984,0.631014,0.379699,0.245647,0.254644,0.261837,0.270349,0.282193,0.292821,0.304127,0.329062,0.356572,0.370387,0.386882,0.635483,0.380408,0.246323,0.251358,0.259086,0.27252,0.278901,0.293991,0.303982,0.33084,0.358042,0.371726,0.388836,0.633184,0.376454,0.281892,0.290752,0.302232,0.311095,0.323455,0.336538,0.346627,0.363627,0.387822,0.397812,0.409481,0.25,0.408955,
0.243635,0.249858,0.257738,0.264115,0.276344,0.286224,0.300846,0.312236,0.338854,0.350487,0.362734,0.383467,0.631545,0.241206,0.247888,0.258028,0.265136,0.275585,0.289228,0.300565,0.31257,0.340125,0.35059,0.366032,0.381659,0.630776,0.239759,0.24882,0.255652,0.2666,0.277532,0.286141,0.300852,0.310297,0.33823,0.352057,0.366804,0.382738,0.630128,0.279192,0.290232,0.297398,0.305718,0.316692,0.327103,0.33733,0.352749,0.380602,0.400649,0.420676,0.411012,0.25,
0.2,0.135842,0.140317,0.145635,0.152407,0.144046,0.153879,0.163091,0.171698,0.182266,0.193861,0.208983,0.229297,0.177992,0.0935288,0.0980985,0.104198,0.109266,0.102894,0.109549,0.119846,0.131116,0.140494,0.15303,0.167294,0.186707,0.1748,0.0923823,0.0984937,0.106795,0.111052,0.104197,0.111212,0.119453,0.129883,0.137691,0.151324,0.164444,0.186104,0.174993,0.0922637,0.0977797,0.104312,0.108266,0.10144,0.107585,0.12159,0.133731,0.148773,0.169191,0.167849,0.186371,
0.133588,0.2,0.153244,0.160992,0.166491,0.158477,0.15588,0.166772,0.178378,0.186616,0.20024,0.214177,0.237355,0.094085,0.188679,0.111519,0.117653,0.127383,0.11838,0.114627,0.123083,0.136158,0.146247,0.156743,0.174704,0.193724,0.0930247,0.18903,0.110964,0.119188,0.125343,0.118536,0.113299,0.124955,0.135834,0.143833,0.156143,0.16974,0.192113,0.0933097,0.187253,0.111124,0.118691,0.122839,0.11693,0.113335,0.126568,0.141363,0.156372,0.174218,0.173999,0.191947,
0.139767,0.152596,0.2,0.172198,0.181639,0.175575,0.170765,0.171697,0.182297,0.193142,0.203488,0.220681,0.240337,0.0985275,0.111367,0.204116,0.13512,0.141207,0.134964,0.129512,0.129354,0.140396,0.150154,0.162094,0.17781,0.199794,0.0996485,0.113323,0.202883,0.132973,0.140505,0.134035,0.131064,0.127859,0.142612,0.15058,0.163097,0.176225,0.196033,0.0980953,0.113254,0.205431,0.133971,0.139476,0.131982,0.126568,0.12954,0.147739,0.161383,0.17997,0.178228,0.199372,
0.145879,0.160866,0.173626,0.2,0.194721,0.189539,0.186664,0.185142,0.188999,0.199017,0.209237,0.225296,0.244452,0.104932,0.118673,0.135033,0.221512,0.155484,0.153054,0.148396,0.142691,0.145237,0.157599,0.167969,0.183195,0.206909,0.104361,0.118995,0.134191,0.224243,0.157119,0.150515,0.148756,0.14416,0.1482,0.156481,0.168085,0.187758,0.204492,0.103477,0.119567,0.132885,0.224936,0.154463,0.147103,0.145495,0.147083,0.152649,0.170537,0.186485,0.184099,0.208122,
0.151749,0.164845,0.180296,0.195504,0.2,0.202861,0.20327,0.200703,0.204207,0.204114,0.216705,0.231219,0.256128,0.111943,0.12569,0.142402,0.155994,0.24413,0.167743,0.164539,0.162346,0.163866,0.164263,0.176968,0.193291,0.214289,0.112354,0.124606,0.14083,0.157596,0.245251,0.167729,0.16533,0.163418,0.164718,0.163284,0.177689,0.192017,0.21528,0.111439,0.126207,0.141258,0.1567,0.249344,0.16509,0.162286,0.165699,0.169675,0.176868,0.196261,0.194534,0.213351,
0.144932,0.159261,0.175758,0.189889,0.204351,0.2,0.217799,0.218085,0.221108,0.219982,0.221159,0.243851,0.264643,0.10443,0.118842,0.134164,0.150147,0.168636,0.26863,0.182099,0.182363,0.183414,0.182366,0.186622,0.201766,0.222644,0.10273,0.118116,0.134505,0.150469,0.165581,0.269558,0.183216,0.181705,0.183459,0.182984,0.185547,0.202643,0.223127,0.103077,0.121072,0.134294,0.151107,0.166615,0.273138,0.178755,0.183907,0.190459,0.193823,0.202686,0.204581,0.225407,
0.153357,0.156235,0.170712,0.187248,0.20288,0.21653,0.2,0.23374,0.239881,0.238885,0.239852,0.250413,0.274569,0.111536,0.113376,0.131874,0.146616,0.163972,0.1817,0.294929,0.199754,0.200973,0.200376,0.204815,0.210465,0.235389,0.110408,0.116183,0.132309,0.146881,0.164157,0.18251,0.294652,0.198625,0.200368,0.202212,0.205128,0.210553,0.233596,0.109415,0.115595,0.133124,0.149253,0.165113,0.182266,0.306906,0.202691,0.213453,0.215425,0.22819,0.211467,0.236306,
0.161497,0.166638,0.171152,0.185257,0.202317,0.220864,0.234738,0.2,0.260307,0.259429,0.26235,0.269317,0.285178,0.117374,0.124736,0.131668,0.145198,0.164783,0.181371,0.199363,0.328262,0.222872,0.221517,0.228442,0.230787,0.247264,0.11983,0.12453,0.12858,0.14579,0.1632,0.181174,0.199631,0.327093,0.226951,0.224014,0.227466,0.233247,0.247582,0.120908,0.124726,0.129798,0.146189,0.165247,0.181434,0.201249,0.348386,0.234771,0.240206,0.247948,0.232097,0.246131,
0.172645,0.176943,0.182928,0.188538,0.19973,0.219603,0.240281,0.258877,0.2,0.286514,0.286952,0.297201,0.310434,0.130288,0.135638,0.139508,0.146437,0.162236,0.183373,0.204972,0.223731,0.362542,0.25341,0.256167,0.264258,0.275994,0.13165,0.137615,0.141039,0.146383,0.164307,0.183984,0.202036,0.225229,0.367099,0.253298,0.2556,0.262553,0.274637,0.131605,0.136578,0.142592,0.147379,0.16574,0.186445,0.2073,0.231535,0.396074,0.26647,0.27531,0.261726,0.275942,
0.180634,0.186911,0.192376,0.198143,0.201211,0.219514,0.237033,0.260681,0.285661,0.2,0.298157,0.30639,0.322179,0.141283,0.144953,0.148985,0.157437,0.16252,0.183455,0.202563,0.226116,0.254226,0.39899,0.267353,0.274221,0.288727,0.139276,0.144302,0.150965,0.156632,0.162033,0.181848,0.203865,0.223377,0.252116,0.399373,0.266882,0.276733,0.287535,0.139842,0.145331,0.151356,0.157707,0.164025,0.185439,0.206665,0.23083,0.262851,0.439735,0.289964,0.273466,0.289289,
0.193475,0.198439,0.20486,0.211573,0.217751,0.222315,0.241402,0.261092,0.286341,0.301018,0.2,0.317541,0.335355,0.151475,0.157843,0.160624,0.170851,0.176391,0.184622,0.204271,0.224973,0.254214,0.269442,0.443688,0.286598,0.302046,0.150914,0.157022,0.16272,0.170383,0.178977,0.184724,0.204436,0.226383,0.254377,0.265739,0.443448,0.289505,0.302369,0.15307,0.156914,0.164068,0.173225,0.182002,0.189027,0.210146,0.234576,0.26791,0.282807,0.491477,0.28605,0.3014,
0.208827,0.213475,0.21845,0.226485,0.234333,0.241826,0.248297,0.271495,0.294783,0.307886,0.319978,0.2,0.352225,0.165643,0.173763,0.177337,0.184838,0.192944,0.203306,0.211885,0.232522,0.261489,0.272452,0.289456,0.495641,0.318218,0.164705,0.171245,0.177999,0.184456,0.193807,0.202228,0.210094,0.233961,0.264616,0.272337,0.288782,0.491126,0.321556,0.169467,0.174779,0.183893,0.191842,0.1994,0.211972,0.221188,0.237439,0.26159,0.274529,0.285224,0.493964,0.321064,
0.227706,0.235616,0.238461,0.246875,0.253509,0.264112,0.27528,0.285056,0.311378,0.323003,0.333721,0.349179,0.2,0.18672,0.191395,0.198269,0.206918,0.215631,0.224843,0.233452,0.246009,0.275495,0.289741,0.302504,0.320074,0.5489,0.18585,0.193295,0.198836,0.205078,0.214827,0.222173,0.236625,0.247311,0.276024,0.289263,0.300206,0.31814,0.548277,0.188006,0.193983,0.20037,0.210438,0.218275,0.22683,0.239613,0.256186,0.285894,0.303177,0.328688,0.319934,0.551202,
0.176813,0.0932377,0.0999407,0.106289,0.110022,0.103878,0.113487,0.118204,0.132112,0.139093,0.151385,0.167017,0.187217,0.2,0.133795,0.144275,0.146673,0.152077,0.147124,0.152527,0.159646,0.173326,0.179856,0.195533,0.208956,0.229821,0.17712,0.0930898,0.0998787,0.105086,0.109286,0.103578,0.109645,0.118935,0.128718,0.139713,0.152196,0.166487,0.185872,0.17651,0.0915632,0.0982648,0.102751,0.107753,0.0999628,0.108206,0.119802,0.134772,0.150426,0.167776,0.164898,0.187237,
0.0934215,0.188507,0.112656,0.119337,0.126666,0.117903,0.114227,0.124793,0.135512,0.147281,0.156026,0.173535,0.193263,0.135295,0.2,0.15411,0.159284,0.166283,0.159984,0.1578,0.16622,0.176777,0.187629,0.199283,0.214417,0.235799,0.093628,0.188586,0.112953,0.121552,0.123763,0.118715,0.113885,0.122915,0.134719,0.144765,0.156116,0.173691,0.190368,0.0928497,0.191208,0.112349,0.116158,0.123512,0.115743,0.113965,0.125642,0.14217,0.155104,0.173468,0.173819,0.190948,
0.0985722,0.112882,0.204248,0.133788,0.143052,0.137355,0.130377,0.130203,0.138932,0.150296,0.161941,0.177126,0.19952,0.14203,0.153681,0.2,0.173602,0.179302,0.17512,0.17213,0.168728,0.184674,0.19167,0.20533,0.220584,0.242711,0.0976783,0.113836,0.203146,0.133956,0.143423,0.13425,0.133614,0.128305,0.140916,0.150309,0.162708,0.178557,0.197978,0.100694,0.112662,0.206684,0.132953,0.141483,0.131938,0.129476,0.130679,0.147829,0.162659,0.178863,0.176543,0.199415,
0.10404,0.1187,0.133593,0.221827,0.154031,0.151644,0.148388,0.146505,0.14619,0.156449,0.170093,0.184506,0.207911,0.147832,0.160708,0.172981,0.2,0.192819,0.188732,0.187081,0.184181,0.184481,0.198897,0.210542,0.224938,0.247474,0.103538,0.120112,0.135118,0.223462,0.154393,0.152544,0.14721,0.143954,0.145339,0.157465,0.170062,0.186014,0.206722,0.103694,0.118417,0.132987,0.226708,0.1559,0.150677,0.144732,0.147698,0.152609,0.169749,0.186968,0.185603,0.207419,
0.109955,0.126361,0.14037,0.157106,0.244222,0.167682,0.165255,0.165453,0.163759,0.163797,0.17847,0.193966,0.216811,0.151886,0.166536,0.178269,0.194532,0.2,0.20284,0.203171,0.203085,0.200834,0.202553,0.216549,0.234687,0.255795,0.109479,0.125409,0.142831,0.157156,0.246164,0.168977,0.165203,0.164191,0.164395,0.162289,0.175096,0.195632,0.212633,0.109728,0.126185,0.142935,0.156995,0.248858,0.167269,0.162166,0.16284,0.170924,0.177274,0.196131,0.195092,0.215191,
0.103272,0.118836,0.133677,0.151443,0.167163,0.268725,0.182966,0.180327,0.181192,0.182628,0.185708,0.200193,0.227885,0.144806,0.159641,0.175302,0.190038,0.203938,0.2,0.217157,0.217693,0.218282,0.220776,0.222926,0.240125,0.263219,0.104556,0.119022,0.135059,0.15206,0.169337,0.266862,0.183431,0.18136,0.183107,0.182891,0.183542,0.204619,0.223452,0.103343,0.11885,0.13482,0.152233,0.165737,0.273644,0.180155,0.18514,0.189324,0.195104,0.204951,0.201403,0.226362,
0.110828,0.113645,0.131488,0.147603,0.1653,0.1838,0.296213,0.19959,0.203035,0.20137,0.205134,0.210808,0.233603,0.153852,0.156139,0.171262,0.187911,0.198443,0.220185,0.2,0.235496,0.237128,0.236366,0.241338,0.250585,0.272371,0.109862,0.114619,0.130995,0.147095,0.164903,0.182321,0.297183,0.198387,0.202963,0.201845,0.204669,0.21053,0.235497,0.111042,0.113735,0.131679,0.148134,0.165495,0.181161,0.304441,0.203518,0.212845,0.216297,0.227502,0.212255,0.234703,
0.119134,0.123938,0.12952,0.148148,0.163229,0.183386,0.200671,0.326816,0.224167,0.222078,0.226649,0.235365,0.246168,0.161166,0.165409,0.172022,0.186183,0.201897,0.218908,0.23247,0.2,0.256671,0.260438,0.261811,0.271189,0.283573,0.118453,0.123357,0.126787,0.144772,0.162771,0.182,0.199525,0.327949,0.225249,0.222608,0.228626,0.235953,0.24735,0.119483,0.122606,0.129821,0.145867,0.163652,0.18202,0.198574,0.346988,0.233373,0.240063,0.248581,0.232918,0.245587,
0.130799,0.134094,0.141916,0.144782,0.163014,0.183192,0.200482,0.223465,0.364984,0.25592,0.255315,0.263726,0.27656,0.173584,0.175263,0.185526,0.188257,0.203145,0.220197,0.236969,0.257273,0.2,0.284869,0.290322,0.300684,0.310675,0.129851,0.135997,0.141631,0.145515,0.163919,0.181514,0.202175,0.227177,0.363181,0.252165,0.254678,0.264459,0.276644,0.13036,0.136068,0.143714,0.14769,0.165732,0.18506,0.204405,0.228471,0.393873,0.265731,0.275529,0.263898,0.275201,
0.140148,0.142839,0.149856,0.157653,0.164888,0.182025,0.203042,0.227372,0.254204,0.400153,0.267821,0.276786,0.288752,0.180788,0.184917,0.192139,0.198971,0.203325,0.221425,0.238873,0.260033,0.285177,0.2,0.298666,0.308077,0.324523,0.142097,0.143594,0.149822,0.156636,0.164909,0.1815,0.201876,0.226063,0.250871,0.400608,0.265193,0.272674,0.286624,0.140755,0.146785,0.15205,0.160378,0.165508,0.185548,0.206537,0.23238,0.263578,0.442156,0.289325,0.273676,0.286502,
0.151865,0.158026,0.164687,0.170636,0.178909,0.183532,0.206254,0.228602,0.256986,0.268234,0.439784,0.288896,0.30312,0.192878,0.198934,0.206582,0.210094,0.215772,0.222746,0.240324,0.263006,0.289444,0.299843,0.2,0.319759,0.333904,0.150365,0.156976,0.162266,0.170707,0.178057,0.182551,0.202656,0.224871,0.255753,0.268428,0.441916,0.289016,0.302129,0.154202,0.157368,0.164788,0.174925,0.181441,0.187796,0.20983,0.233995,0.267152,0.282805,0.495412,0.287007,0.300372,
0.16729,0.173997,0.178952,0.186595,0.194246,0.201714,0.211901,0.235469,0.263514,0.27545,0.286363,0.492563,0.321365,0.210228,0.215148,0.221472,0.227709,0.229799,0.241323,0.249183,0.271742,0.297798,0.309,0.320123,0.2,0.352156,0.168227,0.17441,0.178977,0.186497,0.194065,0.202937,0.209862,0.232707,0.265105,0.275213,0.291053,0.494441,0.318601,0.168388,0.174778,0.184324,0.194455,0.198905,0.209868,0.219908,0.236104,0.260982,0.271019,0.285576,0.49081,0.322032,
0.185836,0.1932,0.201377,0.208406,0.212475,0.224336,0.237068,0.245301,0.276038,0.2877,0.304548,0.322219,0.550513,0.231704,0.233527,0.240043,0.247533,0.254488,0.264944,0.272742,0.283691,0.310669,0.31745,0.333533,0.351532,0.2,0.186181,0.191224,0.197755,0.208266,0.212392,0.224637,0.232619,0.247776,0.276942,0.290569,0.301314,0.319794,0.55263,0.187443,0.194705,0.200643,0.210928,0.218121,0.229385,0.236818,0.255713,0.288025,0.304819,0.329041,0.319247,0.550876,
0.173825,0.090666,0.0996067,0.103514,0.109834,0.103319,0.110501,0.120994,0.131275,0.138859,0.149769,0.165318,0.186341,0.178988,0.0927857,0.0989058,0.1055,0.10851,0.102208,0.110637,0.118806,0.130463,0.140975,0.150456,0.16583,0.186208,0.2,0.132218,0.142004,0.147497,0.152735,0.14715,0.151113,0.159496,0.17299,0.181762,0.193162,0.209311,0.227275,0.176428,0.0921353,0.0986922,0.103556,0.107609,0.102149,0.108949,0.120257,0.135215,0.150691,0.16941,0.167427,0.187128,
0.0952497,0.188118,0.112439,0.120531,0.127058,0.118043,0.116243,0.123858,0.134837,0.145534,0.156562,0.172491,0.192559,0.0922012,0.189144,0.110734,0.120706,0.125416,0.118691,0.114636,0.123108,0.136975,0.144438,0.158386,0.172508,0.192542,0.134809,0.2,0.155531,0.158176,0.167659,0.158957,0.155937,0.165443,0.17657,0.185142,0.198987,0.21298,0.233538,0.0938365,0.189676,0.111234,0.119134,0.12497,0.116413,0.112798,0.126667,0.140683,0.155991,0.174725,0.172166,0.190829,
0.0977652,0.111439,0.202869,0.135549,0.140944,0.135005,0.130786,0.129312,0.141245,0.151019,0.163066,0.178319,0.199313,0.099874,0.11038,0.203897,0.133409,0.141826,0.133662,0.130053,0.128705,0.140227,0.151974,0.164235,0.178879,0.200759,0.139773,0.154171,0.2,0.173366,0.182003,0.175316,0.171948,0.169063,0.181214,0.191424,0.205189,0.219526,0.241605,0.0992967,0.112893,0.205923,0.131565,0.139317,0.132728,0.128498,0.131231,0.146795,0.163148,0.181389,0.177149,0.19874,
0.105211,0.117745,0.135118,0.222511,0.156858,0.151641,0.147565,0.144936,0.145482,0.158025,0.169077,0.184272,0.206956,0.104836,0.118804,0.133699,0.223732,0.155236,0.154167,0.14622,0.145666,0.146037,0.156809,0.169552,0.185877,0.204216,0.145555,0.159114,0.174393,0.2,0.195172,0.188022,0.187535,0.186111,0.187639,0.194475,0.211734,0.226193,0.246573,0.104081,0.118443,0.132331,0.22674,0.155785,0.149497,0.146326,0.146871,0.15437,0.167693,0.185892,0.187173,0.204649,
0.108526,0.126159,0.140835,0.15888,0.245142,0.169915,0.164781,0.165144,0.164087,0.161973,0.175395,0.191131,0.214361,0.110294,0.128506,0.142469,0.157154,0.242658,0.168202,0.164902,0.161861,0.163029,0.162877,0.174544,0.191816,0.214171,0.151945,0.166404,0.179859,0.193564,0.2,0.205446,0.200626,0.200703,0.203503,0.202883,0.220072,0.233797,0.253558,0.109107,0.125403,0.140768,0.159233,0.24673,0.164778,0.16473,0.167716,0.171131,0.177873,0.195113,0.19401,0.215632,
0.104358,0.117686,0.134058,0.152414,0.166864,0.267333,0.182538,0.181338,0.182484,0.18117,0.184835,0.201846,0.224291,0.104549,0.117969,0.134885,0.152012,0.167451,0.270808,0.182128,0.181191,0.182558,0.180947,0.181711,0.203813,0.224847,0.14635,0.158427,0.174892,0.189815,0.20379,0.2,0.21747,0.218585,0.220569,0.220353,0.224021,0.239856,0.26255,0.101696,0.119751,0.132945,0.148807,0.165839,0.275239,0.180609,0.1841,0.189656,0.195447,0.204624,0.20096,0.223756,
0.11113,0.115807,0.129365,0.146071,0.165216,0.180349,0.295845,0.200711,0.20356,0.202674,0.204851,0.209967,0.234517,0.110818,0.11281,0.130469,0.146158,0.1658,0.181493,0.295662,0.200056,0.203135,0.202364,0.203895,0.211399,0.235983,0.152727,0.157992,0.171617,0.188005,0.202715,0.220153,0.2,0.23673,0.238936,0.239138,0.239974,0.251872,0.274073,0.111835,0.113512,0.13141,0.14782,0.166693,0.181015,0.305406,0.204749,0.21137,0.214975,0.226784,0.212834,0.236549,
0.119395,0.123709,0.128534,0.147687,0.163245,0.182223,0.199036,0.328241,0.225946,0.224353,0.226339,0.232488,0.246237,0.12011,0.122841,0.130019,0.146582,0.161515,0.182837,0.199217,0.328189,0.224307,0.226569,0.225689,0.235057,0.246682,0.159948,0.169391,0.169954,0.186009,0.200027,0.21752,0.234671,0.2,0.257706,0.260452,0.261574,0.269784,0.284115,0.120337,0.123,0.128957,0.144879,0.163003,0.182193,0.202641,0.346963,0.233367,0.238428,0.24949,0.233196,0.249295,
0.130124,0.136786,0.143199,0.145709,0.164346,0.183698,0.203871,0.226293,0.365771,0.25447,0.253831,0.265742,0.274979,0.129687,0.134956,0.141301,0.144632,0.163461,0.185411,0.202582,0.225973,0.363879,0.252489,0.254164,0.262994,0.272832,0.172462,0.176776,0.183256,0.185221,0.203059,0.220419,0.238263,0.258271,0.2,0.286767,0.287637,0.29493,0.307944,0.132185,0.137086,0.14164,0.146295,0.167181,0.18351,0.204699,0.231628,0.396465,0.266123,0.2745,0.26312,0.272719,
0.138309,0.144676,0.150085,0.15774,0.163239,0.183315,0.200763,0.225004,0.251454,0.402308,0.266398,0.274629,0.287696,0.138422,0.145742,0.150485,0.157536,0.162742,0.180483,0.204341,0.22552,0.254004,0.400338,0.267387,0.275411,0.289064,0.182053,0.187851,0.189414,0.197549,0.202413,0.220541,0.237918,0.261315,0.285485,0.2,0.298324,0.3082,0.321586,0.140509,0.146291,0.152224,0.158774,0.167584,0.184901,0.205709,0.230994,0.263761,0.442749,0.287253,0.274984,0.288537,
0.150459,0.156773,0.161579,0.170788,0.177639,0.185337,0.204998,0.225403,0.254383,0.266961,0.442215,0.290003,0.301053,0.148414,0.157241,0.162613,0.166369,0.177693,0.184326,0.202839,0.225486,0.254015,0.267055,0.44244,0.288927,0.301014,0.192252,0.199939,0.203443,0.208783,0.217475,0.22317,0.24274,0.261348,0.28699,0.298485,0.2,0.320798,0.334363,0.152092,0.158702,0.165374,0.170519,0.180978,0.188038,0.210133,0.234271,0.269679,0.285268,0.492149,0.290518,0.302407,
0.167031,0.171219,0.179726,0.186263,0.191389,0.203276,0.21282,0.232725,0.262427,0.273939,0.288633,0.491803,0.320762,0.16726,0.171116,0.180099,0.187211,0.194575,0.2036,0.210989,0.231753,0.262735,0.275461,0.288493,0.490398,0.32256,0.210296,0.214288,0.220026,0.227203,0.232824,0.241353,0.248585,0.270575,0.297625,0.307797,0.320309,0.2,0.353172,0.171356,0.175241,0.182322,0.192991,0.200247,0.210663,0.218988,0.239258,0.262093,0.27413,0.287612,0.493164,0.321929,
0.186821,0.190619,0.200017,0.207481,0.215489,0.225101,0.23626,0.245098,0.276281,0.286261,0.299269,0.322798,0.550564,0.187057,0.194247,0.200278,0.209638,0.215125,0.226823,0.232352,0.24584,0.273166,0.287462,0.302058,0.319202,0.550762,0.227279,0.234936,0.237395,0.249699,0.253213,0.261236,0.274079,0.285867,0.311391,0.322462,0.332308,0.353399,0.2,0.187346,0.193534,0.200437,0.20698,0.219217,0.228754,0.237698,0.252645,0.286151,0.305236,0.327806,0.318726,0.549135,
0.175236,0.09313,0.0972753,0.102974,0.109923,0.103716,0.112915,0.118105,0.131658,0.139004,0.151666,0.165606,0.1882,0.175357,0.0911142,0.0980123,0.103816,0.109823,0.103156,0.110213,0.12099,0.12998,0.139503,0.152313,0.167415,0.189133,0.175624,0.0925162,0.0984672,0.10457,0.109731,0.10343,0.11123,0.118738,0.129561,0.141263,0.152547,0.166005,0.188254,0.2,0.133595,0.138522,0.146736,0.148944,0.1439,0.150269,0.162188,0.178306,0.192382,0.207886,0.209029,0.231435,
0.0911193,0.189261,0.110902,0.120214,0.12606,0.12042,0.115275,0.126449,0.139284,0.146174,0.158044,0.17471,0.196622,0.0921977,0.190892,0.113763,0.118663,0.126609,0.117779,0.115242,0.125408,0.138191,0.146763,0.159264,0.17445,0.197075,0.0926113,0.188721,0.112685,0.118199,0.124784,0.117262,0.113273,0.125555,0.139321,0.14655,0.158764,0.173436,0.195536,0.133869,0.2,0.150326,0.156547,0.16294,0.155465,0.153577,0.168437,0.182081,0.198505,0.214692,0.219531,0.23624,
0.097917,0.111983,0.203279,0.133657,0.141941,0.134149,0.131242,0.130635,0.143024,0.153533,0.162546,0.179558,0.205447,0.0976983,0.111099,0.204903,0.134012,0.140709,0.134585,0.132149,0.129446,0.142378,0.151571,0.163729,0.182943,0.205648,0.0974983,0.110975,0.205693,0.134092,0.141997,0.134364,0.130773,0.129951,0.140053,0.153536,0.165862,0.182931,0.204354,0.140708,0.154128,0.2,0.171446,0.177409,0.172104,0.170089,0.176422,0.18723,0.204915,0.22236,0.222673,0.239224,
0.103162,0.117309,0.134161,0.224616,0.1545,0.14966,0.148153,0.145881,0.146728,0.158606,0.171899,0.187907,0.213649,0.103974,0.118576,0.132103,0.224974,0.156265,0.151917,0.148153,0.146744,0.146092,0.159662,0.171433,0.187387,0.21362,0.10403,0.119304,0.131388,0.224609,0.156614,0.149711,0.145694,0.148204,0.148702,0.1592,0.173633,0.188926,0.215178,0.144469,0.158767,0.172241,0.2,0.193091,0.188021,0.18512,0.18765,0.195633,0.210021,0.228759,0.229962,0.245333,
0.108549,0.12443,0.140052,0.157612,0.249341,0.166889,0.16511,0.163809,0.165136,0.1656,0.180121,0.197139,0.2258,0.108362,0.124056,0.140538,0.154526,0.247574,0.167356,0.164603,0.162593,0.16617,0.165128,0.179795,0.199052,0.224375,0.107499,0.123176,0.138773,0.155409,0.24908,0.167107,0.164284,0.164522,0.165283,0.165757,0.182765,0.19666,0.225374,0.147512,0.163277,0.180296,0.193953,0.2,0.204011,0.201036,0.205596,0.210483,0.216285,0.23543,0.237165,0.255233,
0.101838,0.117277,0.132743,0.151828,0.164683,0.272818,0.180843,0.184067,0.182899,0.184515,0.188068,0.208602,0.234531,0.101148,0.117876,0.131998,0.148989,0.166456,0.274105,0.181244,0.183303,0.186076,0.185112,0.191,0.209477,0.236097,0.102764,0.116096,0.133691,0.14956,0.166422,0.272954,0.181218,0.184571,0.184796,0.187148,0.187893,0.208043,0.233605,0.145524,0.156657,0.173119,0.18932,0.202086,0.2,0.220534,0.225188,0.225519,0.235221,0.247763,0.246075,0.265941,
0.106451,0.112339,0.127746,0.14439,0.161711,0.180458,0.303543,0.20073,0.204716,0.206261,0.210295,0.219202,0.244871,0.109955,0.112546,0.128754,0.145935,0.162433,0.178091,0.30532,0.198916,0.204304,0.205068,0.209589,0.218674,0.244584,0.108638,0.112112,0.127806,0.144955,0.161775,0.180013,0.303361,0.203875,0.204709,0.206921,0.208583,0.219602,0.244924,0.15192,0.155005,0.172105,0.183323,0.20151,0.217061,0.2,0.241416,0.247983,0.255189,0.265971,0.255679,0.277301,
0.12298,0.125796,0.131496,0.146431,0.16347,0.186665,0.203118,0.349638,0.232841,0.23191,0.2369,0.247184,0.25129,0.121192,0.125772,0.132562,0.145885,0.166049,0.184084,0.202977,0.347123,0.232723,0.230964,0.237701,0.244068,0.247962,0.120589,0.126131,0.12954,0.148144,0.166278,0.185162,0.203753,0.347622,0.229496,0.234147,0.234802,0.24569,0.250834,0.163402,0.166719,0.171255,0.186919,0.204333,0.222867,0.239815,0.2,0.272471,0.282156,0.292137,0.280601,0.289268,
0.136923,0.143225,0.14607,0.151855,0.168963,0.188832,0.208719,0.233919,0.394334,0.263888,0.266672,0.277973,0.274212,0.134639,0.14113,0.146673,0.151538,0.168534,0.190058,0.210324,0.234323,0.394525,0.263748,0.2668,0.280633,0.275161,0.134832,0.139159,0.146681,0.153239,0.169041,0.189828,0.210166,0.23208,0.393195,0.264626,0.26871,0.276668,0.278205,0.176223,0.180978,0.186853,0.194526,0.211092,0.230668,0.247417,0.272783,0.2,0.309322,0.320117,0.309889,0.315396,
0.150826,0.156145,0.161496,0.170902,0.177006,0.193354,0.215386,0.240216,0.268225,0.442054,0.287836,0.296008,0.284078,0.148089,0.156194,0.162707,0.169491,0.174165,0.194223,0.215081,0.241409,0.268812,0.445341,0.286564,0.295012,0.283976,0.149958,0.15675,0.163114,0.169852,0.173243,0.197065,0.217705,0.239299,0.268159,0.439977,0.286818,0.297613,0.286739,0.193119,0.197265,0.203819,0.209305,0.21544,0.234472,0.254122,0.280673,0.309501,0.2,0.338966,0.327244,0.3331,
0.167546,0.174448,0.179084,0.18825,0.195869,0.203777,0.2247,0.250136,0.278014,0.291788,0.491559,0.318798,0.297772,0.167217,0.174288,0.181227,0.187767,0.195638,0.202409,0.22391,0.251082,0.276708,0.290734,0.489611,0.320469,0.296934,0.169257,0.173875,0.182178,0.186281,0.196387,0.203054,0.225091,0.248075,0.279156,0.290489,0.493005,0.317839,0.298976,0.211134,0.217413,0.219847,0.229092,0.237447,0.245083,0.266479,0.291735,0.322179,0.34102,0.2,0.346496,0.356428,
0.190591,0.195148,0.203759,0.209926,0.220286,0.229905,0.238714,0.265654,0.295267,0.308951,0.324862,0.550278,0.315973,0.190134,0.197133,0.201291,0.21066,0.219183,0.229525,0.241406,0.266123,0.292169,0.307209,0.325646,0.551546,0.318474,0.191429,0.196101,0.201788,0.211986,0.219127,0.231394,0.238223,0.266799,0.290274,0.307239,0.324939,0.550089,0.319477,0.232197,0.239192,0.245399,0.253441,0.265007,0.274058,0.285862,0.304143,0.326348,0.337418,0.351013,0.2,0.351687,
0.186153,0.192895,0.196455,0.206462,0.213646,0.225056,0.234965,0.247108,0.276435,0.284978,0.302334,0.319026,0.549782,0.186266,0.191744,0.198672,0.205452,0.212752,0.22503,0.235928,0.244692,0.274394,0.288882,0.302149,0.320097,0.550473,0.184047,0.19216,0.19942,0.204513,0.213595,0.225036,0.236039,0.248242,0.273528,0.288253,0.303383,0.318742,0.54933,0.230817,0.234596,0.24187,0.246998,0.257138,0.264575,0.273869,0.291453,0.318415,0.33507,0.357572,0.348872,0.2,
0.166667,0.117192,0.121407,0.12488,0.129241,0.125534,0.130099,0.135064,0.146084,0.152541,0.163134,0.177626,0.195889,0.152682,0.0741265,0.0814632,0.0842322,0.0890048,0.0823993,0.0891192,0.0925018,0.103332,0.110948,0.120661,0.1312,0.151271,0.156737,0.0742403,0.0807982,0.0835857,0.0886047,0.0810105,0.0863762,0.094097,0.102693,0.111814,0.120788,0.133101,0.148315,0.155069,0.0723627,0.078819,0.0819008,0.0862553,0.0789607,0.0858207,0.095788,0.10859,0.120029,0.136654,0.133221,0.152514,
0.116369,0.166667,0.130622,0.137976,0.142887,0.135325,0.133578,0.138639,0.149642,0.158351,0.168546,0.178454,0.197777,0.073952,0.161054,0.0907145,0.098257,0.102155,0.0957102,0.0900983,0.0970845,0.107033,0.115416,0.125429,0.136803,0.156886,0.075144,0.163771,0.0909528,0.0974323,0.101464,0.0961843,0.0912423,0.0989768,0.108905,0.116691,0.124566,0.137884,0.151868,0.0735097,0.162973,0.0917178,0.0959622,0.100741,0.0925377,0.0883052,0.0999388,0.111702,0.123495,0.138555,0.13825,0.157992,
0.122126,0.131474,0.166667,0.149945,0.158349,0.148131,0.143664,0.143447,0.153121,0.162306,0.170171,0.181444,0.203743,0.0793708,0.092187,0.172451,0.109335,0.118035,0.109397,0.105691,0.101807,0.112727,0.119818,0.128917,0.142416,0.162342,0.0797042,0.0910278,0.169845,0.109906,0.117232,0.107761,0.103975,0.101504,0.113231,0.12087,0.129598,0.142857,0.156236,0.0783062,0.0891343,0.173885,0.108391,0.115231,0.108014,0.101788,0.103659,0.117363,0.128631,0.144359,0.140668,0.159861,
0.12524,0.137788,0.149931,0.166667,0.166343,0.16097,0.158614,0.15691,0.157531,0.168585,0.175535,0.193163,0.20814,0.0835137,0.0980957,0.109821,0.184592,0.128597,0.124356,0.119422,0.117058,0.116988,0.125059,0.134849,0.150921,0.16547,0.0839868,0.0975015,0.110662,0.186725,0.131338,0.123841,0.119651,0.116166,0.117233,0.124538,0.135774,0.148225,0.16396,0.0842952,0.097825,0.108563,0.186091,0.128913,0.122428,0.117282,0.1175,0.122119,0.13377,0.150172,0.14713,0.166565,
0.128654,0.141856,0.157902,0.167059,0.166667,0.177191,0.173367,0.170927,0.170891,0.17183,0.183876,0.19653,0.216031,0.0886357,0.101626,0.115708,0.12705,0.199989,0.138698,0.136456,0.133951,0.131936,0.132137,0.143022,0.154762,0.172653,0.0877233,0.101455,0.11651,0.130806,0.200558,0.137236,0.134217,0.131208,0.132767,0.130978,0.140503,0.154441,0.17224,0.0885083,0.103237,0.116109,0.128882,0.202588,0.138436,0.134095,0.13502,0.137113,0.142644,0.155367,0.155615,0.173282,
0.12339,0.13695,0.147446,0.164201,0.175505,0.166667,0.184783,0.187807,0.188764,0.186157,0.187624,0.202541,0.223735,0.083258,0.0957648,0.107504,0.125396,0.137074,0.219632,0.147754,0.14994,0.150575,0.148584,0.147678,0.161956,0.180643,0.0835833,0.0936552,0.109686,0.123084,0.140149,0.218473,0.148328,0.150793,0.150536,0.148124,0.146222,0.162712,0.178313,0.0815198,0.0950285,0.109325,0.125868,0.137001,0.226631,0.148062,0.148165,0.154697,0.158518,0.164314,0.159117,0.18114,
0.128353,0.132973,0.144942,0.16005,0.171167,0.187805,0.166667,0.199734,0.20165,0.202166,0.205288,0.211586,0.230767,0.0890943,0.0911888,0.10384,0.120007,0.133952,0.14877,0.241779,0.163476,0.168196,0.167668,0.166033,0.169115,0.191661,0.0875103,0.0923042,0.107041,0.118371,0.13631,0.148825,0.239798,0.161728,0.167296,0.16681,0.163868,0.17186,0.189128,0.0875408,0.090816,0.105177,0.119163,0.134734,0.148092,0.248187,0.167322,0.174152,0.176222,0.184298,0.169814,0.191701,
0.135319,0.139533,0.143417,0.154665,0.173137,0.187727,0.202132,0.166667,0.222595,0.221437,0.223947,0.228355,0.240177,0.095497,0.0993325,0.103473,0.11658,0.130174,0.147705,0.165005,0.267097,0.189207,0.185016,0.184927,0.19225,0.20427,0.0955022,0.0965558,0.101506,0.117189,0.131822,0.150977,0.16484,0.264853,0.1857,0.184743,0.184791,0.192692,0.200295,0.0951735,0.0986735,0.10272,0.118558,0.132539,0.150445,0.164224,0.286142,0.19621,0.195912,0.204407,0.192539,0.199937,
0.146047,0.149675,0.151926,0.157914,0.170036,0.186939,0.202185,0.225246,0.166667,0.246144,0.24742,0.254213,0.265064,0.102694,0.10759,0.113066,0.117191,0.132099,0.147476,0.167264,0.190182,0.298742,0.214965,0.212777,0.21926,0.230767,0.103013,0.107902,0.112343,0.116669,0.131085,0.149815,0.167463,0.188888,0.29761,0.214041,0.214547,0.218277,0.230834,0.103683,0.111142,0.113271,0.117379,0.133241,0.151244,0.16821,0.193238,0.327893,0.224992,0.230376,0.218924,0.226919,
0.15768,0.159862,0.162498,0.167792,0.170901,0.185303,0.204159,0.223047,0.245876,0.166667,0.259494,0.266472,0.276204,0.110385,0.114594,0.12077,0.126071,0.128786,0.147624,0.165849,0.183587,0.214893,0.333692,0.225737,0.232856,0.242913,0.110775,0.115272,0.120019,0.126307,0.128924,0.14624,0.167795,0.184571,0.214104,0.331364,0.225304,0.229266,0.242672,0.113559,0.117805,0.123273,0.127217,0.134545,0.148529,0.168998,0.195306,0.220364,0.372455,0.245366,0.230367,0.242102,
0.163526,0.168535,0.172405,0.178874,0.18253,0.18855,0.205287,0.224311,0.250958,0.257027,0.166667,0.275255,0.290374,0.122257,0.12478,0.13179,0.135991,0.141983,0.1474,0.166723,0.187717,0.213556,0.225528,0.36997,0.244563,0.254217,0.120679,0.125005,0.130557,0.135446,0.142359,0.144575,0.164796,0.187121,0.214651,0.221175,0.373635,0.243872,0.257005,0.124869,0.124922,0.132041,0.137767,0.142991,0.152673,0.17014,0.195973,0.2244,0.24187,0.42344,0.242981,0.256194,
0.179524,0.181519,0.186301,0.189368,0.192461,0.202347,0.208879,0.229424,0.254812,0.267013,0.279592,0.166667,0.307747,0.133357,0.13744,0.143357,0.148878,0.154413,0.161357,0.169793,0.190843,0.218382,0.231026,0.24711,0.424128,0.27507,0.13295,0.136733,0.140817,0.147484,0.154708,0.159309,0.1707,0.193482,0.218214,0.231747,0.245579,0.423101,0.276094,0.137681,0.141177,0.14834,0.154181,0.163828,0.169068,0.176495,0.193568,0.219371,0.228446,0.24348,0.423993,0.27355,
0.193948,0.197838,0.203711,0.20913,0.2162,0.222247,0.232278,0.24128,0.269221,0.274482,0.291329,0.306588,0.166667,0.149175,0.157065,0.161837,0.166914,0.173044,0.182126,0.191427,0.201396,0.229284,0.241524,0.254557,0.275507,0.480728,0.150311,0.156089,0.160026,0.166812,0.174498,0.183064,0.194018,0.201451,0.229037,0.240134,0.257557,0.275525,0.481402,0.151223,0.156139,0.161197,0.169323,0.177665,0.183354,0.195294,0.208692,0.239542,0.261328,0.277681,0.274039,0.481271,
0.154536,0.0729553,0.0802862,0.0820817,0.0871323,0.081291,0.0875422,0.0956115,0.103534,0.112824,0.122034,0.134177,0.152524,0.166667,0.11548,0.12075,0.124419,0.128837,0.123421,0.130133,0.135537,0.147095,0.153036,0.165043,0.176762,0.195591,0.153499,0.0761185,0.079918,0.0836527,0.0895133,0.082308,0.0881485,0.094753,0.102974,0.11176,0.120516,0.133045,0.147632,0.156779,0.0733683,0.0786927,0.0815048,0.0879145,0.080069,0.0847203,0.0950013,0.108486,0.120781,0.135193,0.13317,0.149216,
0.0730492,0.16271,0.0907985,0.0990305,0.102491,0.0954523,0.0901075,0.097376,0.107046,0.11588,0.124482,0.137379,0.156388,0.116876,0.166667,0.130143,0.135894,0.139984,0.136027,0.133752,0.13969,0.151163,0.158123,0.165884,0.181196,0.199483,0.0749828,0.159367,0.0895677,0.0974592,0.100768,0.0923733,0.0898692,0.0988777,0.108839,0.116268,0.123867,0.13881,0.152358,0.0722343,0.161324,0.0887407,0.0962633,0.100911,0.091176,0.0877213,0.0978777,0.111696,0.125749,0.139508,0.137558,0.154839,
0.0800023,0.0920262,0.174124,0.110805,0.11705,0.108873,0.103876,0.10179,0.112467,0.119062,0.130764,0.142106,0.159796,0.121975,0.134373,0.166667,0.147709,0.154228,0.151059,0.144652,0.143479,0.155513,0.161305,0.1729,0.18446,0.203346,0.0786622,0.0922698,0.169302,0.110124,0.115949,0.108495,0.10378,0.101647,0.111667,0.121483,0.12844,0.142631,0.155479,0.080863,0.0891822,0.171338,0.109714,0.115938,0.109582,0.10077,0.104578,0.117057,0.128107,0.141161,0.143327,0.161522,
0.084675,0.0974075,0.11211,0.184429,0.13144,0.125819,0.119499,0.116463,0.117445,0.125397,0.135412,0.14912,0.167372,0.126248,0.139074,0.148812,0.166667,0.168861,0.163703,0.156925,0.15743,0.157686,0.168866,0.174433,0.189573,0.209601,0.0826913,0.0991812,0.109906,0.185618,0.130282,0.124268,0.119307,0.117994,0.116958,0.124502,0.136377,0.148096,0.163082,0.0844107,0.097574,0.109147,0.186072,0.126891,0.124412,0.119685,0.11773,0.122184,0.137089,0.150353,0.149376,0.165893,
0.0885892,0.101681,0.115404,0.129899,0.199329,0.136935,0.136317,0.130097,0.131131,0.131414,0.142562,0.156356,0.174547,0.130519,0.142309,0.153869,0.166318,0.166667,0.17484,0.171992,0.170821,0.172026,0.170384,0.183227,0.196267,0.215852,0.089926,0.102642,0.117487,0.129883,0.199392,0.138518,0.134562,0.133086,0.13273,0.13031,0.141098,0.153736,0.173099,0.0887322,0.101795,0.116108,0.129031,0.200504,0.13791,0.134066,0.132735,0.138145,0.14055,0.15592,0.156345,0.173941,
0.0811182,0.0945812,0.110385,0.123687,0.138605,0.22008,0.150645,0.149276,0.151016,0.146213,0.146397,0.161495,0.182418,0.123882,0.134192,0.148288,0.16203,0.174939,0.166667,0.186544,0.185118,0.187296,0.185419,0.190147,0.200308,0.220564,0.0826885,0.094257,0.109834,0.124069,0.136126,0.220739,0.150085,0.14729,0.148042,0.147688,0.145769,0.160784,0.178041,0.0823785,0.0947343,0.110036,0.123218,0.137177,0.222453,0.148692,0.149004,0.154723,0.159075,0.16492,0.161945,0.183086,
0.0889412,0.0920062,0.104529,0.118273,0.133615,0.15059,0.240246,0.165526,0.167484,0.166747,0.165766,0.169413,0.191223,0.13044,0.130843,0.145016,0.158288,0.173319,0.186617,0.166667,0.200775,0.201934,0.204086,0.206768,0.210797,0.232317,0.0864093,0.0915727,0.106288,0.119977,0.136715,0.150723,0.240262,0.164787,0.167013,0.165917,0.165102,0.169171,0.189713,0.0874077,0.0912232,0.104043,0.120013,0.133752,0.151239,0.245358,0.167713,0.17288,0.177137,0.181947,0.172181,0.192416,
0.0942602,0.0986307,0.102125,0.117228,0.13389,0.149338,0.16422,0.266572,0.187082,0.184678,0.187858,0.193089,0.202823,0.135783,0.140918,0.141792,0.160106,0.170492,0.187269,0.200005,0.166667,0.221491,0.22104,0.222907,0.230108,0.239685,0.0960143,0.097159,0.101352,0.116802,0.131892,0.151704,0.163174,0.264115,0.189521,0.184997,0.185671,0.189494,0.199029,0.09487,0.0972397,0.102206,0.119031,0.132605,0.150517,0.165833,0.286495,0.194391,0.196441,0.204294,0.19208,0.201858,
0.103688,0.107038,0.112297,0.116177,0.132115,0.148951,0.167118,0.190355,0.298718,0.214732,0.213985,0.216954,0.228697,0.146231,0.148492,0.152489,0.159273,0.172253,0.186641,0.204851,0.22489,0.166667,0.247262,0.248656,0.255353,0.264784,0.10602,0.108099,0.111168,0.118289,0.131493,0.150297,0.168739,0.189242,0.296733,0.212763,0.212541,0.218125,0.230473,0.104097,0.108838,0.112673,0.116852,0.132649,0.151699,0.168843,0.193457,0.329548,0.221097,0.231286,0.218166,0.228515,
0.113033,0.116316,0.120065,0.126061,0.130049,0.148432,0.163652,0.186529,0.213836,0.333405,0.225491,0.232281,0.242516,0.152104,0.15646,0.161801,0.168476,0.170907,0.186435,0.20084,0.222579,0.246557,0.166667,0.258705,0.263821,0.277124,0.112621,0.115609,0.119341,0.127,0.129897,0.147934,0.164731,0.185668,0.214741,0.331839,0.22338,0.231347,0.240327,0.112837,0.116974,0.120434,0.12654,0.131544,0.149854,0.168248,0.191941,0.221612,0.37578,0.24447,0.228897,0.243299,
0.121782,0.126986,0.129238,0.135214,0.141814,0.149854,0.166844,0.185871,0.214204,0.226321,0.371041,0.243992,0.256176,0.164159,0.16876,0.171288,0.175653,0.18418,0.188219,0.205051,0.223022,0.248694,0.259036,0.166667,0.277782,0.288927,0.121144,0.126003,0.130363,0.134265,0.141577,0.146856,0.166277,0.185433,0.214034,0.223817,0.37243,0.244188,0.255856,0.123234,0.127232,0.130883,0.13692,0.144478,0.15056,0.171057,0.195664,0.223228,0.240125,0.422685,0.243708,0.256084,
0.13193,0.137353,0.142001,0.148488,0.153843,0.160732,0.172945,0.190413,0.222816,0.233218,0.246084,0.425879,0.275156,0.177675,0.180882,0.187156,0.190763,0.198238,0.203131,0.209142,0.228018,0.254635,0.265074,0.27665,0.166667,0.30928,0.133821,0.135368,0.143054,0.149865,0.155322,0.16207,0.170014,0.193518,0.219283,0.228719,0.245395,0.420292,0.277132,0.136777,0.142301,0.148223,0.15492,0.161874,0.170135,0.179009,0.195434,0.217997,0.231274,0.240829,0.422238,0.275028,
0.150849,0.155179,0.158578,0.16651,0.171621,0.184323,0.192189,0.203447,0.228503,0.242406,0.255621,0.275071,0.481762,0.1943,0.196986,0.204288,0.207939,0.21364,0.222969,0.22943,0.242631,0.264409,0.275879,0.291062,0.307382,0.166667,0.15206,0.156955,0.159861,0.167094,0.171952,0.182776,0.193381,0.204149,0.229679,0.244476,0.256865,0.274745,0.482553,0.152384,0.156844,0.161574,0.167272,0.175249,0.183444,0.193736,0.208985,0.239015,0.257761,0.28088,0.276047,0.482155,
0.153651,0.075123,0.0789268,0.0857615,0.08795,0.0824178,0.0862927,0.0926038,0.103851,0.111735,0.119771,0.132549,0.151452,0.153758,0.0744315,0.0812515,0.0841818,0.0886145,0.0825442,0.0883403,0.0940418,0.104617,0.111323,0.121654,0.133971,0.151994,0.166667,0.115498,0.121348,0.1248,0.129063,0.122441,0.126807,0.134437,0.146262,0.15542,0.163769,0.176284,0.19022,0.154481,0.0725432,0.0783383,0.0797888,0.0869467,0.0809558,0.0841885,0.0955647,0.108324,0.120966,0.134157,0.133113,0.150483,
0.0750422,0.160143,0.090203,0.0958667,0.102004,0.0932835,0.0916213,0.0973942,0.10694,0.116737,0.12533,0.137381,0.155158,0.0749233,0.161861,0.091284,0.0987833,0.102764,0.094635,0.0912243,0.0981088,0.107244,0.11352,0.125412,0.137743,0.15571,0.113659,0.166667,0.130806,0.137087,0.141763,0.135985,0.129926,0.136978,0.148198,0.158038,0.169287,0.179101,0.196052,0.0734518,0.163978,0.0905637,0.09496,0.100085,0.0928755,0.0878363,0.098656,0.111397,0.125156,0.139089,0.137794,0.155109,
0.0797567,0.0906418,0.170997,0.110959,0.115307,0.109987,0.106159,0.104072,0.111449,0.122073,0.131151,0.141219,0.159266,0.0782603,0.0918273,0.173229,0.107493,0.11712,0.10954,0.103425,0.101912,0.11267,0.119611,0.130821,0.1423,0.160218,0.11999,0.131189,0.166667,0.148342,0.156349,0.147573,0.145054,0.142228,0.15431,0.159125,0.170091,0.183643,0.199844,0.0797915,0.0911702,0.170005,0.108709,0.114505,0.10774,0.101539,0.101474,0.116033,0.129438,0.144257,0.141433,0.158828,
0.0840742,0.0955703,0.111685,0.184457,0.130053,0.125091,0.120154,0.115288,0.115385,0.123323,0.134561,0.14744,0.165425,0.0823643,0.0972332,0.110019,0.184791,0.128488,0.12381,0.119719,0.114644,0.115029,0.126339,0.13519,0.147653,0.167228,0.126556,0.137017,0.148308,0.166667,0.167216,0.162545,0.158844,0.156405,0.156062,0.16579,0.173313,0.189725,0.206005,0.0838633,0.0963485,0.109352,0.186556,0.128768,0.123119,0.118474,0.118207,0.122703,0.135539,0.150095,0.150545,0.165788,
0.0865472,0.102956,0.116558,0.130258,0.199487,0.138538,0.133726,0.132754,0.130708,0.133246,0.141046,0.155027,0.173278,0.0891472,0.102405,0.115377,0.128371,0.200844,0.138881,0.135381,0.132245,0.131104,0.129806,0.144324,0.153606,0.173123,0.127861,0.140449,0.154363,0.166103,0.166667,0.174077,0.171997,0.169913,0.170502,0.172529,0.180734,0.195945,0.211453,0.088587,0.101405,0.115209,0.128748,0.204085,0.136566,0.133005,0.13375,0.13592,0.140839,0.156667,0.155691,0.17411,
0.0821252,0.0927117,0.109292,0.123112,0.138714,0.218518,0.14704,0.150435,0.148316,0.146077,0.145589,0.162728,0.182864,0.0812803,0.0945385,0.10843,0.124132,0.137596,0.219804,0.149698,0.147811,0.149321,0.147956,0.149708,0.161809,0.182502,0.12386,0.134884,0.14791,0.160802,0.174231,0.166667,0.186141,0.18717,0.185564,0.187729,0.187096,0.20274,0.218576,0.0813375,0.0955053,0.109258,0.123033,0.137825,0.222693,0.147669,0.151049,0.154031,0.157466,0.161865,0.162928,0.180952,
0.087136,0.0907195,0.105317,0.1205,0.133724,0.151979,0.23976,0.164251,0.166557,0.163995,0.165553,0.170538,0.190499,0.087593,0.0908852,0.105468,0.119622,0.135152,0.15124,0.240894,0.163537,0.167486,0.164935,0.164302,0.169982,0.191745,0.129356,0.131979,0.145572,0.158291,0.172312,0.183665,0.166667,0.199766,0.203721,0.203014,0.205887,0.207248,0.228649,0.0880232,0.0901893,0.105463,0.118766,0.135925,0.151456,0.248525,0.167949,0.173522,0.177325,0.183311,0.172229,0.190995,
0.093879,0.0984692,0.101626,0.117395,0.132885,0.1475,0.164936,0.26664,0.188882,0.187552,0.185765,0.189998,0.204559,0.0938127,0.100236,0.10042,0.115377,0.131884,0.1479,0.163818,0.264023,0.187004,0.186108,0.189271,0.190923,0.198323,0.136916,0.137351,0.142298,0.156053,0.168752,0.185784,0.200644,0.166667,0.223794,0.221483,0.226572,0.229769,0.239802,0.0947108,0.0988495,0.102032,0.115924,0.133256,0.149501,0.167859,0.286796,0.195207,0.197899,0.204642,0.189498,0.200943,
0.104174,0.107793,0.111999,0.116581,0.132289,0.150568,0.167723,0.185684,0.297762,0.213816,0.213099,0.221112,0.2283,0.103667,0.108212,0.110213,0.115482,0.132004,0.148842,0.166502,0.189187,0.298459,0.212507,0.212169,0.218745,0.232119,0.144515,0.147544,0.151871,0.156563,0.171288,0.187618,0.202155,0.220104,0.166667,0.246207,0.245044,0.253927,0.26303,0.104383,0.110437,0.112722,0.116559,0.131981,0.15064,0.16863,0.19425,0.331045,0.223461,0.233089,0.219986,0.229832,
0.110044,0.114276,0.119193,0.127176,0.132036,0.147673,0.164218,0.18548,0.212554,0.33159,0.223787,0.230812,0.240271,0.112376,0.114919,0.119748,0.124217,0.130763,0.146803,0.165143,0.187044,0.213785,0.330795,0.222673,0.232807,0.239892,0.152162,0.157862,0.161721,0.165306,0.172182,0.185237,0.201795,0.219819,0.246072,0.166667,0.258457,0.2642,0.275483,0.113672,0.117064,0.120147,0.125492,0.133693,0.149323,0.169616,0.193365,0.221601,0.375249,0.243957,0.229752,0.24099,
0.120073,0.12357,0.129622,0.134159,0.142157,0.146486,0.164007,0.187182,0.212142,0.226432,0.371835,0.245181,0.258332,0.118975,0.123754,0.128242,0.133827,0.140383,0.146927,0.165436,0.186268,0.215035,0.226071,0.371586,0.245795,0.257231,0.161279,0.167946,0.170229,0.174704,0.181225,0.186179,0.204334,0.222412,0.248697,0.255638,0.166667,0.276431,0.296056,0.120163,0.126847,0.130218,0.138863,0.143803,0.151402,0.170855,0.193384,0.225449,0.23906,0.424054,0.245463,0.253928,
0.132358,0.138204,0.140839,0.146263,0.151922,0.162112,0.169728,0.190115,0.220397,0.230665,0.243347,0.425375,0.276794,0.131361,0.134436,0.143061,0.147009,0.153529,0.161755,0.169787,0.191577,0.219126,0.230519,0.244619,0.428,0.273693,0.17492,0.180846,0.183856,0.189955,0.19269,0.201107,0.208139,0.226129,0.254118,0.26605,0.278569,0.166667,0.306518,0.13823,0.140208,0.147664,0.154077,0.163462,0.170156,0.177066,0.192047,0.219338,0.228671,0.241292,0.428122,0.272861,
0.150451,0.156062,0.160868,0.169446,0.174117,0.182482,0.191514,0.201961,0.229208,0.242687,0.257526,0.27401,0.482838,0.151046,0.155227,0.1614,0.165632,0.17316,0.180551,0.190849,0.201881,0.23157,0.239854,0.256711,0.274484,0.48262,0.193748,0.1979,0.201899,0.206667,0.216526,0.221182,0.23352,0.238677,0.266179,0.27785,0.29066,0.307889,0.166667,0.150903,0.155866,0.160637,0.166866,0.174375,0.183869,0.195297,0.209585,0.238558,0.257789,0.280742,0.272597,0.484257,
0.154074,0.0731145,0.0797075,0.0845198,0.0886902,0.0811702,0.0867895,0.095341,0.105107,0.114868,0.121918,0.135724,0.155095,0.155683,0.0748038,0.0794452,0.0846937,0.08895,0.082303,0.088018,0.0940537,0.104578,0.112651,0.12556,0.135246,0.153181,0.156143,0.0744472,0.0789505,0.0838072,0.0895308,0.0799995,0.0870852,0.0948967,0.103377,0.112928,0.121966,0.135238,0.153518,0.166667,0.114705,0.118252,0.123619,0.128001,0.122623,0.130008,0.138916,0.151227,0.16125,0.177822,0.177926,0.193842,
0.0749438,0.162523,0.0913067,0.097047,0.102229,0.0946205,0.0904292,0.0984787,0.108653,0.116112,0.126604,0.140236,0.161965,0.0742575,0.161663,0.0915958,0.0978922,0.101801,0.0947308,0.092426,0.0989583,0.108272,0.117263,0.127909,0.139398,0.160766,0.0738453,0.160369,0.0894717,0.0960373,0.101552,0.0961715,0.0909023,0.0982113,0.108949,0.118568,0.127553,0.140252,0.159546,0.113353,0.166667,0.128571,0.136118,0.140096,0.134434,0.129324,0.141785,0.153584,0.165515,0.183071,0.182524,0.200869,
0.0780893,0.0901957,0.171936,0.10861,0.1174,0.109129,0.103568,0.102005,0.113625,0.121468,0.13009,0.144658,0.167514,0.078445,0.0900495,0.174044,0.108884,0.116637,0.109624,0.104794,0.103392,0.115331,0.119898,0.131123,0.145638,0.166466,0.0786462,0.089984,0.172401,0.111757,0.117189,0.109553,0.10511,0.103234,0.111575,0.119913,0.13007,0.143504,0.166355,0.117752,0.128827,0.166667,0.147502,0.155273,0.145715,0.143113,0.145912,0.158398,0.169816,0.187448,0.186923,0.20332,
0.0825478,0.0965795,0.108621,0.185492,0.129743,0.122567,0.118205,0.117452,0.117552,0.127831,0.138001,0.152825,0.175158,0.0809397,0.0960112,0.107132,0.184813,0.129679,0.126157,0.119189,0.117644,0.117332,0.126821,0.136424,0.149983,0.171259,0.0812633,0.0970855,0.108732,0.184492,0.127439,0.125368,0.119998,0.1161,0.1178,0.125997,0.13693,0.151452,0.172544,0.123,0.136702,0.147505,0.166667,0.165943,0.160888,0.156623,0.158297,0.162918,0.177109,0.192199,0.193106,0.208442,
0.0878223,0.101482,0.115786,0.127702,0.202782,0.135268,0.134408,0.134282,0.133313,0.132715,0.142558,0.156749,0.180068,0.0869472,0.100144,0.115099,0.129372,0.20397,0.137222,0.134655,0.132474,0.133626,0.133974,0.144709,0.158929,0.182011,0.086826,0.101756,0.113437,0.128847,0.201002,0.13644,0.135241,0.134386,0.132851,0.132289,0.141975,0.158799,0.179378,0.128114,0.140224,0.152091,0.164169,0.166667,0.175561,0.171174,0.174814,0.176488,0.184406,0.197589,0.197567,0.212466,
0.0802262,0.0924922,0.107784,0.123262,0.136643,0.224876,0.150851,0.148312,0.151091,0.149214,0.149352,0.169193,0.192316,0.0795098,0.0949463,0.10783,0.122962,0.136333,0.223273,0.150175,0.149587,0.150883,0.148832,0.153635,0.167294,0.191658,0.0801363,0.0937183,0.107867,0.122598,0.136112,0.224617,0.149081,0.149539,0.149796,0.149218,0.152905,0.165409,0.186941,0.123813,0.135685,0.148788,0.161679,0.172256,0.166667,0.185598,0.191129,0.194257,0.200294,0.206242,0.207092,0.220036,
0.0842173,0.0889505,0.101313,0.116021,0.133082,0.149008,0.248146,0.164197,0.170035,0.167634,0.168019,0.178507,0.200035,0.0841182,0.0891232,0.101173,0.115898,0.132781,0.147699,0.247512,0.16492,0.168833,0.169582,0.17012,0.177175,0.199301,0.0850993,0.088632,0.103772,0.116223,0.13206,0.148846,0.246672,0.165782,0.168269,0.167113,0.16847,0.176543,0.198744,0.127833,0.131155,0.143609,0.158634,0.171838,0.185572,0.166667,0.204543,0.212047,0.218938,0.226036,0.214581,0.229161,
0.0968513,0.0987012,0.101525,0.116536,0.133944,0.149762,0.168356,0.284625,0.193149,0.191894,0.195328,0.202505,0.20543,0.0960125,0.0995205,0.103813,0.117163,0.133232,0.1493,0.167599,0.287434,0.194125,0.193578,0.196887,0.202967,0.206588,0.0952465,0.0992408,0.101675,0.11744,0.133522,0.149999,0.166685,0.283873,0.192444,0.191255,0.195016,0.200489,0.206058,0.137466,0.142157,0.145384,0.15761,0.173776,0.188355,0.203997,0.166667,0.233265,0.238472,0.249573,0.239643,0.246635,
0.10698,0.111039,0.11702,0.122362,0.136808,0.153391,0.173531,0.196824,0.328019,0.221497,0.223311,0.233283,0.228846,0.108256,0.111868,0.114477,0.122476,0.133548,0.154508,0.173484,0.194834,0.331045,0.222142,0.223719,0.233567,0.230201,0.107524,0.112551,0.117918,0.119135,0.135895,0.152505,0.173708,0.194979,0.327498,0.222726,0.224821,0.232237,0.230233,0.150349,0.153407,0.157225,0.163207,0.180231,0.19296,0.213741,0.234955,0.166667,0.267152,0.276033,0.264966,0.272837,
0.119507,0.124402,0.12847,0.133909,0.141317,0.156362,0.17782,0.198848,0.226421,0.37362,0.242619,0.248409,0.24151,0.121556,0.125291,0.127401,0.133897,0.142425,0.156812,0.173829,0.198029,0.22524,0.374055,0.2427,0.250904,0.24181,0.120473,0.122589,0.129237,0.134019,0.141399,0.15891,0.176746,0.198607,0.226231,0.376372,0.243268,0.250039,0.239297,0.164989,0.167474,0.173314,0.176295,0.181255,0.199833,0.215762,0.242792,0.265337,0.166667,0.292769,0.282131,0.286395,
0.136311,0.140791,0.144792,0.150609,0.158241,0.165645,0.184988,0.20779,0.233099,0.248215,0.424593,0.271868,0.251482,0.136176,0.138833,0.1444,0.151384,0.15738,0.164148,0.183662,0.20972,0.232323,0.2482,0.422253,0.269475,0.254862,0.133023,0.139151,0.140604,0.147123,0.156271,0.16385,0.182476,0.206978,0.234456,0.246813,0.424393,0.270937,0.253081,0.176568,0.179326,0.187783,0.192309,0.199207,0.207762,0.224912,0.25105,0.278281,0.295827,0.166667,0.30437,0.306897,
0.15458,0.157336,0.16378,0.170141,0.178394,0.186118,0.195571,0.220031,0.247145,0.259349,0.275937,0.487333,0.269781,0.153502,0.156172,0.161443,0.168836,0.175812,0.188199,0.196393,0.218277,0.246457,0.261338,0.277675,0.485355,0.270483,0.154436,0.158329,0.163104,0.169456,0.177792,0.185122,0.194391,0.22024,0.245224,0.260419,0.276523,0.481039,0.273427,0.199651,0.203434,0.210514,0.215963,0.222803,0.234158,0.242327,0.258799,0.280872,0.292173,0.307449,0.166667,0.305259,
0.149804,0.156257,0.162429,0.165988,0.173832,0.179306,0.190754,0.202359,0.228931,0.240245,0.254956,0.274695,0.483468,0.151051,0.15528,0.158912,0.165672,0.171624,0.182251,0.191362,0.198906,0.230491,0.241439,0.25552,0.277875,0.48131,0.150858,0.156609,0.159676,0.163868,0.17266,0.182097,0.190357,0.200513,0.229218,0.242273,0.25688,0.276693,0.483983,0.19323,0.200125,0.204496,0.208687,0.21553,0.222357,0.228532,0.245353,0.27338,0.287939,0.308471,0.303865,0.166667,
0.142857,0.103341,0.108526,0.110906,0.113786,0.10938,0.112624,0.120499,0.125406,0.134561,0.145721,0.153947,0.171151,0.142414,0.0639255,0.0674676,0.0708264,0.0730287,0.0688381,0.0720615,0.0769787,0.0861383,0.0904604,0.0999027,0.111497,0.128004,0.140265,0.0620092,0.0663225,0.0693207,0.0726764,0.068386,0.0710394,0.0775142,0.0843115,0.0885043,0.100032,0.109205,0.122581,0.141212,0.0617518,0.0658097,0.0696041,0.0711672,0.066616,0.0695805,0.0779028,0.0881136,0.0983897,0.110161,0.109288,0.126764,
0.102182,0.142857,0.116016,0.122498,0.12633,0.118169,0.116117,0.121234,0.129232,0.137009,0.146188,0.156703,0.173233,0.0621827,0.146757,0.0786917,0.0810705,0.0878695,0.0786981,0.0751077,0.0792517,0.0883136,0.095194,0.103461,0.114235,0.128296,0.0628506,0.14583,0.0775819,0.081759,0.0874186,0.0792536,0.0738803,0.079894,0.0882599,0.0926799,0.0998034,0.112675,0.124915,0.0618987,0.146872,0.0750795,0.0815648,0.0833888,0.0771844,0.0723205,0.0819337,0.0920168,0.100359,0.113884,0.114525,0.127124,
0.107708,0.115847,0.142857,0.132759,0.138141,0.130926,0.127221,0.123649,0.133679,0.139804,0.148599,0.161141,0.176808,0.0680422,0.0772446,0.151313,0.092644,0.099884,0.0932319,0.0865153,0.0833658,0.0924637,0.099783,0.107681,0.116359,0.13277,0.0669145,0.0769918,0.14991,0.0940826,0.100139,0.0925861,0.086164,0.0835937,0.0909415,0.0984537,0.104528,0.118433,0.127062,0.0666266,0.0758743,0.153001,0.0930571,0.0975841,0.0895557,0.0851054,0.0834291,0.0949323,0.103429,0.117586,0.118368,0.135363,
0.111165,0.120419,0.134109,0.142857,0.148497,0.143725,0.141078,0.136869,0.137348,0.141833,0.152969,0.164013,0.181723,0.0701431,0.0826096,0.0934521,0.160528,0.110573,0.106842,0.100392,0.0947031,0.0954946,0.1028,0.111192,0.122442,0.138391,0.0686611,0.083511,0.0945593,0.160308,0.111268,0.106123,0.0995596,0.0967444,0.093988,0.100715,0.108202,0.120486,0.136162,0.070681,0.0812569,0.0921085,0.159688,0.109803,0.103628,0.100049,0.0956554,0.0991143,0.110769,0.124464,0.123541,0.138786,
0.113424,0.125502,0.138352,0.147328,0.142857,0.153046,0.15224,0.149764,0.148723,0.147174,0.158282,0.171779,0.187084,0.0748634,0.086867,0.0993235,0.111466,0.171013,0.117612,0.114445,0.110304,0.110466,0.108011,0.115149,0.126852,0.144243,0.0742272,0.0858905,0.100791,0.112217,0.172255,0.117126,0.113785,0.111195,0.107587,0.104325,0.115199,0.126665,0.138541,0.0735864,0.0852873,0.0984052,0.110345,0.172152,0.115756,0.110573,0.11101,0.112368,0.116123,0.12994,0.128286,0.141113,
0.109491,0.120184,0.130209,0.140839,0.15376,0.142857,0.16175,0.162132,0.161627,0.163559,0.158955,0.173441,0.19259,0.0687905,0.0790504,0.0915518,0.105227,0.117167,0.186039,0.126549,0.125279,0.126539,0.12363,0.122075,0.135395,0.152409,0.0674615,0.0785987,0.0911786,0.106073,0.117782,0.184118,0.129063,0.12498,0.123799,0.120692,0.12082,0.133449,0.148504,0.0661103,0.0785142,0.0925827,0.104852,0.117766,0.18855,0.127666,0.126982,0.127952,0.13138,0.135768,0.134277,0.149923,
0.114027,0.115717,0.127447,0.137392,0.152456,0.164306,0.142857,0.176635,0.178994,0.175968,0.174891,0.181863,0.200191,0.0713663,0.0754821,0.0859795,0.0991638,0.113428,0.12699,0.20184,0.139162,0.142608,0.139652,0.137167,0.142026,0.161335,0.0719313,0.073676,0.0867451,0.10068,0.113593,0.127146,0.20369,0.139959,0.140693,0.137106,0.13607,0.141276,0.15635,0.0724828,0.074808,0.0866066,0.10131,0.114901,0.128258,0.206786,0.144216,0.147937,0.146638,0.152598,0.141442,0.159174,
0.119912,0.120756,0.125065,0.134753,0.149142,0.1623,0.174883,0.142857,0.195685,0.195083,0.195005,0.198929,0.209668,0.0772571,0.0807753,0.0845187,0.0983921,0.11128,0.125565,0.13828,0.222953,0.160475,0.158659,0.158109,0.160778,0.171475,0.0769746,0.0807254,0.0836531,0.0975218,0.110105,0.12535,0.139439,0.224922,0.159926,0.15906,0.155933,0.160047,0.167695,0.0777839,0.0808737,0.0832127,0.0964358,0.110365,0.126304,0.138701,0.241986,0.166802,0.166438,0.172513,0.159792,0.167501,
0.128646,0.129492,0.132828,0.135895,0.147829,0.161773,0.179169,0.198033,0.142857,0.217545,0.216641,0.222955,0.231944,0.0856745,0.0893069,0.0913667,0.0970698,0.110021,0.126265,0.142058,0.158184,0.249524,0.185377,0.180724,0.187025,0.195773,0.0858333,0.089181,0.092764,0.0966367,0.108573,0.123455,0.142435,0.160785,0.250366,0.183612,0.184351,0.186276,0.190587,0.086297,0.0895292,0.091647,0.0957659,0.109649,0.125964,0.142788,0.163806,0.279822,0.191821,0.197421,0.1834,0.195246,
0.135326,0.13872,0.138424,0.145312,0.149182,0.160815,0.177632,0.194391,0.21995,0.142857,0.227769,0.233807,0.243767,0.0923243,0.0952973,0.0993791,0.102882,0.105787,0.122535,0.13908,0.159166,0.18252,0.280677,0.192924,0.200574,0.207671,0.0915639,0.0940412,0.0983895,0.10238,0.106017,0.121335,0.140057,0.156803,0.182261,0.281854,0.194268,0.19622,0.203552,0.0939092,0.0972483,0.0999844,0.103517,0.107881,0.125083,0.140601,0.163336,0.19045,0.323619,0.207522,0.198669,0.206017,
0.142044,0.144634,0.150116,0.152368,0.157322,0.163211,0.177683,0.195535,0.217607,0.227135,0.142857,0.243781,0.254825,0.0994732,0.104242,0.107141,0.112155,0.116989,0.122772,0.139335,0.157141,0.18179,0.19328,0.316745,0.21021,0.220364,0.100787,0.102035,0.10612,0.111997,0.116906,0.120823,0.137682,0.154406,0.183425,0.192842,0.319289,0.211921,0.219238,0.100857,0.104143,0.108448,0.1118,0.117025,0.123949,0.143591,0.16423,0.19081,0.207423,0.370157,0.208231,0.221519,
0.15332,0.159325,0.160017,0.166776,0.168521,0.174727,0.182212,0.20044,0.223038,0.230647,0.242025,0.142857,0.272784,0.110207,0.114213,0.117921,0.121451,0.127461,0.134925,0.142167,0.160665,0.187198,0.197582,0.211465,0.364119,0.242467,0.110229,0.113323,0.117505,0.122149,0.127044,0.131678,0.140222,0.159721,0.185579,0.197882,0.210382,0.365754,0.234531,0.114058,0.118243,0.122861,0.129904,0.134092,0.141239,0.147932,0.163936,0.188633,0.196933,0.211276,0.363466,0.239217,
0.168048,0.173047,0.175982,0.181413,0.186483,0.193487,0.199464,0.209927,0.232794,0.242787,0.254337,0.273527,0.142857,0.126607,0.13198,0.133021,0.137386,0.144459,0.150803,0.160905,0.170925,0.193775,0.205853,0.222273,0.238062,0.423357,0.126818,0.128287,0.134338,0.137752,0.144304,0.149871,0.159537,0.169707,0.195865,0.206797,0.219536,0.240095,0.426959,0.127236,0.130676,0.135069,0.138548,0.144251,0.151872,0.16055,0.173685,0.205024,0.220682,0.244528,0.240351,0.421857,
0.14402,0.0630776,0.0680347,0.0706133,0.0758407,0.0677674,0.0725576,0.0775565,0.0854728,0.092725,0.0990535,0.110603,0.124887,0.142857,0.103468,0.109442,0.110991,0.113543,0.10974,0.112882,0.117802,0.127089,0.13414,0.143042,0.15464,0.16917,0.143184,0.0607063,0.0674895,0.0703838,0.0747088,0.0658468,0.0708355,0.0774416,0.0840061,0.0902468,0.097391,0.107718,0.121949,0.144314,0.0615793,0.066989,0.0686372,0.071227,0.0667892,0.0699581,0.0795341,0.0891241,0.0983025,0.1123,0.109308,0.124173,
0.0639189,0.145226,0.0783628,0.0812467,0.0885062,0.0792976,0.0742245,0.0804791,0.0881351,0.095393,0.105229,0.113315,0.12907,0.101572,0.142857,0.116601,0.12203,0.124398,0.119423,0.113301,0.122554,0.130739,0.136212,0.145556,0.157583,0.172125,0.0620866,0.148276,0.0755903,0.0838777,0.0875627,0.0780469,0.0739421,0.0801694,0.0879063,0.0914223,0.0987448,0.114638,0.125702,0.06118,0.145634,0.0743146,0.0818332,0.0860784,0.0763407,0.0720135,0.0806675,0.0922583,0.100258,0.114092,0.113588,0.128418,
0.0673224,0.0758513,0.153154,0.0940239,0.0994434,0.0919353,0.0849234,0.0830769,0.0925174,0.0990941,0.106239,0.119352,0.132615,0.107347,0.117174,0.142857,0.132342,0.136859,0.132547,0.126732,0.124549,0.132126,0.140717,0.14947,0.160664,0.178104,0.0670509,0.0765691,0.151875,0.0942054,0.0990247,0.0912716,0.0846254,0.0837072,0.090773,0.0968516,0.105035,0.117636,0.128553,0.0666174,0.076964,0.152661,0.0918487,0.0959742,0.0892483,0.085108,0.0832522,0.0957561,0.10527,0.117081,0.117075,0.132609,
0.0709558,0.0838586,0.0947819,0.16136,0.111277,0.105114,0.100958,0.0974899,0.0964597,0.102697,0.111294,0.122501,0.137465,0.110896,0.123145,0.131242,0.142857,0.148271,0.14507,0.138908,0.134734,0.137203,0.144645,0.151909,0.166315,0.181176,0.071,0.0822612,0.0945843,0.159836,0.111256,0.105891,0.0990275,0.0969032,0.0955866,0.100966,0.111009,0.122355,0.133904,0.0699935,0.0830844,0.0920263,0.161753,0.10971,0.103535,0.0975825,0.0963726,0.0982448,0.110346,0.12147,0.120813,0.13713,
0.0739173,0.0877732,0.0989176,0.111376,0.171606,0.119053,0.114416,0.111355,0.108589,0.106239,0.115766,0.12864,0.145068,0.114864,0.126459,0.138113,0.149001,0.142857,0.155194,0.150889,0.149582,0.149105,0.14738,0.155835,0.169108,0.18678,0.0739258,0.0866969,0.100793,0.111612,0.172134,0.117905,0.114653,0.111819,0.108245,0.104451,0.114856,0.12837,0.139595,0.0741798,0.0871845,0.0979941,0.110484,0.172248,0.116523,0.111337,0.112609,0.112602,0.114484,0.13011,0.127853,0.143915,
0.06753,0.0779776,0.0919845,0.104582,0.118687,0.186658,0.126317,0.123687,0.126556,0.12209,0.119991,0.134019,0.150585,0.107573,0.118423,0.130807,0.141877,0.153883,0.142857,0.163278,0.163796,0.162612,0.160985,0.161146,0.175575,0.191615,0.0675269,0.0800735,0.0925005,0.104192,0.117487,0.186339,0.125202,0.125754,0.124,0.122122,0.119478,0.134589,0.146374,0.0683935,0.0782069,0.0922869,0.105066,0.117889,0.189366,0.125128,0.128512,0.127564,0.131522,0.136021,0.132675,0.151072,
0.072428,0.0748899,0.0867772,0.0996109,0.11414,0.127409,0.204006,0.139198,0.141344,0.138475,0.136265,0.139324,0.160189,0.113383,0.113652,0.125924,0.139113,0.149349,0.162853,0.142857,0.174484,0.178604,0.178283,0.176073,0.182507,0.201002,0.0721205,0.0740936,0.0868281,0.0994802,0.115276,0.127146,0.203526,0.139558,0.14064,0.136973,0.137412,0.139729,0.154687,0.0714007,0.0738487,0.0865206,0.100285,0.113233,0.127112,0.20814,0.141065,0.146821,0.149826,0.1541,0.140205,0.159329,
0.0772564,0.0805953,0.0838809,0.0959055,0.111018,0.125971,0.139043,0.224592,0.160456,0.160195,0.155268,0.161529,0.168496,0.118815,0.122818,0.12386,0.13572,0.149957,0.164778,0.175985,0.142857,0.196849,0.195366,0.194286,0.199765,0.208668,0.0776191,0.0796022,0.0842745,0.0959526,0.110597,0.124958,0.140437,0.22415,0.158944,0.157326,0.156749,0.159794,0.16508,0.077088,0.081615,0.0835376,0.0961975,0.109881,0.125861,0.141129,0.240471,0.163754,0.168334,0.174166,0.159388,0.167277,
0.0859108,0.0883182,0.0931607,0.0956766,0.108772,0.125756,0.141345,0.161507,0.249608,0.184317,0.182899,0.184756,0.194651,0.12722,0.13103,0.134105,0.136947,0.149167,0.162075,0.180129,0.196439,0.142857,0.219333,0.216364,0.223523,0.235358,0.0856337,0.0906212,0.0918903,0.095146,0.10913,0.125674,0.141442,0.160244,0.249637,0.180672,0.181796,0.185579,0.192696,0.0858298,0.0890318,0.0921976,0.0961013,0.110718,0.125668,0.14441,0.164696,0.282535,0.19196,0.194324,0.186404,0.19588,
0.0926281,0.0954875,0.0992742,0.101242,0.1072,0.123449,0.137402,0.156607,0.183727,0.28293,0.192254,0.199379,0.205652,0.135422,0.136949,0.139316,0.143211,0.149049,0.162224,0.177646,0.194547,0.218678,0.142857,0.22872,0.232605,0.242588,0.0915087,0.0954544,0.0986082,0.102045,0.108398,0.122433,0.13916,0.15647,0.183596,0.283245,0.191995,0.199693,0.205396,0.0920902,0.0952875,0.0995491,0.103074,0.107589,0.123004,0.141716,0.161869,0.190406,0.323222,0.209416,0.196969,0.204232,
0.101276,0.103061,0.106825,0.111181,0.115594,0.123113,0.138633,0.158064,0.182455,0.19222,0.320066,0.209759,0.223369,0.144749,0.146774,0.150948,0.153234,0.155393,0.161442,0.178156,0.19474,0.220025,0.228301,0.142857,0.242706,0.255657,0.0992617,0.10194,0.105654,0.111834,0.116774,0.124386,0.139851,0.15717,0.183583,0.191932,0.320562,0.211451,0.219965,0.101451,0.104944,0.110404,0.111672,0.118853,0.123051,0.141539,0.166318,0.192266,0.207961,0.370948,0.20947,0.222004,
0.109746,0.112917,0.116812,0.122719,0.127854,0.136191,0.142338,0.161152,0.187247,0.197684,0.209599,0.365744,0.240206,0.154961,0.156779,0.160478,0.164573,0.169049,0.17545,0.181829,0.198268,0.223943,0.230202,0.246006,0.142857,0.270163,0.110754,0.113075,0.115101,0.12374,0.127114,0.135567,0.140092,0.159085,0.184302,0.198573,0.208903,0.366169,0.236685,0.115443,0.118581,0.127279,0.129524,0.134661,0.140487,0.150507,0.163921,0.18765,0.197913,0.209294,0.366163,0.238294,
0.125958,0.128658,0.135883,0.138146,0.144436,0.152618,0.15956,0.171281,0.195991,0.207142,0.220795,0.23662,0.424446,0.169991,0.173176,0.176601,0.179593,0.186143,0.193871,0.201306,0.209505,0.231245,0.242724,0.254078,0.273501,0.142857,0.12666,0.127668,0.133184,0.135772,0.144406,0.151556,0.159969,0.169528,0.19548,0.208537,0.223137,0.238247,0.426088,0.128145,0.13024,0.134409,0.140114,0.144338,0.153918,0.159969,0.175323,0.203808,0.221539,0.242121,0.239251,0.424946,
0.140524,0.0622205,0.0683465,0.0709907,0.0741342,0.0680428,0.0710464,0.0774562,0.0861292,0.0921145,0.102023,0.111703,0.126233,0.140976,0.0629558,0.067729,0.0708255,0.0724843,0.0677154,0.071758,0.0755774,0.0860076,0.091152,0.0998733,0.110518,0.124955,0.142857,0.100909,0.1064,0.109559,0.113187,0.106613,0.111194,0.117075,0.124418,0.132283,0.140657,0.15235,0.166442,0.143748,0.0611235,0.0675527,0.0705654,0.0717115,0.0661249,0.0700111,0.0790508,0.0895801,0.0986518,0.109073,0.107912,0.12551,
0.0621658,0.146912,0.0772015,0.0827913,0.0877002,0.0782945,0.0743884,0.0807026,0.0875066,0.0951936,0.103461,0.11495,0.128828,0.06127,0.146549,0.0769289,0.0832093,0.0861839,0.0787794,0.073477,0.0800772,0.0884842,0.0938029,0.102712,0.112359,0.130501,0.10091,0.142857,0.114614,0.119548,0.124247,0.116871,0.114159,0.118654,0.127293,0.135564,0.141831,0.155792,0.169341,0.0629403,0.147275,0.0752102,0.0799276,0.0845474,0.0768709,0.0734287,0.0824459,0.0916662,0.101868,0.113297,0.112202,0.128472,
0.0672654,0.0778315,0.151797,0.0940644,0.100377,0.0931866,0.0873378,0.0841288,0.0923206,0.0970555,0.10584,0.117479,0.132401,0.0664076,0.0779298,0.152168,0.0935233,0.0987237,0.092394,0.0865306,0.0836188,0.0925729,0.0985451,0.10603,0.117857,0.134059,0.105406,0.115973,0.142857,0.131803,0.134328,0.128657,0.125139,0.121832,0.131761,0.13688,0.147027,0.157042,0.171342,0.067956,0.075667,0.150791,0.0917209,0.0979697,0.0905709,0.0840811,0.0844877,0.0951783,0.104778,0.118319,0.116056,0.13045,
0.071501,0.0835226,0.095051,0.160011,0.111561,0.103806,0.101741,0.0957506,0.0967855,0.102525,0.110785,0.121881,0.138338,0.0695447,0.0835346,0.0942329,0.161159,0.111479,0.10611,0.0995103,0.0954924,0.0955408,0.104023,0.109822,0.123552,0.139317,0.109937,0.120939,0.128758,0.142857,0.148123,0.142514,0.13651,0.135588,0.134465,0.140167,0.15078,0.163098,0.173918,0.0713515,0.082834,0.0939428,0.15826,0.110052,0.104271,0.0964695,0.0959658,0.0998809,0.110979,0.121281,0.120908,0.137687,
0.0746742,0.0853976,0.0994261,0.11193,0.169855,0.116291,0.111954,0.110623,0.109213,0.106265,0.116042,0.127996,0.145824,0.073919,0.0878026,0.099053,0.111403,0.172625,0.118228,0.114409,0.110803,0.109811,0.107909,0.113017,0.12761,0.14396,0.11103,0.124022,0.136602,0.146486,0.142857,0.152317,0.150887,0.148882,0.147463,0.145738,0.154152,0.165508,0.180861,0.0726316,0.0861026,0.099996,0.109092,0.17178,0.116093,0.112736,0.111662,0.112064,0.115444,0.129077,0.127134,0.142278,
0.0670208,0.0791883,0.093794,0.105541,0.118765,0.188296,0.125347,0.124209,0.125394,0.122383,0.121618,0.133604,0.152305,0.0671207,0.0776555,0.0917093,0.106128,0.118977,0.185969,0.126466,0.124167,0.125811,0.122666,0.120887,0.134324,0.151826,0.106297,0.118473,0.12885,0.141244,0.154764,0.142857,0.161002,0.162272,0.161628,0.157949,0.162059,0.173125,0.189015,0.0662134,0.0796686,0.0915812,0.10356,0.120219,0.189886,0.128043,0.127107,0.130029,0.128949,0.135393,0.133403,0.149948,
0.072455,0.0749164,0.0881062,0.0986871,0.113311,0.125989,0.202944,0.13996,0.142593,0.13891,0.135957,0.140721,0.159891,0.0719654,0.0746436,0.0862896,0.100491,0.114679,0.125393,0.203435,0.137607,0.140581,0.137292,0.137076,0.140113,0.158698,0.109905,0.113446,0.125588,0.137896,0.149703,0.160765,0.142857,0.176353,0.175438,0.1757,0.174833,0.180741,0.198648,0.0720361,0.074348,0.0862975,0.101678,0.113851,0.128331,0.206148,0.143534,0.147181,0.146958,0.154893,0.139802,0.15778,
0.0776382,0.0801877,0.0830317,0.0964094,0.110965,0.123008,0.138231,0.225017,0.161164,0.156967,0.158428,0.159845,0.168215,0.0772599,0.0792813,0.0835728,0.0961046,0.109543,0.124129,0.138709,0.224436,0.159191,0.156066,0.155432,0.158857,0.168868,0.116019,0.119916,0.124409,0.13441,0.148016,0.161525,0.173824,0.142857,0.19249,0.19015,0.192908,0.197086,0.206558,0.0776857,0.0792608,0.082567,0.0964892,0.111194,0.125139,0.139017,0.242303,0.162879,0.164923,0.172164,0.159494,0.166703,
0.0850261,0.0876143,0.0897892,0.0943385,0.107198,0.125112,0.140577,0.160887,0.249331,0.182816,0.183338,0.186248,0.196851,0.0835329,0.0870385,0.0903343,0.0957782,0.108142,0.125685,0.142039,0.159307,0.249918,0.182654,0.181757,0.186759,0.196253,0.126266,0.12655,0.130942,0.132541,0.147419,0.162399,0.175984,0.193421,0.142857,0.21563,0.216899,0.223638,0.233702,0.0862985,0.0867141,0.0904584,0.0947871,0.109074,0.124472,0.142873,0.165403,0.279469,0.189809,0.198725,0.18631,0.190881,
0.0909171,0.0917551,0.0952602,0.101155,0.105814,0.120223,0.139596,0.157774,0.182446,0.282473,0.191773,0.196523,0.20407,0.0905026,0.094022,0.0965698,0.102257,0.106319,0.120656,0.137511,0.157554,0.184059,0.281693,0.192691,0.198761,0.207001,0.131475,0.134912,0.138175,0.139328,0.145395,0.159867,0.173659,0.192464,0.214945,0.142857,0.226539,0.232196,0.243699,0.0906328,0.0942076,0.0972826,0.101864,0.107601,0.123201,0.139983,0.160914,0.189341,0.323295,0.207427,0.197594,0.206823,
0.0968164,0.101547,0.104672,0.110917,0.113937,0.118414,0.136371,0.154241,0.183936,0.191807,0.319043,0.210449,0.220923,0.0988628,0.101375,0.103958,0.109315,0.114763,0.120027,0.136991,0.156021,0.182694,0.192188,0.32078,0.211031,0.218761,0.140757,0.143486,0.145383,0.151501,0.156045,0.158602,0.173278,0.19355,0.217207,0.226684,0.142857,0.243687,0.254103,0.0984577,0.101652,0.105946,0.111576,0.116521,0.119915,0.139993,0.164114,0.192143,0.207067,0.372653,0.209698,0.221145,
0.107495,0.110373,0.115369,0.119903,0.12446,0.133123,0.139287,0.159944,0.184709,0.196605,0.210321,0.371692,0.240199,0.109583,0.111589,0.115223,0.118755,0.123851,0.131428,0.138283,0.160545,0.187907,0.197136,0.212739,0.368779,0.239548,0.151894,0.15396,0.157744,0.161615,0.164997,0.173901,0.181685,0.196208,0.222801,0.232302,0.245529,0.142857,0.270198,0.112169,0.11759,0.120272,0.125815,0.13348,0.140053,0.147116,0.165889,0.184863,0.197183,0.209452,0.371987,0.23668,
0.127784,0.129599,0.134495,0.136416,0.143823,0.150979,0.158232,0.170556,0.196034,0.207493,0.220881,0.239177,0.425376,0.127117,0.129994,0.13306,0.137236,0.145171,0.150289,0.158815,0.169698,0.195924,0.205221,0.222066,0.239652,0.426077,0.167434,0.171258,0.174007,0.17883,0.186473,0.194018,0.200117,0.208295,0.234313,0.244449,0.255544,0.272134,0.142857,0.126836,0.130127,0.134459,0.139891,0.144612,0.151644,0.162309,0.175512,0.205284,0.221557,0.242983,0.238033,0.427303,
0.140402,0.061897,0.0669347,0.0704004,0.0732322,0.0673036,0.0704313,0.0782051,0.0854537,0.0943962,0.101087,0.111893,0.132171,0.143019,0.0602408,0.0662584,0.0696852,0.0740568,0.0674785,0.0726478,0.0776977,0.087165,0.0934692,0.103264,0.110707,0.131128,0.14297,0.0623535,0.0663966,0.070015,0.0738908,0.0669985,0.0709459,0.0766903,0.0848252,0.0895907,0.100398,0.112135,0.127988,0.142857,0.100798,0.103884,0.109744,0.113614,0.106931,0.112293,0.119591,0.132923,0.140223,0.154295,0.15578,0.170541,
0.059224,0.148548,0.076308,0.0826027,0.0855654,0.0784449,0.0745039,0.0814578,0.0902035,0.095207,0.105221,0.115563,0.137142,0.0614526,0.148167,0.0761793,0.0818634,0.0858712,0.0788543,0.0739873,0.080621,0.0893363,0.0970142,0.104828,0.113855,0.13622,0.060849,0.144208,0.0763355,0.0807369,0.0868747,0.0796502,0.0739361,0.0795122,0.0883628,0.0942916,0.103699,0.114612,0.13087,0.0999848,0.142857,0.114443,0.120877,0.124371,0.11867,0.114301,0.123161,0.135394,0.144343,0.15789,0.159364,0.173566,
0.0653696,0.0754662,0.153048,0.094437,0.0997573,0.090531,0.0851746,0.0837423,0.0926422,0.100565,0.109221,0.119815,0.143041,0.0649653,0.0761654,0.153212,0.0922499,0.10024,0.0912142,0.0860936,0.0835337,0.091858,0.0978686,0.107432,0.118707,0.14068,0.0656657,0.0767631,0.151819,0.0933858,0.100057,0.0939094,0.0848958,0.0833679,0.0906778,0.0987596,0.106112,0.119375,0.135765,0.104953,0.114598,0.142857,0.128966,0.135694,0.131573,0.125055,0.127619,0.136249,0.14912,0.162217,0.162497,0.174397,
0.0704154,0.0825582,0.0938427,0.162372,0.112376,0.104169,0.0994295,0.0972929,0.0969781,0.105258,0.114165,0.124348,0.146047,0.0689016,0.0818541,0.0927703,0.161263,0.109806,0.106066,0.101018,0.0971472,0.0949422,0.102726,0.113344,0.123483,0.147665,0.0693786,0.080895,0.0923436,0.161791,0.110887,0.10623,0.0986671,0.097795,0.0950529,0.103469,0.1115,0.122749,0.142858,0.107778,0.119513,0.130518,0.142857,0.146137,0.143632,0.137066,0.136533,0.141403,0.154038,0.167372,0.167728,0.182788,
0.0717416,0.0854185,0.0972851,0.110531,0.174094,0.117644,0.115664,0.111689,0.110747,0.108055,0.119064,0.130669,0.153974,0.0727544,0.0850225,0.0982895,0.110137,0.172585,0.116641,0.113423,0.110405,0.109832,0.108559,0.118065,0.131294,0.153693,0.0730399,0.085397,0.0984905,0.110457,0.173791,0.11601,0.116173,0.109491,0.108267,0.108344,0.115314,0.130224,0.151504,0.111713,0.122661,0.135403,0.146527,0.142857,0.1548,0.149291,0.151078,0.153388,0.157688,0.172888,0.170257,0.185091,
0.0660849,0.0768743,0.091347,0.103317,0.114931,0.188299,0.125547,0.125098,0.12488,0.124755,0.124009,0.139737,0.161004,0.0652013,0.0770772,0.0907022,0.104181,0.117758,0.188385,0.125582,0.126794,0.126359,0.124206,0.124041,0.137583,0.161742,0.0659398,0.0771206,0.0899928,0.103972,0.116393,0.18966,0.126039,0.126337,0.124617,0.12304,0.121508,0.136877,0.157535,0.107006,0.119691,0.129408,0.142908,0.1519,0.142857,0.162193,0.168293,0.166992,0.170413,0.181453,0.179531,0.189874,
0.0710185,0.0726464,0.0849587,0.0994673,0.111783,0.126765,0.208799,0.139183,0.142143,0.141035,0.141612,0.145847,0.169833,0.0699218,0.0702851,0.0847959,0.0970948,0.111312,0.124879,0.208366,0.13996,0.142859,0.139535,0.139814,0.147234,0.16817,0.069684,0.0726098,0.0834985,0.098356,0.11174,0.125525,0.208766,0.140303,0.142535,0.139235,0.139929,0.146968,0.16633,0.113777,0.114611,0.125595,0.13811,0.151799,0.161603,0.142857,0.179376,0.186442,0.187511,0.193886,0.183555,0.198545,
0.0775999,0.0802076,0.0835758,0.0961628,0.112191,0.12779,0.141875,0.241434,0.166018,0.162894,0.164028,0.170267,0.176719,0.077352,0.0814624,0.0854056,0.0973011,0.110928,0.127634,0.142273,0.241127,0.167104,0.163405,0.164136,0.169759,0.175897,0.0777254,0.0807859,0.0845048,0.0963575,0.111562,0.127185,0.143016,0.242019,0.164909,0.162488,0.163211,0.167907,0.174141,0.121253,0.12201,0.125329,0.137164,0.150007,0.165974,0.181549,0.142857,0.202274,0.209812,0.216116,0.20525,0.212012,
0.0884455,0.0902689,0.0956714,0.0989011,0.114133,0.128962,0.147687,0.16756,0.281639,0.191866,0.193261,0.198184,0.197727,0.088056,0.0922653,0.0942602,0.100482,0.112841,0.128656,0.144353,0.168539,0.27922,0.188908,0.192425,0.199935,0.1959,0.0896086,0.0916902,0.0959667,0.0996883,0.112118,0.129845,0.146676,0.166984,0.278167,0.190346,0.191665,0.19868,0.196069,0.132773,0.133197,0.137107,0.142718,0.155814,0.169035,0.184949,0.205742,0.142857,0.232658,0.241797,0.2331,0.238462,
0.098904,0.101313,0.10574,0.109073,0.114919,0.128327,0.149024,0.169035,0.192442,0.322995,0.207195,0.215065,0.204428,0.098129,0.102002,0.105887,0.110941,0.114995,0.129185,0.149054,0.169612,0.193935,0.321781,0.20799,0.216757,0.203664,0.09825,0.101304,0.104463,0.110303,0.115257,0.129648,0.150138,0.168173,0.191862,0.321612,0.207648,0.212421,0.203873,0.142195,0.145978,0.14871,0.154428,0.15621,0.171703,0.187391,0.208935,0.235131,0.142857,0.25789,0.249236,0.25215,
0.112315,0.115277,0.117498,0.122613,0.128825,0.13732,0.152319,0.17648,0.199438,0.209428,0.37352,0.234567,0.217525,0.110896,0.113628,0.117444,0.123275,0.128928,0.137407,0.151837,0.171661,0.200101,0.211222,0.368919,0.234813,0.21692,0.110313,0.112689,0.119836,0.123225,0.129743,0.134924,0.151646,0.172687,0.198687,0.210483,0.371462,0.234189,0.217863,0.154544,0.158198,0.160569,0.165884,0.171054,0.176657,0.193808,0.21572,0.240296,0.258975,0.142857,0.266694,0.271316,
0.126798,0.128751,0.133956,0.141188,0.145414,0.154225,0.16355,0.186356,0.212599,0.222781,0.237986,0.43345,0.23682,0.126778,0.129457,0.133493,0.140175,0.144221,0.154417,0.16332,0.185766,0.209548,0.224644,0.23722,0.42937,0.237305,0.124913,0.129496,0.134372,0.139719,0.144122,0.151897,0.162999,0.184584,0.209505,0.223735,0.24028,0.431082,0.23684,0.17552,0.179037,0.182896,0.186929,0.191989,0.202501,0.210827,0.225651,0.247766,0.257053,0.272245,0.142857,0.272627,
0.126362,0.130731,0.132583,0.136271,0.143229,0.149095,0.158439,0.17039,0.196352,0.205706,0.217877,0.236217,0.424685,0.124493,0.127944,0.131368,0.138061,0.142975,0.152187,0.159463,0.169914,0.194315,0.205719,0.219468,0.23888,0.425845,0.124865,0.128478,0.132662,0.136219,0.142674,0.15071,0.157983,0.169903,0.194448,0.205006,0.219599,0.236476,0.425156,0.172428,0.17243,0.17798,0.179598,0.185873,0.190922,0.199351,0.211386,0.238559,0.253025,0.270982,0.268849,0.142857,
0.125,0.0930456,0.095939,0.100254,0.104891,0.0967078,0.100519,0.106216,0.113941,0.119214,0.1283,0.137079,0.151689,0.132701,0.0540881,0.0584044,0.0620466,0.0648619,0.0582461,0.0597727,0.0656131,0.0738733,0.0779683,0.0846087,0.094126,0.105566,0.13285,0.0532026,0.0580698,0.0617999,0.0642621,0.0577705,0.059545,0.0641625,0.0698558,0.0752091,0.0817806,0.0938917,0.102654,0.133331,0.051706,0.0570826,0.0599114,0.0619437,0.0565266,0.0591763,0.0664418,0.0735952,0.0838176,0.0946751,0.0921575,0.105945,
0.0926229,0.125,0.106415,0.11075,0.113356,0.107183,0.10283,0.108886,0.116285,0.120105,0.129276,0.13862,0.154825,0.0528827,0.134418,0.0671381,0.0719255,0.0754926,0.0691713,0.0617124,0.0681009,0.0754414,0.0795317,0.0868001,0.096138,0.110463,0.0550068,0.136181,0.0669699,0.0717167,0.0758246,0.0685573,0.062268,0.0661415,0.0719522,0.0771852,0.0843614,0.0964169,0.10485,0.0527271,0.136745,0.0654979,0.0702983,0.0743603,0.066959,0.0615078,0.0677942,0.0773082,0.0860696,0.0961923,0.0962709,0.108981,
0.0968965,0.104851,0.125,0.119822,0.125823,0.116955,0.113163,0.109902,0.117164,0.125262,0.132375,0.140833,0.158102,0.057515,0.0676381,0.138237,0.0830432,0.0881442,0.0801738,0.0755706,0.0686049,0.0774159,0.0834009,0.0908135,0.100056,0.112746,0.0588909,0.0662875,0.140816,0.083769,0.0885896,0.0795739,0.074385,0.070135,0.0757089,0.0806371,0.0891077,0.0986443,0.107548,0.0581924,0.0650302,0.140564,0.0808258,0.0869741,0.078743,0.0715782,0.0709966,0.0799932,0.0881793,0.0995036,0.0992284,0.112058,
0.0989583,0.110372,0.119614,0.125,0.135583,0.127481,0.127721,0.120504,0.120494,0.126465,0.135574,0.143948,0.161385,0.0606656,0.0721219,0.0838346,0.143937,0.0991697,0.0922115,0.0862817,0.0823124,0.0805687,0.085659,0.0929472,0.102413,0.117032,0.0608163,0.0728705,0.0834649,0.145193,0.100248,0.0915154,0.0854732,0.0810102,0.0780567,0.0853608,0.0913038,0.100972,0.111928,0.0592099,0.072401,0.0803483,0.144459,0.0973262,0.0906229,0.0845348,0.0829056,0.0832687,0.0924315,0.104543,0.104547,0.117371,
0.102923,0.116223,0.12703,0.13484,0.125,0.139568,0.135566,0.132134,0.131481,0.131097,0.138567,0.148518,0.165376,0.0642228,0.0744686,0.0871464,0.0994158,0.152107,0.102714,0.0992854,0.0946135,0.0923024,0.0906698,0.0983979,0.108049,0.121937,0.0637401,0.0768971,0.0876284,0.098912,0.153114,0.102288,0.0993981,0.0936773,0.0904702,0.0883947,0.0942293,0.10759,0.11793,0.0637947,0.0748775,0.0859821,0.0977733,0.153019,0.102082,0.0987779,0.0955761,0.0955302,0.0954341,0.109071,0.107323,0.120904,
0.0969745,0.106101,0.115844,0.130249,0.138484,0.125,0.145801,0.145144,0.144686,0.142573,0.146766,0.153707,0.168857,0.0566807,0.0679015,0.0800281,0.0919231,0.104765,0.162744,0.108616,0.108231,0.107114,0.103245,0.102897,0.112699,0.128116,0.0565734,0.067544,0.079352,0.0929468,0.103763,0.16225,0.111175,0.105604,0.104769,0.100342,0.0991287,0.11201,0.12462,0.058566,0.0672364,0.0794225,0.0911946,0.102665,0.16723,0.108711,0.108243,0.109186,0.10891,0.115548,0.112433,0.127585,
0.101196,0.103647,0.112019,0.124518,0.135564,0.146118,0.125,0.156359,0.158056,0.155614,0.155999,0.16066,0.176576,0.0611288,0.0641739,0.0742038,0.0869691,0.0989235,0.110089,0.178042,0.120161,0.121831,0.117314,0.115361,0.118805,0.135518,0.059518,0.0622839,0.0741258,0.0853075,0.0964459,0.110642,0.173481,0.120546,0.119962,0.117727,0.113473,0.117335,0.131115,0.059174,0.0619152,0.0739829,0.084931,0.0987209,0.111757,0.180074,0.123355,0.127386,0.12707,0.131021,0.118432,0.134813,
0.106466,0.105565,0.11101,0.122281,0.132284,0.146481,0.157331,0.125,0.17584,0.175255,0.172946,0.176746,0.18544,0.0646151,0.0677072,0.070398,0.0822002,0.0954205,0.109218,0.119119,0.193551,0.14244,0.135627,0.133427,0.137986,0.144396,0.06485,0.0671807,0.0698497,0.0817763,0.0947868,0.110123,0.120296,0.193049,0.136638,0.133178,0.131406,0.135307,0.139974,0.0642721,0.0667994,0.0684308,0.0806216,0.0951917,0.107621,0.120101,0.210547,0.142003,0.143792,0.147134,0.1345,0.144075,
0.114226,0.117492,0.118583,0.119398,0.132472,0.145727,0.158113,0.174995,0.125,0.194301,0.195051,0.196365,0.208062,0.0725026,0.0750179,0.0785059,0.0797167,0.0923522,0.107845,0.121759,0.138235,0.214496,0.156949,0.158144,0.160735,0.170009,0.0726243,0.0745963,0.0778031,0.0808144,0.0937665,0.105421,0.121872,0.135054,0.216943,0.157629,0.157681,0.157833,0.164027,0.0730741,0.0741569,0.0761915,0.081275,0.0932088,0.10805,0.123214,0.141724,0.243414,0.162908,0.168765,0.162844,0.168198,
0.120164,0.121763,0.123797,0.127028,0.129669,0.142799,0.15597,0.171624,0.193235,0.125,0.202302,0.207785,0.219607,0.0777186,0.0796229,0.0829901,0.0852306,0.0905966,0.104392,0.119329,0.135593,0.159478,0.241975,0.167904,0.171487,0.178808,0.075298,0.0802133,0.081033,0.0863297,0.0885668,0.103272,0.11819,0.135558,0.158569,0.244373,0.168731,0.170027,0.179163,0.0780947,0.0804365,0.0837503,0.0849797,0.0907955,0.104497,0.120088,0.140384,0.164128,0.28259,0.179992,0.172293,0.180897,
0.129066,0.129266,0.131752,0.135148,0.139423,0.142084,0.158128,0.174052,0.195747,0.201949,0.125,0.216189,0.228768,0.0844353,0.0889434,0.0895133,0.0942948,0.0982363,0.101938,0.11541,0.135058,0.15799,0.168932,0.274678,0.183559,0.192493,0.0851439,0.0868913,0.0883545,0.0942456,0.0966854,0.102008,0.11703,0.134094,0.158077,0.166634,0.277399,0.18168,0.192291,0.0859192,0.0867652,0.0906393,0.0960385,0.100865,0.105725,0.119991,0.139006,0.16527,0.180726,0.329556,0.182056,0.194366,
0.137476,0.141895,0.140758,0.144796,0.148623,0.153706,0.160562,0.174003,0.199636,0.206162,0.219644,0.125,0.242727,0.0940964,0.0968847,0.0995855,0.103925,0.106817,0.113334,0.1213,0.136451,0.160902,0.16935,0.182159,0.31918,0.21028,0.0930607,0.0970097,0.0987246,0.102486,0.106317,0.113529,0.118548,0.136186,0.160735,0.169586,0.183235,0.320364,0.209,0.097549,0.100632,0.106896,0.109803,0.114166,0.11976,0.126777,0.142864,0.161993,0.171515,0.180309,0.320351,0.209296,
0.152955,0.155105,0.156268,0.159469,0.16593,0.170765,0.176791,0.187213,0.204623,0.216201,0.226257,0.241026,0.125,0.107259,0.110763,0.113672,0.11784,0.121256,0.127167,0.135147,0.143397,0.168567,0.180268,0.192675,0.211713,0.375847,0.106463,0.110185,0.113678,0.117252,0.122488,0.127972,0.135944,0.145058,0.166751,0.178493,0.193007,0.210984,0.376544,0.108449,0.110869,0.114839,0.119293,0.124357,0.130238,0.14058,0.150507,0.176906,0.192899,0.211768,0.209707,0.379748,
0.133981,0.0540113,0.0586432,0.0617185,0.0639418,0.057607,0.060248,0.0647842,0.071688,0.0785904,0.0851323,0.0939078,0.107214,0.125,0.0922822,0.0963663,0.0988131,0.102455,0.0974145,0.100561,0.104131,0.112671,0.117991,0.125561,0.136476,0.153199,0.131941,0.0532548,0.0576381,0.0619777,0.0645999,0.0584555,0.0599243,0.0638665,0.0703655,0.0752298,0.0825544,0.0922103,0.102349,0.13236,0.0528487,0.0560689,0.0598531,0.0622039,0.0557985,0.0601073,0.0653233,0.0760085,0.0820415,0.0932843,0.0930501,0.107627,
0.0540873,0.135224,0.0688001,0.0728811,0.0753151,0.067651,0.0635261,0.0670652,0.0752699,0.0796735,0.0863923,0.0962949,0.111127,0.094011,0.125,0.104797,0.110927,0.115331,0.105596,0.101679,0.107991,0.114873,0.121734,0.130185,0.139868,0.155008,0.0538135,0.13417,0.0684057,0.0727125,0.0749592,0.0679779,0.0621627,0.0660608,0.0724069,0.0784331,0.0840102,0.0962189,0.104755,0.0539556,0.134352,0.066694,0.0694129,0.0729806,0.0657686,0.0606615,0.0666915,0.0754015,0.0852362,0.0959697,0.0957128,0.109848,
0.0583858,0.0678938,0.138857,0.0838608,0.0898318,0.0796828,0.0732868,0.0707776,0.0785144,0.084711,0.0898939,0.100014,0.11203,0.0960763,0.105684,0.125,0.119565,0.125528,0.119509,0.113249,0.108868,0.117909,0.122223,0.134351,0.143383,0.155622,0.0573639,0.0677692,0.139535,0.0841794,0.0884819,0.079982,0.0719818,0.0675882,0.0755852,0.0799587,0.0862574,0.0991576,0.10757,0.0573024,0.066148,0.138505,0.0812601,0.085822,0.0817102,0.0714413,0.0714429,0.0798547,0.089552,0.100986,0.0990919,0.11276,
0.0621808,0.0725123,0.0806125,0.145582,0.0975691,0.0915597,0.087593,0.0831406,0.0809459,0.0867493,0.0921272,0.104376,0.116359,0.100928,0.109582,0.118104,0.125,0.134331,0.128156,0.12435,0.121243,0.120368,0.129479,0.13454,0.14444,0.160055,0.0599953,0.0725599,0.0830809,0.145588,0.0973555,0.0922966,0.0864498,0.0802239,0.0790571,0.0852037,0.0912817,0.102587,0.112933,0.0597155,0.0716427,0.0826629,0.146429,0.0965698,0.0904567,0.0851898,0.0830579,0.0828023,0.0919167,0.104075,0.102282,0.117313,
0.0632479,0.0760404,0.0889109,0.0986397,0.152923,0.103837,0.0986272,0.0941505,0.0925157,0.0892316,0.0969743,0.10855,0.122227,0.103129,0.115264,0.124114,0.135348,0.125,0.140331,0.136658,0.132908,0.133641,0.128395,0.138406,0.149365,0.166806,0.0640685,0.0759562,0.0889392,0.0997693,0.151594,0.102296,0.0988417,0.093146,0.0927867,0.0874485,0.0958357,0.10803,0.11565,0.0630411,0.0748677,0.0861703,0.0981173,0.152971,0.100642,0.0980818,0.0935976,0.0952074,0.0970054,0.107458,0.106749,0.122069,
0.0577915,0.0689876,0.0806653,0.0920851,0.10237,0.163758,0.111274,0.10906,0.109496,0.102511,0.102012,0.113764,0.128584,0.0950488,0.104585,0.117465,0.127457,0.139036,0.125,0.148851,0.146118,0.14489,0.14222,0.142739,0.153833,0.171991,0.056974,0.0681376,0.0807132,0.0923697,0.103319,0.161666,0.110474,0.104899,0.105682,0.10041,0.100296,0.113031,0.125297,0.057879,0.0667734,0.0797991,0.0913188,0.101085,0.163324,0.109116,0.110062,0.109095,0.109885,0.114558,0.11368,0.127547,
0.0598315,0.0617781,0.072727,0.086919,0.0977695,0.109302,0.177213,0.118742,0.120931,0.119392,0.116108,0.118839,0.135981,0.100817,0.102193,0.111889,0.124063,0.13477,0.14727,0.125,0.154762,0.158848,0.155651,0.156506,0.158866,0.176689,0.0599068,0.0630728,0.0742495,0.0861768,0.0999761,0.111016,0.175354,0.118362,0.120183,0.117737,0.11565,0.117437,0.131129,0.0606851,0.0620493,0.072821,0.0839574,0.0999758,0.110143,0.180591,0.123784,0.127759,0.127941,0.131062,0.118922,0.136764,
0.0645328,0.0671498,0.0707462,0.0804044,0.093571,0.10928,0.119993,0.193423,0.140443,0.134778,0.136284,0.137285,0.144282,0.107103,0.107117,0.109108,0.119979,0.132846,0.143664,0.15648,0.125,0.174431,0.17177,0.171533,0.176012,0.184275,0.0640715,0.0683509,0.0701387,0.0813454,0.0938181,0.108364,0.119298,0.193888,0.13791,0.134041,0.13131,0.136133,0.142015,0.0653732,0.065761,0.0697942,0.0810801,0.0954724,0.107987,0.122385,0.208268,0.142217,0.144723,0.147761,0.134843,0.143497,
0.0724846,0.0738651,0.0765302,0.0802304,0.0925296,0.108361,0.122746,0.138158,0.216056,0.159534,0.159408,0.160988,0.16825,0.11407,0.114364,0.117866,0.121872,0.132051,0.147063,0.157534,0.174129,0.125,0.195062,0.19339,0.197097,0.20676,0.071987,0.075338,0.0767932,0.0806797,0.0930967,0.105131,0.121799,0.136914,0.216638,0.156644,0.157769,0.160898,0.168788,0.0721749,0.076198,0.0772775,0.0822536,0.0924604,0.108779,0.122135,0.142421,0.244886,0.166156,0.168377,0.160593,0.169658,
0.0783197,0.0807052,0.0831297,0.0860043,0.088736,0.10193,0.118458,0.137287,0.159809,0.243121,0.168338,0.171832,0.178494,0.120253,0.121781,0.124158,0.126681,0.131306,0.141171,0.156125,0.17004,0.195783,0.125,0.201257,0.208856,0.214198,0.0777165,0.0813118,0.0828361,0.0860145,0.0892045,0.102613,0.117538,0.133666,0.160997,0.245281,0.167305,0.16997,0.17735,0.0795164,0.0817032,0.0834025,0.0866219,0.0925014,0.104904,0.119298,0.140494,0.165798,0.282185,0.181357,0.172121,0.178383,
0.086158,0.0859755,0.0895443,0.0934234,0.0966297,0.101866,0.115766,0.133835,0.156695,0.166242,0.272512,0.183282,0.194887,0.127724,0.130864,0.132886,0.135735,0.137871,0.143974,0.156288,0.172483,0.193594,0.20039,0.125,0.216771,0.230252,0.0856971,0.0885305,0.0906931,0.0927468,0.0966991,0.101902,0.116274,0.133437,0.158829,0.166256,0.277296,0.182885,0.191042,0.0862325,0.0894478,0.0910688,0.0953973,0.0995025,0.103876,0.120588,0.140204,0.166999,0.177908,0.32711,0.183067,0.192954,
0.0927743,0.0959445,0.0998628,0.102911,0.108708,0.113566,0.119207,0.136175,0.159287,0.172509,0.183171,0.317793,0.211638,0.137648,0.139218,0.142031,0.146386,0.150595,0.154648,0.162005,0.176167,0.197968,0.207549,0.219356,0.125,0.244333,0.0936073,0.0962165,0.0991189,0.101856,0.10748,0.112508,0.120813,0.137412,0.162264,0.16959,0.182076,0.319843,0.210672,0.10028,0.102737,0.104619,0.107472,0.113969,0.119506,0.126261,0.138986,0.163235,0.17077,0.181582,0.319394,0.20888,
0.108249,0.110705,0.112982,0.117189,0.121981,0.128816,0.133535,0.144458,0.170492,0.179756,0.194519,0.21049,0.375068,0.151052,0.153937,0.157545,0.160666,0.167074,0.170988,0.177971,0.18662,0.208828,0.215697,0.22584,0.242306,0.125,0.106893,0.109223,0.111283,0.118717,0.120853,0.129431,0.135316,0.143048,0.165758,0.178287,0.192726,0.210127,0.378265,0.109628,0.111794,0.113379,0.117143,0.124233,0.129879,0.140524,0.149672,0.17565,0.192921,0.213212,0.210862,0.376772,
0.132822,0.0540028,0.0587693,0.059596,0.0648543,0.056888,0.0605101,0.0636799,0.0732661,0.0768367,0.0850978,0.0932703,0.106012,0.132372,0.0533376,0.0583234,0.0615958,0.0629377,0.0582066,0.0611931,0.0663159,0.0722108,0.0766987,0.08518,0.0922283,0.107477,0.125,0.0900788,0.094042,0.0973755,0.0990875,0.0930171,0.0982417,0.10152,0.108998,0.114733,0.122123,0.136037,0.145666,0.13353,0.0515518,0.0559907,0.0592333,0.0610464,0.0558179,0.0582079,0.0648206,0.0749729,0.0840466,0.0940542,0.094164,0.107514,
0.0540103,0.135661,0.0674696,0.0722839,0.0780944,0.0668452,0.0609393,0.0662181,0.0736109,0.0806194,0.0873372,0.0974486,0.109262,0.0527603,0.136215,0.067979,0.073004,0.075406,0.0672768,0.0620725,0.0665873,0.0747562,0.079995,0.0876418,0.0966506,0.110197,0.0921649,0.125,0.102354,0.10866,0.111554,0.102996,0.098889,0.103514,0.111018,0.115943,0.123417,0.135337,0.1485,0.0533255,0.135393,0.0664918,0.0706354,0.0738799,0.0662715,0.0610457,0.0672177,0.0758924,0.0853688,0.0958345,0.0968517,0.109127,
0.0585219,0.0683969,0.137743,0.0813061,0.086331,0.080515,0.0725644,0.0718346,0.0772912,0.0821643,0.0902822,0.098272,0.114491,0.0579187,0.0676402,0.13979,0.0823504,0.0883851,0.0805653,0.0743256,0.0706132,0.0769566,0.08383,0.0901354,0.098586,0.114171,0.0941292,0.10428,0.125,0.117832,0.124288,0.114898,0.110748,0.106868,0.114934,0.119803,0.128788,0.13968,0.150414,0.0576655,0.0669606,0.141109,0.0811088,0.0864958,0.0784181,0.0713354,0.071066,0.0784857,0.087917,0.0989661,0.100209,0.111474,
0.0613089,0.0725453,0.0821209,0.144065,0.0983485,0.0895173,0.0859948,0.0817031,0.0806047,0.0866226,0.09312,0.104386,0.11792,0.0610306,0.0720143,0.0822316,0.144372,0.099824,0.0931984,0.0866264,0.0813464,0.0815024,0.0851805,0.0938791,0.102483,0.116091,0.0984589,0.107297,0.117476,0.125,0.130429,0.124921,0.120507,0.116049,0.116285,0.120619,0.130974,0.142975,0.15475,0.0602493,0.0706269,0.0803916,0.143188,0.0969874,0.0919478,0.0829561,0.0815246,0.0832654,0.091671,0.104054,0.10182,0.117267,
0.064735,0.0768841,0.0870751,0.0981029,0.150955,0.102234,0.0983696,0.0955319,0.0926337,0.0889207,0.0980637,0.109483,0.123622,0.0639786,0.0751762,0.0879878,0.0978859,0.154083,0.101268,0.0966009,0.0948791,0.0923984,0.08986,0.0968265,0.108686,0.120257,0.100337,0.111089,0.121324,0.131772,0.125,0.136892,0.133887,0.129444,0.128339,0.125166,0.135358,0.14756,0.158753,0.0630792,0.0747847,0.087105,0.0951067,0.152185,0.10186,0.0983579,0.093835,0.0955238,0.0950448,0.107771,0.10695,0.120365,
0.0576258,0.067624,0.0793974,0.0914141,0.103049,0.162853,0.111064,0.107742,0.106,0.103681,0.102744,0.111667,0.128344,0.0570659,0.0681889,0.0786732,0.0909995,0.101948,0.163729,0.110324,0.108552,0.107128,0.104231,0.102272,0.113143,0.129651,0.0943058,0.106518,0.115962,0.126279,0.135958,0.125,0.145024,0.14207,0.142045,0.13758,0.13838,0.153714,0.166433,0.0573098,0.0659341,0.0799695,0.0910439,0.101006,0.165591,0.109134,0.109889,0.1103,0.110978,0.115145,0.112694,0.12686,
0.0602974,0.0619414,0.0727248,0.0855328,0.0993716,0.110782,0.176653,0.119232,0.120067,0.118741,0.1147,0.119582,0.136222,0.0600222,0.0627513,0.0724233,0.0867729,0.0959865,0.110265,0.178379,0.120565,0.119946,0.117468,0.116919,0.119755,0.136275,0.0970282,0.0999942,0.107275,0.121288,0.134169,0.142125,0.125,0.151505,0.156172,0.152324,0.153838,0.158155,0.173203,0.0597285,0.0606452,0.0722779,0.0857155,0.0979589,0.111111,0.182127,0.122333,0.12447,0.123331,0.128456,0.117011,0.136032,
0.0648603,0.0668871,0.0691764,0.0808041,0.0928502,0.108327,0.119529,0.194467,0.136798,0.135286,0.135303,0.136896,0.142252,0.0647347,0.0665731,0.0692604,0.081859,0.0942069,0.107112,0.116712,0.192329,0.136734,0.136671,0.134752,0.134697,0.146215,0.102621,0.102661,0.105391,0.116241,0.128482,0.141523,0.153694,0.125,0.170575,0.167715,0.168576,0.173612,0.183886,0.0616108,0.0661125,0.0689563,0.0799105,0.0924224,0.106714,0.120485,0.210514,0.144007,0.144041,0.145838,0.136821,0.144013,
0.0707517,0.0719648,0.0781877,0.07797,0.0933489,0.105626,0.119188,0.137271,0.216484,0.158824,0.157903,0.160233,0.168339,0.071343,0.0729116,0.0772117,0.078777,0.093891,0.104755,0.120537,0.138755,0.215095,0.15749,0.156178,0.160449,0.169702,0.109298,0.111055,0.113752,0.116964,0.128383,0.142978,0.155885,0.170479,0.125,0.190528,0.192371,0.198933,0.204355,0.0698079,0.0724547,0.0764857,0.0788072,0.0910058,0.105642,0.121253,0.138962,0.245329,0.165834,0.169187,0.161941,0.166988,
0.0756792,0.0784653,0.0792085,0.0839868,0.089341,0.10052,0.116585,0.132666,0.1583,0.24285,0.168344,0.172393,0.180935,0.0756961,0.0777468,0.0800465,0.084121,0.0864612,0.100709,0.115341,0.133247,0.157764,0.244717,0.166893,0.172114,0.182583,0.113885,0.119058,0.120205,0.123558,0.125887,0.137681,0.150847,0.170476,0.192016,0.125,0.201151,0.205347,0.215296,0.0747707,0.07691,0.08038,0.0851231,0.0885235,0.10245,0.118443,0.138296,0.163072,0.283138,0.178743,0.17153,0.177568,
0.0828257,0.0864094,0.0869153,0.0905049,0.0953356,0.0996008,0.115539,0.130722,0.15699,0.167181,0.274422,0.182416,0.194847,0.0816903,0.0846055,0.0874257,0.091178,0.0954183,0.100066,0.115725,0.131783,0.15654,0.167033,0.277484,0.183221,0.192992,0.122568,0.123843,0.125329,0.130399,0.136548,0.139566,0.151562,0.170548,0.191944,0.20035,0.125,0.218196,0.230904,0.0808929,0.084955,0.089581,0.0937906,0.0968282,0.103507,0.11706,0.137727,0.164222,0.177546,0.331215,0.182028,0.18957,
0.0906983,0.093755,0.0970706,0.0999405,0.105666,0.110509,0.11638,0.135227,0.159448,0.169468,0.184352,0.325839,0.210935,0.0909515,0.0942894,0.0946085,0.100654,0.10557,0.110518,0.115894,0.133795,0.161544,0.170608,0.182297,0.323875,0.20952,0.132392,0.134212,0.136336,0.141644,0.146744,0.151665,0.156705,0.173034,0.199273,0.208033,0.218007,0.125,0.246057,0.0957608,0.0979153,0.10436,0.106171,0.112652,0.11611,0.12407,0.140832,0.162101,0.171456,0.182951,0.327392,0.210117,
0.108498,0.108375,0.112956,0.116918,0.121947,0.129396,0.13303,0.143894,0.169999,0.180184,0.190454,0.209571,0.373207,0.106898,0.109385,0.112581,0.118856,0.122476,0.127342,0.134316,0.143679,0.168889,0.179386,0.192234,0.210475,0.376078,0.150015,0.153225,0.156349,0.156737,0.163434,0.170415,0.175702,0.18412,0.207706,0.218921,0.227054,0.247595,0.125,0.105938,0.111842,0.114658,0.117799,0.123883,0.130373,0.136819,0.150697,0.178168,0.193978,0.208889,0.21018,0.37799,
0.131653,0.0536656,0.0564121,0.060233,0.0643095,0.0576896,0.0590772,0.0650162,0.0713833,0.0773393,0.0861697,0.0947967,0.113979,0.132995,0.0524946,0.0577534,0.0611208,0.0638933,0.0562206,0.0600756,0.0655707,0.0732074,0.0776656,0.0862856,0.0944987,0.116328,0.132206,0.0533487,0.0564925,0.0602317,0.0620397,0.0566946,0.059852,0.0635297,0.0718469,0.0759492,0.082264,0.0949685,0.108404,0.125,0.0895093,0.0947133,0.0985107,0.100694,0.0944785,0.101222,0.1064,0.11841,0.126208,0.136906,0.136536,0.151257,
0.0536924,0.134811,0.0659184,0.0733855,0.0744966,0.0669572,0.0625549,0.0662821,0.0753836,0.080393,0.0876347,0.0972185,0.117925,0.052692,0.135279,0.0668648,0.0719115,0.0746563,0.0676537,0.0626142,0.066044,0.0746211,0.0807026,0.0888483,0.0991496,0.117264,0.052176,0.136477,0.0663571,0.071022,0.0743772,0.0664244,0.061558,0.0662478,0.0741112,0.0786474,0.0864672,0.0983049,0.11227,0.0894101,0.125,0.104368,0.108921,0.111556,0.105946,0.102637,0.108867,0.118858,0.128902,0.138493,0.141244,0.153334,
0.0567782,0.0666941,0.139474,0.0807428,0.086842,0.0804649,0.0727825,0.0694769,0.0774265,0.0827665,0.0922562,0.100362,0.119436,0.0555518,0.06503,0.138853,0.0814496,0.0862582,0.0804471,0.0740963,0.069456,0.0786647,0.0829823,0.0905993,0.10068,0.122018,0.0570505,0.0660066,0.138652,0.0806537,0.0863308,0.0792889,0.0715315,0.0680366,0.0758346,0.082278,0.0885416,0.100465,0.115582,0.0933087,0.103295,0.125,0.118602,0.122319,0.116538,0.111213,0.112648,0.122223,0.130595,0.140559,0.145463,0.156775,
0.0599597,0.0700109,0.0803502,0.144816,0.09668,0.0933481,0.0847879,0.081484,0.0820431,0.0868752,0.0955735,0.105206,0.127345,0.0598134,0.0707038,0.0817098,0.145135,0.0964903,0.0915069,0.0863953,0.0835976,0.0815435,0.087875,0.0960818,0.104085,0.126951,0.0610086,0.0709183,0.0810856,0.145097,0.0952111,0.0922804,0.0852497,0.0792939,0.0796114,0.084809,0.0921843,0.104435,0.121999,0.0969275,0.107412,0.116327,0.125,0.132917,0.129032,0.123201,0.123176,0.124873,0.135022,0.148395,0.148017,0.159314,
0.0613252,0.0754337,0.086221,0.0982041,0.152935,0.101279,0.0996462,0.0962591,0.0933691,0.0901056,0.0998913,0.110872,0.131626,0.0626395,0.0744849,0.0865251,0.0968255,0.15274,0.102292,0.098593,0.0932762,0.0914933,0.0928318,0.0998723,0.108843,0.131598,0.0621395,0.074431,0.0854922,0.097295,0.153691,0.101408,0.097291,0.0945717,0.0919327,0.0891316,0.0966641,0.108705,0.126856,0.100696,0.111201,0.124545,0.133997,0.125,0.138955,0.135077,0.135822,0.136715,0.137827,0.148835,0.149932,0.163031,
0.055285,0.0668836,0.0779457,0.0909157,0.101617,0.167322,0.110738,0.108811,0.106153,0.104627,0.106541,0.116072,0.137782,0.055811,0.0664713,0.0786761,0.0913673,0.101822,0.166235,0.111513,0.109956,0.109227,0.104376,0.10526,0.116153,0.136534,0.0551862,0.0670502,0.0774533,0.0915759,0.101114,0.165232,0.108413,0.106872,0.107116,0.104585,0.10265,0.11716,0.134333,0.0960928,0.10593,0.117751,0.12928,0.138452,0.125,0.146591,0.148141,0.149424,0.152127,0.155584,0.157969,0.167438,
0.0588763,0.060315,0.0705683,0.0835167,0.0965849,0.108833,0.18042,0.118633,0.122217,0.118827,0.121358,0.123327,0.144529,0.0589704,0.0607131,0.0710795,0.0854428,0.0965331,0.109172,0.180338,0.11982,0.122756,0.11859,0.118842,0.12301,0.144339,0.0581734,0.0597657,0.0710512,0.0830207,0.0968542,0.109093,0.180111,0.116865,0.120605,0.117844,0.117241,0.123455,0.142187,0.0992954,0.100837,0.111468,0.125492,0.135843,0.1483,0.125,0.159052,0.165109,0.168111,0.173002,0.16199,0.177222,
0.066625,0.0685567,0.0706246,0.0814539,0.0952738,0.109581,0.121682,0.209859,0.14302,0.141372,0.140647,0.146571,0.151815,0.0657635,0.0667944,0.071038,0.0812188,0.0933087,0.109455,0.120662,0.208707,0.141171,0.140548,0.139627,0.143417,0.15112,0.0647786,0.0681747,0.0695475,0.0815524,0.0927974,0.108342,0.121036,0.209454,0.141564,0.138668,0.137888,0.144593,0.147857,0.106653,0.109055,0.112046,0.12343,0.13471,0.14726,0.159397,0.125,0.180444,0.187415,0.190336,0.182092,0.185326,
0.0737072,0.076455,0.0800777,0.0824083,0.0966846,0.11123,0.12653,0.144569,0.24407,0.165235,0.167508,0.17099,0.170755,0.0746234,0.0778583,0.0803161,0.0834965,0.0962752,0.111122,0.124907,0.143976,0.241331,0.16784,0.165327,0.173789,0.169583,0.0738198,0.0775716,0.0808078,0.0842901,0.0956911,0.110384,0.123235,0.14259,0.242133,0.166788,0.165873,0.172637,0.167743,0.117903,0.118692,0.123205,0.124699,0.137629,0.151277,0.164643,0.184281,0.125,0.21034,0.214853,0.207958,0.20967,
0.0819292,0.0843198,0.0889663,0.091451,0.0970544,0.108267,0.126896,0.143097,0.168658,0.282869,0.179732,0.187374,0.17799,0.0840563,0.0847941,0.0879064,0.0924509,0.0972748,0.109107,0.125751,0.145303,0.171341,0.280941,0.181609,0.187648,0.177974,0.0828151,0.0858079,0.0871802,0.0917428,0.0957404,0.109951,0.126631,0.143147,0.166678,0.284521,0.179868,0.186597,0.177286,0.124911,0.127166,0.13193,0.134043,0.138191,0.152573,0.165717,0.185767,0.207729,0.125,0.230647,0.221359,0.226317,
0.0947669,0.0976333,0.100141,0.102895,0.10662,0.114335,0.128009,0.150466,0.172384,0.183312,0.326332,0.204745,0.1902,0.0945195,0.0951984,0.0991152,0.103903,0.107414,0.114662,0.128053,0.149472,0.172694,0.182412,0.328536,0.205367,0.187696,0.0949261,0.0943831,0.0996581,0.103958,0.107874,0.11567,0.128646,0.147442,0.171761,0.182523,0.330063,0.203686,0.188922,0.136414,0.140699,0.143511,0.146395,0.151877,0.157704,0.172068,0.189902,0.216953,0.2304,0.125,0.238073,0.241793,
0.107194,0.109204,0.113596,0.114244,0.123462,0.129901,0.138527,0.157782,0.181599,0.193276,0.210009,0.386798,0.207059,0.106556,0.110894,0.112261,0.117588,0.121587,0.128756,0.138895,0.15551,0.181693,0.192993,0.210938,0.384779,0.206746,0.109073,0.109325,0.113484,0.117211,0.12173,0.129786,0.138086,0.157903,0.182189,0.193874,0.208672,0.383991,0.207344,0.155475,0.157191,0.162544,0.166162,0.172247,0.177347,0.186317,0.20154,0.220234,0.228337,0.238618,0.125,0.241501,
0.107539,0.111372,0.114042,0.116611,0.121697,0.129673,0.135689,0.143993,0.168101,0.17743,0.190103,0.20772,0.374746,0.106668,0.10882,0.113973,0.117435,0.121179,0.129197,0.136304,0.145706,0.169066,0.179284,0.191054,0.207625,0.375076,0.106477,0.108987,0.112402,0.115187,0.120733,0.1279,0.13495,0.144099,0.167158,0.180749,0.191262,0.208884,0.379037,0.151504,0.151369,0.157387,0.158954,0.163815,0.168727,0.174707,0.186606,0.210521,0.224058,0.243244,0.241528,0.125,
};

static const double B[100] = {
0.320729000000000,0.243751000000000,0.219295000000000,0.211277000000000,0.208065000000000,0.200000000000000,0.193113000000000,0.187837000000000,0.182771000000000,0.179755000000000,//10% 1.5	0.62
0.176973000000000,0.173300000000000,0.170780000000000,0.169093000000000,0.166735000000000,0.164722000000000,0.161449000000000,0.159023000000000,0.156991000000000,0.155218000000000,//20% 1.2	0.58
0.152234000000000,0.149212000000000,0.146273000000000,0.144684000000000,0.143413000000000,0.141756000000000,0.139864000000000,0.138776000000000,0.137351000000000,0.136099000000000,//30% 1.1	0.55
0.135271000000000,0.134161000000000,0.132592000000000,0.131077000000000,0.129195000000000,0.127366000000000,0.125614000000000,0.125000000000000,0.125000000000000,0.123246000000000,//40% 1.0	0.52
0.122014000000000,0.121100000000000,0.120115000000000,0.119297000000000,0.118409000000000,0.117456000000000,0.116264000000000,0.114854000000000,0.113709000000000,0.112326000000000,//50% 0.9	0.50
0.111136000000000,0.110277000000000,0.109187000000000,0.108547000000000,0.107710000000000,0.107052000000000,0.106285000000000,0.104929000000000,0.103664000000000,0.102974000000000,
0.102244000000000,0.101264000000000,0.0994589000000000,0.0986758000000000,0.0978505000000000,0.0970914000000000,0.0965027000000000,0.0956094000000000,0.0944090000000000,0.0933889000000000,
0.0922768000000000,0.0914941000000000,0.0904278000000000,0.0890271000000000,0.0876249000000000,0.0864087000000000,0.0851027000000000,0.0841166000000000,0.0830312000000000,0.0816872000000000,//8
0.0808169000000000,0.0799668000000000,0.0789741000000000,0.0777718000000000,0.0762435000000000,0.0751453000000000,0.0736423000000000,0.0725248000000000,0.0714069000000000,0.0696174000000000,
0.0677468000000000,0.0665721000000000,0.0656330000000000,0.0638947000000000,0.0625928000000000,0.0606736000000000,0.0596655000000000,0.0578462000000000,0.0564236000000000,0.0523970000000000//10
};

static const char Response[10][16] = {
	"fold \n",
	"check \n",
	"call \n",
	"raise 40 \n",
	"raise 80 \n",
	"raise 160 \n",
	"raise 320 \n",
	"raise 640 \n",
	"raise 1280 \n",
	"all_in \n",
};

int m_socket_id = -1;
ofstream fout;
int pot = 0;
int alive_player_num = 7;
int bet_player_num;
bool done = false;
bool first_inquire = true;
bool bluffed = false;
Stage stage;
int my_id;
int mode;
int max_bet;
int fold_num;
int wait_num;
int raise_num;
int round_num;
int bluff_money = 0;
Card cards[7];
Player players[8];

int main(int argc, char *argv[]) {
	if (argc != 6) {
		fout << "Usage: ./%s server_ip server_port my_ip my_port my_id\n" << argv[0] << endl;
		return -1;
	}

	/* 获取输入参数 */
	in_addr_t server_ip = inet_addr(argv[1]);
	in_port_t server_port = htons(atoi(argv[2]));
	in_addr_t my_ip = inet_addr(argv[3]);
	in_port_t my_port = htons(atoi(argv[4]));
	my_id = atoi(argv[5]);
	mode = my_id%10;
	//
	srand((unsigned)time(0));
	fout.open(argv[5]);
	/* 创建socket */
	m_socket_id = socket(AF_INET, SOCK_STREAM, 0);
	if (m_socket_id < 0) {
		fout << "init socket failed!\n";
		return -1;
	}

	/* 设置socket选项，地址重复使用，防止程序非正常退出，下次启动时bind失败 */
	int is_reuse_addr = 1;
	setsockopt(m_socket_id, SOL_SOCKET, SO_REUSEADDR, (const char*)&is_reuse_addr, sizeof(is_reuse_addr));

	/* 绑定指定ip和port，不然会被server拒绝 */
	struct sockaddr_in my_addr;
	bzero(&my_addr, sizeof(my_addr));
	my_addr.sin_family = AF_INET;
	my_addr.sin_addr.s_addr = my_ip;
	my_addr.sin_port = my_port;
	if (bind(m_socket_id, (struct sockaddr*)&my_addr, sizeof(my_addr))) {
		fout << "bind failed!\n";
		return -1;
	}

	/* 连接server */
	struct sockaddr_in server_addr;
	bzero(&server_addr, sizeof(server_addr));
	server_addr.sin_family = AF_INET;
	server_addr.sin_addr.s_addr = server_ip;
	server_addr.sin_port = server_port;
	while (connect(m_socket_id, (struct sockaddr*)&server_addr, sizeof(server_addr)) < 0) {
		usleep(100 * 1000); /* sleep 100ms, 然后重试，保证无论server先起还是后起，都不会有问�?*/
	}

	/* 向server注册 */
	char reg_msg[50] = { '\0' };
	snprintf(reg_msg, sizeof(reg_msg) - 1, "reg: %d %s need_notify \n", my_id, "tt");
	send(m_socket_id, reg_msg, strlen(reg_msg) + 1, 0);

	/* 接收server消息，进入游�?*/
	while (1) {
		char buffer[1024] = { '\0' };
		int length = recv(m_socket_id, buffer, sizeof(buffer) - 1, 0);
		if (length > 0) {
			/* on_server_message返回-1（比如收到game over消息），则跳出循环，关闭socket，安全退出程�?*/
			int i = 0;
			while (true) {
				int cnt1 = 0,cnt2 = 0, msg_ix = 0;
				char msg[1024] = { '\0' };
				for (; i != length; ++i) {
					msg[msg_ix++] = buffer[i];
					if (buffer[i] == '/') {
						cnt1++;
					}
					if (buffer[i] == '\n') {
						cnt2++;
					}
					if (cnt1 == 2 && buffer[i] == '\n') {
						break;
					}
					msg[msg_ix] = '\0';
				}
				//if (cnt2 > 2) {
					i++;
					if (-1 == server_msg_process(msg_ix, msg)) {
						/* 关闭socket */
						close(m_socket_id);

						return 0;
					}
					if (i == length) {
						break;
					}
				/* } else {
					length = msg_ix;
					length += recv(m_socket_id, msg + msg_ix, sizeof(msg) - msg_ix, 0);
					if (-1 == server_msg_process(msg_ix, msg)) {
						// 关闭socket 
						close(m_socket_id);

						return 0;
					}
					break;
				} */
			}
		}
	}
}
/* 处理server的消息*/
int server_msg_process(int size, const char* msg) {
	//fout << msg << "\n" << endl;
	if (NULL != strstr(msg, "game-over")) {
		return -1;
	}
	if (NULL != strstr(msg, "seat/")) {
		stage = BEGIN;
		done = false;
		return seat_msg_process(size, msg);
	}
	/*if (NULL != strstr(msg, "pot-win/")) {
		stage = END;
		done = true;
		return pot_win_msg_process(size, msg);
	}*/
	if (NULL != strstr(msg, "hold/")) {
		stage = HOLD;
		return card_msg_process(size, msg, 0, 2);
	}
	if (NULL != strstr(msg, "flop/")) {
		stage = FLOP;
		return card_msg_process(size, msg, 2, 5);
	}
	if (NULL != strstr(msg, "turn/")) {
		stage = TURN;
		return card_msg_process(size, msg, 5, 6);
	}
	if (NULL != strstr(msg, "river/")) {
		stage = RIVER;
		return card_msg_process(size, msg, 6, 7);
	}
	
	if (NULL != strstr(msg, "inquire/")) {
		return inquire_msg_process(size, msg);
	}
	if (NULL != strstr(msg, "notify/")) {
		return bet_msg_process(size, msg);
	}
	
	return 1;
}

int inquire_msg_process(int size, const char* msg) {
	int ret = bet_msg_process(size,msg);
	if (!done&&stage > BEGIN&&stage < END) {
		max_bet = 0;
		wait_num = 0;
		fold_num = 0;
		raise_num = 0;
		for (int i = 0; i != 8; ++i) {
			if (players[i].bet > max_bet)
				max_bet = players[i].bet;
			if (players[i].state == WAIT)
				wait_num++;
			if (players[i].state == FOLD)
				fold_num++;
			if (players[i].state == RAISE)
				raise_num++;
			if (players[i].state == ALL_IN)
				raise_num += 2;
		}
		if (fold_num == alive_player_num)
			return check_mode();
		switch (mode) {
 		case 1:
			ret = playerNumBased_mode();
			break;
		case 2:	
			ret = playerNumBased_mode();
			break;
		case 3:	
			ret = playerNumBased_mode();
			break;	
		case 4:	
			ret = playerNumBased_mode();//
			break;
		case 5:	
			ret = playerNumBased_mode();
			break;
		case 6:	
			ret = playerNumBased_mode();
			break; 
		case 7:		
			ret = playerNumBased_mode();
			break;	
		case 8:	
			ret = stagebased_mode();
			break;
		} 	
	}
	if (first_inquire)
		first_inquire = false;
	return ret;
}
//10% 1.5	0.62
//20% 1.2	0.58
//30% 1.1	0.55
//40% 1.0	0.52
//50% 0.9	0.50
int stagebased_mode() {
	int ret;
	if(first_inquire) {
		if (alive_player_num > 3&&max_bet < 380)
			ret = first_inquire_handler();
		else 
			ret = my_mode_1();
	} else {
		if (alive_player_num > 3&&max_bet < 380)
			ret = prob_decision_mode_2_n();
		else 
			ret = my_mode_1();
	}
	return ret;
}

int betBased_mode() {
	/*int ret;
	if (alive_player_num > 3&&max_bet < 380)
		ret = prob_decision_mode_2_n();
	else 
		ret = my_mode_1();
	return ret;*/
	if (first_inquire&&alive_player_num > 4&&alive_player_num/2 + 2 <= bet_player_num&&pot == 60) {
		//fout<<"first_inquire_handler:	\nbet_player_num:		"<<bet_player_num<<endl;
		if (get_winProb(alive_player_num) > 1.0/(alive_player_num + 1.0)) {
			bluffed = true;
			return raise_mode(0);
		} else if (max_bet == players[my_id].bet) {
			return check_mode();
		} else {
			return fold_mode();
		}
	}
	double i_pot = 0.0;
	for (int i = 0; i != 8; ++i) {
		if (players[i].state == WAIT)
			if (stage == HOLD)
				i_pot += 1.0/(1.0 + bet_player_num) * ((double)max_bet - players[i].bet);
			else
				i_pot += 1.5/(1.0 + bet_player_num) * ((double)max_bet - players[i].bet);
	}
	double Ret = ((double)max_bet - players[my_id].bet)/((double)max_bet - players[my_id].bet + pot + i_pot);
	int fixed_player_num = bluffed ? alive_player_num : bet_player_num;//改动
	double winProb = get_winProb(bet_player_num);
	double RetRate = winProb/Ret;
	double fold_prob;
	double call_prob;
	if (Ret == 0) {
		Ret = ((double)max_bet - players[my_id].bet + 40)/((double)max_bet - players[my_id].bet + pot + i_pot + 40);
		RetRate = winProb/Ret;
		if (RetRate < 0.8) {			
			call_prob = 0.95;
		} else if (RetRate < 1.0) {
			call_prob = 0.8;
		} else if (RetRate < 1.3) {
			call_prob = 0.5;
		} else  {
			call_prob = 0.3;
		}
		fold_prob = 0.0;
		if (winProb < 1.5/(1.0 + bet_player_num))
			call_prob += 0.5;
		else if (winProb > 2.5/(1.0 + bet_player_num))
			call_prob -= 0.3;
	} else {
		if (RetRate < 0.8) {
			fold_prob = 0.95;
			call_prob = 0.0;
			if (((double)max_bet - players[my_id].bet) >= 3*(players[my_id].bet+40.0)&&winProb < 2.5/(1+bet_player_num)) 
				fold_prob = 1.0;
		} else if (RetRate < 1.0) {
			fold_prob = 0.8;
			call_prob = 0.05;
			if ((((double)max_bet - players[my_id].bet) <= 3*(players[my_id].bet+40.0)&&winProb > 1.5/(1+bet_player_num))||(winProb > 2.5/(1+bet_player_num))) {
				fold_prob -= 0.2;
				call_prob += 0.1;
			} else if (((double)max_bet - players[my_id].bet) >= 3*(players[my_id].bet+40.0)&&winProb < 2.0/(1+bet_player_num)) {
				fold_prob += 0.1;
			}
		} else if (RetRate < 1.3) {
			fold_prob = 0.0;
			call_prob = 0.6;
			if (winProb < 1.5/(1+bet_player_num))
				call_prob += 0.2;
		} else {		
			fold_prob = 0.0;
			call_prob = 0.30;
			if (winProb < 1.5/(1+bet_player_num))
				call_prob += 0.5;
		}
	}
	double p = ((double)rand())/RAND_MAX;
	const char *response;
	if (p < fold_prob) {
		if (((double)max_bet - players[my_id].bet) <= 3*(players[my_id].bet+40.0)&&winProb > 2.5/(1.0 + bet_player_num))
			response = Response[2];
		else
			response = Response[0];
	} else if (p < call_prob) {
		response = Response[2];
	} else {
		if (stage > FLOP&&winProb > 2.5/(1.0 + bet_player_num))
			response = Response[5];
		else if (stage > FLOP&&winProb > 3.0/(1.0 + bet_player_num))
			response = Response[7];
		else if (stage > FLOP&&winProb < 1.0/(1.0 + bet_player_num)&&(rand_d() < 0.8))
			response = Response[2];
		else
			response = Response[3];
	}
#ifdef FOUT
	fout << "inquire_process_prob_decision_mode_1:\n" << endl
			<< "Ret:	"<<Ret<<endl
			<< "RetRate:   "<<RetRate<<endl
			<< "winProb:   "<<winProb<<endl
			<< "fold_prob: "<<fold_prob<<endl
			<< "call_prob: "<<call_prob<<endl
			<< "my_id"<<my_id<<endl
			<< "response:	" << response << endl;
#endif
	send(m_socket_id, response, (int)strlen(response) + 1, 0);
	return 1;
}
//28 下午提交
int playerNumBased_mode() {
	int ret;
	if (alive_player_num > 3&&max_bet < 380)
		ret = prob_decision_mode_2();
	else 
		ret = my_mode_1();
	return ret;
}

int my_mode_3() {
	const double win_p = get_winProb(alive_player_num);
	double i_pot = 0.0;
/* 	for (int i = 0; i != 8; ++i) {
		if (players[i].state == WAIT)
			if (stage == HOLD)
				i_pot += 1.0/(1.0 + bet_player_num) * ((double)max_bet - players[i].bet);
			else
				i_pot += 1.5/(1.0 + bet_player_num) * ((double)max_bet - players[i].bet);
	} */
	i_pot += pot + max_bet - players[my_id].bet;
	const double bet_p = win_p*i_pot/(win_p*i_pot + (1.0 - win_p)*(max_bet - players[my_id].bet));
	char* response;
	if(max_bet != players[my_id].bet&&bet_p < 0.5) {
		response = "fold \n";
	} else if (bet_p < 0.7) {
		response = "call \n";
	} else if (bet_p < 0.8) {
		response = "raise 40 \n";
	} else if (bet_p < 0.9) {
		response = "raise 80 \n";
	} else if (bet_p < 0.95) {
		response = "raise 160 \n";
	} else {
		response = "all_in \n";
	}
//#ifdef FOUT
	fout << "inquire_process_my_mode_3:\n" << endl
			<< "bet_p:   "<<bet_p<<endl
			<< "winProb:   "<<win_p<<endl
			<< "my_id:	"<<my_id<<endl
			<< "response:	" << response << endl;
//#endif
	send(m_socket_id, response, (int)strlen(response) + 1, 0);
	return 1;
}

int poki_mode() {
	double Ret;
	double winProb = get_winProb(bet_player_num);
	double RetRate;
	double fold_prob;
	double call_prob;
	if (first_inquire) {
		if (bet_player_num == alive_player_num) {
			Ret = ((double)max_bet - players[my_id].bet + 40)/((double)max_bet - players[my_id].bet + pot + 40*alive_player_num);			
		} else {
			Ret	= ((double)max_bet - players[my_id].bet)/((double)max_bet - players[my_id].bet + pot);
		}
		if (Ret == 0) {
			Ret = ((double)max_bet - players[my_id].bet + 40)/((double)max_bet - players[my_id].bet + pot + 40);
			RetRate = winProb/Ret;
			if (RetRate < 0.8) {			
				call_prob = 0.95;
			} else if (RetRate < 1.0) {
				call_prob = 0.8;
			} else  {
				call_prob = 0.0;
			}
			fold_prob = 0;
			if (winProb < 1.5/bet_player_num)
				call_prob += 0.5;
		} else {
			RetRate = winProb/Ret;
			if (RetRate < 0.6) {
				fold_prob = 1.0;
				call_prob = 0.0;
			} else if (RetRate < 0.8) {
				fold_prob = 0.85;
				call_prob = 0.05;
			} else if (RetRate < 1.0) {
				fold_prob = 0.7;
				call_prob = 0.15;
			} else if (RetRate < 1.3) {
				fold_prob = 0.0;
				call_prob = 0.6;
				if (winProb < 1.5/bet_player_num)
					call_prob += 0.2;
			} else {
				fold_prob = 0.0;
				call_prob = 0.30;
				if (winProb < 1.5/bet_player_num)
					call_prob += 0.5;
			}
		}
	} else {
		Ret	= ((double)max_bet - players[my_id].bet)/((double)max_bet - players[my_id].bet + pot);
		if (Ret == 0) {
			Ret = ((double)max_bet*1.5 - players[my_id].bet)/((double)max_bet*1.5 - players[my_id].bet + pot);		
		}
		RetRate = winProb/Ret;
		if (RetRate < 0.8) {
			fold_prob = 0.95;
			call_prob = 0.0;
		} else if (RetRate < 1.0) {
			fold_prob = 0.8;
			call_prob = 0.05;
		} else if (RetRate < 1.3) {
			fold_prob = 0.0;
			call_prob = 0.6;
			if (winProb < 1.5/bet_player_num)
				call_prob += 0.2;
		} else {
			fold_prob = 0.0;
			call_prob = 0.30;
			if (winProb < 1.5/bet_player_num)
				call_prob += 0.5;
		}
		if (Ret == 0) {
			call_prob = fold_prob;
			fold_prob = 0;
			if (winProb < 1.5/bet_player_num)
				call_prob += 0.5;
		}
	}
	double p = ((double)rand())/RAND_MAX;
	const char *response;
	if (p < fold_prob) { //
		response = Response[0];
	} else if (p < call_prob) {
		response = Response[2];
	} else {
		response = Response[3];
	}
#ifdef FOUT
	fout << "inquire_process_prob_decision_mode_1:\n" << endl
			<< "Ret:	"<<Ret<<endl
			<< "RetRate:   "<<RetRate<<endl
			<< "winProb:   "<<winProb<<endl
			<< "fold_prob: "<<fold_prob<<endl
			<< "call_prob: "<<call_prob<<endl
			<< "my_id"<<my_id<<endl
			<< "response:	" << response << endl;
#endif
	send(m_socket_id, response, (int)strlen(response) + 1, 0);
	return 1;
}

int stagebased_mode_1() {
	double Ret = ((double)max_bet - players[my_id].bet)/((double)max_bet - players[my_id].bet + pot);
	double winProb = get_winProb(alive_player_num);
	double RetRate = winProb/Ret;
	double fold_prob;
	double call_prob;
	/*switch (stage) {
	case HOLD:	
		break;
	case FLOP:
		break;
	case TURN:
		break;
	case RIVER:
		break;
	case END:
		break;
	default:
		break;
	}*/	
	int bet_num = 0;
	if( stage == HOLD) {
		for (int i = 0; i != 8; ++i) {
			if (players[i].state == CHECK||players[i].state == CALL||players[i].state == RAISE||players[i].state == ALL_IN)
				bet_num++;
		}
		if (bet_num == 0) {
			winProb = get_winProb(bet_player_num);
			RetRate = winProb/Ret;
		}
	}
	if (Ret == 0) {
		Ret = ((double)max_bet - players[my_id].bet + 40)/((double)max_bet - players[my_id].bet + pot + 40);
		RetRate = winProb/Ret;
		if (RetRate < 0.8) {			
			call_prob = 0.95;
		} else if (RetRate < 1.0) {
			call_prob = 0.8;
		} else  {
			call_prob = 0.0;
		}
		fold_prob = 0;
	} else {
		if (RetRate < 0.8) {
			fold_prob = 0.95;
			call_prob = 0.0;
		} else if (RetRate < 1.0) {
			fold_prob = 0.8;
			call_prob = 0.05;
		} else if (RetRate < 1.3) {
			fold_prob = 0.0;
			call_prob = 0.6;
		} else {
			fold_prob = 0.0;
			call_prob = 0.30;
		}
	}
	double p = rand_d();
	char* response;
	if ((p < fold_prob&&bet_num >= 1)||(stage == HOLD&&winProb < 0.17271*7/alive_player_num)) { //||(players[my_id].money + players[my_id].jetton - max_bet) < 4*100&&winProb < 0.5
		response = "fold \n";
	} else if (p < call_prob) {
		response = "call \n";
	} else {
		response = "raise 40 \n";
	}
#ifdef FOUT
	fout << "inquire_process_stagebased_mode:\n" << endl
			<< "Ret:	"<<Ret<<endl
			<< "RetRate:   "<<RetRate<<endl
			<< "winProb:   "<<winProb<<endl
			<< "fold_prob: "<<fold_prob<<endl
			<< "call_prob: "<<call_prob<<endl
			<< "my_id"<<my_id<<endl
			<< "response:	" << response << endl;
#endif
	send(m_socket_id, response, (int)strlen(response) + 1, 0);
	return 1;
}

/*int prob_decision_mode() {
	double Ret = ((double)max_bet - players[my_id].bet)/((double)max_bet - players[my_id].bet + pot);
	double winProb = get_winProb(alive_player_num);
	double RetRate = winProb/Ret;
	double fold_prob;
	double call_prob;
	if (Ret == 0) {
		Ret = ((double)max_bet - players[my_id].bet + 100)/((double)max_bet - players[my_id].bet + pot + 100);
		RetRate = winProb/Ret;
		if (RetRate < 0.8) {			
			call_prob = 0.95;
		} else if (RetRate < 1.0) {
			call_prob = 0.8;
		} else  {
			call_prob = 0.0;
		}
		fold_prob = 0;
	} else {
		if (RetRate < 0.8) {
			fold_prob = 0.95;
			call_prob = 0.0;
		} else if (RetRate < 1.0) {
			fold_prob = 0.8;
			call_prob = 0.05;
		} else if (RetRate < 1.3) {
			fold_prob = 0.0;
			call_prob = 0.6;
		} else {
			fold_prob = 0.0;
			call_prob = 0.30;
		}
	}
	int bet_num = 0;
	if( stage == HOLD) {
		
		for (int i = 0; i != 8; ++i) {
			if (players[i].state == CHECK||players[i].state == CALL||players[i].state == RAISE||players[i].state == ALL_IN)
				bet_num++;
		}
		if (bet_num == 0) {
			winProb = get_winProb(bet_player_num);
			RetRate = winProb/Ret;
		}
	}
	double p = ((double)rand())/RAND_MAX;
	char* response;
	if (p < fold_prob||(players[my_id].money + players[my_id].jetton - max_bet) < 4*40&&winProb < 0.5) { 
		response = "fold \n";
	} else if (p < call_prob) {
		response = "call \n";
	} else {
		response = "raise 40 \n";
	}
	fout << "inquire_process_prob_decision_mode:\n" << endl
			<< "Ret:	"<<Ret<<endl
			<< "RetRate:   "<<RetRate<<endl
			<< "winProb:   "<<winProb<<endl
			<< "fold_prob: "<<fold_prob<<endl
			<< "call_prob: "<<call_prob<<endl
			<< "my_id"<<my_id<<endl
			<< "response:	" << response << endl;
	send(m_socket_id, response, (int)strlen(response) + 1, 0);
	return 1;
}*/

int prob_decision_mode_1() {
	double Ret = ((double)max_bet - players[my_id].bet + 50)/((double)max_bet - players[my_id].bet + pot + 50*alive_player_num);
	double winProb = get_winProb(alive_player_num);
	double RetRate = winProb/Ret;
	double fold_prob;
	double call_prob;
	if (RetRate < 0.8) {
		fold_prob = 0.95;
		call_prob = 0.0;
	} else if (RetRate < 1.0) {
		fold_prob = 0.8;
		call_prob = 0.05;
	} else if (RetRate < 1.3) {
		fold_prob = 0.0;
		call_prob = 0.6;
	} else {
		fold_prob = 0.0;
		call_prob = 0.30;
	}
	
	int bet_num = 0;
	if( stage == HOLD) {		
		for (int i = 0; i != 8; ++i) {
			if (players[i].state == CHECK||players[i].state == CALL||players[i].state == RAISE||players[i].state == ALL_IN)
				bet_num++;
		}
		if (bet_num == 0) {
			winProb = get_winProb(bet_player_num);
			RetRate = winProb/Ret;
		}
	}
	double p = ((double)rand())/RAND_MAX;
	char* response;
	if (p < fold_prob&&winProb < 1.5/alive_player_num) { 
		response = "fold \n";
	} else if (p < call_prob) {
		response = "call \n";
	} else {
		response = "raise 40 \n";
	}
#ifdef FOUT
	fout << "inquire_process_prob_decision_mode_1:\n" << endl
			<< "Ret:	"<<Ret<<endl
			<< "RetRate:   "<<RetRate<<endl
			<< "winProb:   "<<winProb<<endl
			<< "fold_prob: "<<fold_prob<<endl
			<< "call_prob: "<<call_prob<<endl
			<< "my_id"<<my_id<<endl
			<< "response:	" << response << endl;
#endif
	send(m_socket_id, response, (int)strlen(response) + 1, 0);
	return 1;
}

int prob_decision_mode() {
	double Ret = ((double)max_bet - players[my_id].bet + 50)/((double)max_bet - players[my_id].bet + pot + 50*alive_player_num);
	double winProb = get_winProb(alive_player_num);
	double RetRate = winProb/Ret;
	double fold_prob;
	double call_prob;
	if (RetRate < 0.6) {
		fold_prob = 1.0;
		call_prob = 0.0;
	} else if (RetRate < 0.8) {
		fold_prob = 0.85;
		call_prob = 0.05;
	} else if (RetRate < 1.0) {
		fold_prob = 0.7;
		call_prob = 0.15;
	} else if (RetRate < 1.3) {
		fold_prob = 0.0;
		call_prob = 0.6;
	} else {
		fold_prob = 0.0;
		call_prob = 0.30;
	}
	int bet_num = 0;
	if( stage == HOLD) {		
		for (int i = 0; i != 8; ++i) {
			if (players[i].state == CHECK||players[i].state == CALL||players[i].state == RAISE||players[i].state == ALL_IN)
				bet_num++;
		}
		if (bet_num == 0) {
			winProb = get_winProb(bet_player_num);
			RetRate = winProb/Ret;
		}
	}
	double p = ((double)rand())/RAND_MAX;
	char* response;
	if (p < fold_prob&&winProb < 1.5/alive_player_num) { 
		response = "fold \n";
	} else if (p < call_prob) {
		response = "call \n";
	} else {
		response = "raise 40 \n";
	}
#ifdef FOUT
	fout << "inquire_process_prob_decision_mode_1:\n" << endl
			<< "Ret:	"<<Ret<<endl
			<< "RetRate:   "<<RetRate<<endl
			<< "winProb:   "<<winProb<<endl
			<< "fold_prob: "<<fold_prob<<endl
			<< "call_prob: "<<call_prob<<endl
			<< "my_id"<<my_id<<endl
			<< "response:	" << response << endl;
#endif
	send(m_socket_id, response, (int)strlen(response) + 1, 0);
	return 1;
}
/*best*/
int prob_decision_mode_2() {
	double i_pot = 0.0;
	for (int i = 0; i != 8; ++i) {
		if (players[i].state == WAIT)
			if (stage == HOLD)
				i_pot += 1.0/(1.0 + bet_player_num) * ((double)max_bet - players[i].bet);
			else
				i_pot += 1.5/(1.0 + bet_player_num) * ((double)max_bet - players[i].bet);
	}
	double Ret = ((double)max_bet - players[my_id].bet)/((double)max_bet - players[my_id].bet + pot + i_pot);
	double winProb = get_winProb(bet_player_num);
	double RetRate = winProb/Ret;
	double fold_prob;
	double call_prob;
	if (Ret == 0) {
		Ret = ((double)max_bet - players[my_id].bet + 40)/((double)max_bet - players[my_id].bet + pot + i_pot + 40);
		RetRate = winProb/Ret;
		if (RetRate < 0.8) {			
			call_prob = 0.95;
		} else if (RetRate < 1.0) {
			call_prob = 0.8;
		} else if (RetRate < 1.3) {
			call_prob = 0.5;
		} else  {
			call_prob = 0.3;
		}
		fold_prob = 0.0;
		if (winProb < 1.5/(1.0 + bet_player_num))
			call_prob += 0.5;
		else if (winProb > 2.5/(1.0 + bet_player_num))
			call_prob -= 0.3;
	} else {
		if (RetRate < 0.8) {
			fold_prob = 0.95;
			call_prob = 0.0;
			if (((double)max_bet - players[my_id].bet) >= 3*(players[my_id].bet+40.0)&&winProb < 2.5/(1+bet_player_num)) 
				fold_prob = 1.0;
		} else if (RetRate < 1.0) {
			fold_prob = 0.8;
			call_prob = 0.05;
			if ((((double)max_bet - players[my_id].bet) <= 3*(players[my_id].bet+40.0)&&winProb > 1.5/(1+bet_player_num))||(winProb > 2.5/(1+bet_player_num))) {
				fold_prob -= 0.2;
				call_prob += 0.1;
			} else if (((double)max_bet - players[my_id].bet) >= 3*(players[my_id].bet+40.0)&&winProb < 2.0/(1+bet_player_num)) {
				fold_prob += 0.1;
			}
		} else if (RetRate < 1.3) {
			fold_prob = 0.0;
			call_prob = 0.6;
			if (winProb < 1.5/(1+bet_player_num))
				call_prob += 0.2;
		} else {		
			fold_prob = 0.0;
			call_prob = 0.30;
			if (winProb < 1.5/(1+bet_player_num))
				call_prob += 0.5;
		}
	}
	double p = ((double)rand())/RAND_MAX;
	const char *response;
	if (p < fold_prob) {
		if (((double)max_bet - players[my_id].bet) <= 3*(players[my_id].bet+40.0)&&winProb > 2.5/(1.0 + bet_player_num))
			response = Response[2];
		else
			response = Response[0];
	} else if (p < call_prob) {
		response = Response[2];
	} else {
		if (stage > FLOP&&winProb > 2.5/(1.0 + bet_player_num))
			response = Response[5];
		else if (stage > FLOP&&winProb > 3.0/(1.0 + bet_player_num))
			response = Response[7];
		else if (stage > FLOP&&winProb < 1.0/(1.0 + bet_player_num)&&(rand_d() < 0.8))
			response = Response[2];
		else
			response = Response[3];
	}
#ifdef FOUT
	fout << "inquire_process_prob_decision_mode_1:\n" << endl
			<< "Ret:	"<<Ret<<endl
			<< "RetRate:   "<<RetRate<<endl
			<< "winProb:   "<<winProb<<endl
			<< "fold_prob: "<<fold_prob<<endl
			<< "call_prob: "<<call_prob<<endl
			<< "my_id"<<my_id<<endl
			<< "response:	" << response << endl;
#endif
	send(m_socket_id, response, (int)strlen(response) + 1, 0);
	return 1;
}

int prob_decision_mode_2_n() {
	double i_pot = 0.0;
	for (int i = 0; i != 8; ++i) {
		if (players[i].state == WAIT)
			if (stage == HOLD)
				i_pot += 1.0/(1.0 + bet_player_num) * ((double)max_bet - players[i].bet);
			else
				i_pot += 1.5/(1.0 + bet_player_num) * ((double)max_bet - players[i].bet);
	}
	double Ret = ((double)max_bet - players[my_id].bet)/((double)max_bet - players[my_id].bet + pot + i_pot);
	int fixed_player_num = bluffed ? alive_player_num : bet_player_num;
	double winProb = get_winProb(bet_player_num);
	double RetRate = winProb/Ret;
	double fold_prob;
	double call_prob;
	if (Ret == 0) {
		Ret = ((double)max_bet - players[my_id].bet + 40)/((double)max_bet - players[my_id].bet + pot + i_pot + 40);
		RetRate = winProb/Ret;
		if (RetRate < 0.8) {			
			call_prob = 0.95;
		} else if (RetRate < 1.0) {
			call_prob = 0.8;
		} else if (RetRate < 1.3) {
			call_prob = 0.5;
		} else  {
			call_prob = 0.3;
		}
		fold_prob = 0.0;
		if (winProb < 1.5/(1.0 + bet_player_num))
			call_prob += 0.5;
		else if (winProb > 2.5/(1.0 + bet_player_num))
			call_prob -= 0.3;
	} else {
		if (RetRate < 0.8) {
			fold_prob = 0.95;
			call_prob = 0.0;
			if (((double)max_bet - players[my_id].bet) >= 3*(players[my_id].bet+40.0)&&winProb < 2.5/(1+bet_player_num)) 
				fold_prob = 1.0;
		} else if (RetRate < 1.0) {
			fold_prob = 0.8;
			call_prob = 0.05;
			if ((((double)max_bet - players[my_id].bet) <= 3*(players[my_id].bet+40.0)&&winProb > 1.5/(1+bet_player_num))||(winProb > 2.5/(1+bet_player_num))) {
				fold_prob -= 0.2;
				call_prob += 0.1;
			} else if (((double)max_bet - players[my_id].bet) >= 3*(players[my_id].bet+40.0)&&winProb < 2.0/(1+bet_player_num)) {
				fold_prob += 0.1;
			}
		} else if (RetRate < 1.3) {
			fold_prob = 0.0;
			call_prob = 0.6;
			if (winProb < 1.5/(1+bet_player_num))
				call_prob += 0.2;
		} else {		
			fold_prob = 0.0;
			call_prob = 0.30;
			if (winProb < 1.5/(1+bet_player_num))
				call_prob += 0.5;
		}
	}
	double p = ((double)rand())/RAND_MAX;
	const char *response;
	if (p < fold_prob) {
		if (((double)max_bet - players[my_id].bet) <= 3*(players[my_id].bet+40.0)&&winProb > 2.5/(1.0 + bet_player_num))
			response = Response[2];
		else
			response = Response[0];
	} else if (p < call_prob) {
		response = Response[2];
	} else {
		if (stage > FLOP&&winProb > 2.5/(1.0 + bet_player_num))
			response = Response[5];
		else if (stage > FLOP&&winProb > 3.0/(1.0 + bet_player_num))
			response = Response[7];
		else if (stage > FLOP&&winProb < 1.0/(1.0 + bet_player_num)&&(rand_d() < 0.8))
			response = Response[2];
		else if (winProb > 1.1/(1.0 + bet_player_num))
			response = Response[3];
		else
			response = Response[3];
	}
#ifdef FOUT
	fout << "inquire_process_prob_decision_mode_1:\n" << endl
			<< "Ret:	"<<Ret<<endl
			<< "RetRate:   "<<RetRate<<endl
			<< "winProb:   "<<winProb<<endl
			<< "fold_prob: "<<fold_prob<<endl
			<< "call_prob: "<<call_prob<<endl
			<< "my_id"<<my_id<<endl
			<< "response:	" << response << endl;
#endif
	send(m_socket_id, response, (int)strlen(response) + 1, 0);
	return 1;
}

//修改参数，倍数
/*int prob_decision_mode_2_n() {
	double i_pot = 0.0;
	for (int i = 0; i != 8; ++i) {
		if (players[i].state == WAIT)
			if (stage == HOLD)
				i_pot += 1.0/(1.0 + bet_player_num) * ((double)max_bet - players[i].bet);
			else
				i_pot += 1.5/(1.0 + bet_player_num) * ((double)max_bet - players[i].bet);
	}
	double Ret = ((double)max_bet - players[my_id].bet)/((double)max_bet - players[my_id].bet + pot + i_pot);
	double winProb = get_winProb(bet_player_num);
	double RetRate = winProb/Ret;
	double fold_prob;
	double call_prob;
	if (Ret == 0) {
		Ret = ((double)max_bet - players[my_id].bet + 40)/((double)max_bet - players[my_id].bet + pot + i_pot + 40);
		RetRate = winProb/Ret;
		if (RetRate < 0.8) {			
			call_prob = 0.95;
		} else if (RetRate < 1.0) {
			call_prob = 0.8;
		} else if (RetRate < 1.3) {
			call_prob = 0.5;
		} else  {
			call_prob = 0.3;
		}
		fold_prob = 0.0;
		if (winProb < 1.2/(1.0 + bet_player_num))
			call_prob += 0.5;
		else if (winProb > 2.0/(1.0 + bet_player_num))
			call_prob -= 0.3;
	} else {
		if (RetRate < 0.8) {
			fold_prob = 0.95;
			call_prob = 0.0;
			if (((double)max_bet - players[my_id].bet) >= 3*(players[my_id].bet+40.0)&&winProb < 2.0/(1+bet_player_num)) 
				fold_prob = 1.0;
		} else if (RetRate < 1.0) {
			fold_prob = 0.8;
			call_prob = 0.05;
			if ((((double)max_bet - players[my_id].bet) <= 3*(players[my_id].bet+40.0)&&winProb > 1.2/(1+bet_player_num))||(winProb > 2.5/(1+bet_player_num))) {
				fold_prob -= 0.2;
				call_prob += 0.1;
			} else if (((double)max_bet - players[my_id].bet) >= 3*(players[my_id].bet+40.0)&&winProb < 1.5/(1+bet_player_num)) {
				fold_prob += 0.1;
			}
		} else if (RetRate < 1.3) {
			fold_prob = 0.0;
			call_prob = 0.6;
			if (winProb < 1.2/(1+bet_player_num))
				call_prob += 0.2;
		} else {		
			fold_prob = 0.0;
			call_prob = 0.30;
			if (winProb < 1.2/(1+bet_player_num))
				call_prob += 0.5;
		}
	}
	double p = ((double)rand())/RAND_MAX;
	const char *response;
	if (p < fold_prob) {
		if (((double)max_bet - players[my_id].bet) <= 3*(players[my_id].bet+40.0)&&winProb > 2.0/(1.0 + bet_player_num))
			response = Response[2];
		else
			response = Response[0];
	} else if (p < call_prob) {
		response = Response[2];
	} else {
		if (stage > FLOP&&winProb > 1.5/(1.0 + bet_player_num))
			response = Response[5];
		else if (stage > FLOP&&winProb > 2.0/(1.0 + bet_player_num))
			response = Response[7];
		else if (stage > FLOP&&winProb < 1.0/(1.0 + bet_player_num)&&(rand_d() < 0.8))
			response = Response[2];
		else
			response = Response[3];
	}
#ifdef FOUT
	fout << "inquire_process_prob_decision_mode_1:\n" << endl
			<< "Ret:	"<<Ret<<endl
			<< "RetRate:   "<<RetRate<<endl
			<< "winProb:   "<<winProb<<endl
			<< "fold_prob: "<<fold_prob<<endl
			<< "call_prob: "<<call_prob<<endl
			<< "my_id"<<my_id<<endl
			<< "response:	" << response << endl;
#endif
	send(m_socket_id, response, (int)strlen(response) + 1, 0);
	return 1;
}
*/
int first_inquire_handler() {
	
	if(alive_player_num/2 + 2 <= bet_player_num&&pot == 60) {
		fout<<"first_inquire_handler:	\nbet_player_num:		"<<bet_player_num<<endl;
		if(get_winProb(alive_player_num) > 1.0/(alive_player_num + 1.0)) {
			bluffed = true;
			return raise_mode(0);
		} else
			return fold_mode();
	}
	double i_pot = 0.0;
	for (int i = 0; i != 8; ++i) {
		if (players[i].state == WAIT)
			if (stage == HOLD)
				i_pot += 1.0/(1.0 + bet_player_num) * ((double)max_bet - players[i].bet);
			else
				i_pot += 1.5/(1.0 + bet_player_num) * ((double)max_bet - players[i].bet);
	}
	double Ret = ((double)max_bet - players[my_id].bet)/((double)max_bet - players[my_id].bet + pot + i_pot);
	double winProb = get_winProb(min(bet_player_num, alive_player_num/2 + 2));
	double RetRate = winProb/Ret;
	double fold_prob;
	double call_prob;
	if (Ret == 0) {
		Ret = ((double)max_bet - players[my_id].bet + 40)/((double)max_bet - players[my_id].bet + pot + i_pot + 40);
		RetRate = winProb/Ret;
		if (RetRate < 0.8) {			
			call_prob = 0.95;
		} else if (RetRate < 1.0) {
			call_prob = 0.8;
		} else if (RetRate < 1.3) {
			call_prob = 0.5;
		} else  {
			call_prob = 0.3;
		}
		fold_prob = 0.0;
		if (winProb < 1.0/(1.0 + bet_player_num))
			call_prob += 0.5;
		else if (winProb > 2.5/(1.0 + bet_player_num))
			call_prob -= 0.3;
	} else {
		if (RetRate < 0.8) {
			fold_prob = 0.95;
			call_prob = 0.0;
			if (((double)max_bet - players[my_id].bet) >= 3*(players[my_id].bet+40.0)&&winProb < 2.5/(1+bet_player_num)) 
				fold_prob = 1.0;
		} else if (RetRate < 1.0) {
			fold_prob = 0.8;
			call_prob = 0.05;
			if ((((double)max_bet - players[my_id].bet) <= 3*(players[my_id].bet+40.0)&&winProb > 1.5/(1+bet_player_num))||(winProb > 2.5/(1+bet_player_num))) {
				fold_prob -= 0.2;
				call_prob += 0.1;
			} else if (((double)max_bet - players[my_id].bet) >= 3*(players[my_id].bet+40.0)&&winProb < 2.0/(1+bet_player_num)) {
				fold_prob += 0.1;
			}
		} else if (RetRate < 1.3) {
			fold_prob = 0.0;
			call_prob = 0.6;
			if (winProb < 1.5/(1+bet_player_num))
				call_prob += 0.2;
		} else {		
			fold_prob = 0.0;
			call_prob = 0.30;
			if (winProb < 1.5/(1+bet_player_num))
				call_prob += 0.5;
		}
	}
	double p = ((double)rand())/RAND_MAX;
	const char *response;
	if (p < fold_prob) {
		if (((double)max_bet - players[my_id].bet) <= 3*(players[my_id].bet+40.0)&&winProb > 2.5/(1.0 + bet_player_num))
			response = Response[2];
		else
			response = Response[0];
	} else if (p < call_prob) {
		response = Response[2];
	} else {
		if (stage > FLOP&&winProb > 2.5/(1.0 + bet_player_num))
			response = Response[5];
		else if (stage > FLOP&&winProb > 3.0/(1.0 + bet_player_num))
			response = Response[7];
		else if (stage > FLOP&&winProb < 1.0/(1.0 + bet_player_num)&&(rand_d() < 0.8))
			response = Response[2];
		else
			response = Response[3];
	}
	/*int bet_num = 0;			
	for (int i = 0; i != 8; ++i) {
		if (players[i].state == CHECK||players[i].state == CALL||players[i].state == RAISE||players[i].state == ALL_IN)
			bet_num++;
	}
	if (bet_num == 0) {
		const int in_player_num = alive_player_num/2 + 1;
		if (get_winProb(in_player_num) > 1.3/in_player_num)
			response = Response[3];
		else
			response = Response[0];
		send(m_socket_id, response, (int)strlen(response) + 1, 0);
		return 1;
	} else {
		return playerNumBased_mode();
	}*/
#ifdef FOUT
	fout << "inquire_process_prob_decision_mode_1:\n" << endl
			<< "Ret:	"<<Ret<<endl
			<< "RetRate:   "<<RetRate<<endl
			<< "winProb:   "<<winProb<<endl
			<< "fold_prob: "<<fold_prob<<endl
			<< "call_prob: "<<call_prob<<endl
			<< "my_id"<<my_id<<endl
			<< "response:	" << response << endl;
#endif
	send(m_socket_id, response, (int)strlen(response) + 1, 0);
		return 1;
}

/*best_copy
int prob_decision_mode_2() {
	double i_pot = 0.0;
	for (int i = 0; i != 8; ++i) {
		if (players[i].state == WAIT)
			i_pot += 1.0/bet_player_num * ((double)max_bet - players[i].bet);
	}
	double Ret = ((double)max_bet - players[my_id].bet)/((double)max_bet - players[my_id].bet + pot + i_pot);
	double winProb = get_winProb(bet_player_num);
	double RetRate = winProb/Ret;
	double fold_prob;
	double call_prob;
	if (Ret == 0) {
		Ret = ((double)max_bet - players[my_id].bet + 40)/((double)max_bet - players[my_id].bet + pot + i_pot + 40);
		RetRate = winProb/Ret;
		if (RetRate < 0.8) {			
			call_prob = 0.95;
		} else if (RetRate < 1.0) {
			call_prob = 0.8;
		} else if (RetRate < 1.3) {
			call_prob = 0.6;
		} else  {
			call_prob = 0.3;
		}
		fold_prob = 0;
		if (winProb < 1.5/(1+bet_player_num))
			call_prob += 0.5;
	} else {
		if (RetRate < 0.8) {
			fold_prob = 0.95;
			call_prob = 0.0;
			if (((double)max_bet - players[my_id].bet) >= 3*(players[my_id].bet+40.0)&&winProb < 2.5/(1+bet_player_num)) 
				fold_prob = 1.0;
		} else if (RetRate < 1.0) {
			fold_prob = 0.8;
			call_prob = 0.05;
			if ((((double)max_bet - players[my_id].bet) <= 3*(players[my_id].bet+40.0)&&winProb > 1.5/(1+bet_player_num))||(winProb > 2.5/(1+bet_player_num))) {
				fold_prob -= 0.2;
				call_prob += 0.1;
			} else if (((double)max_bet - players[my_id].bet) >= 3*(players[my_id].bet+40.0)&&winProb < 2.0/(1+bet_player_num)) {
				fold_prob += 0.1;
			}
		} else if (RetRate < 1.3) {
			fold_prob = 0.0;
			call_prob = 0.6;
			if (winProb < 1.5/(1+bet_player_num))
				call_prob += 0.2;
		} else {		
			fold_prob = 0.0;
			call_prob = 0.30;
			if (winProb < 1.5/(1+bet_player_num))
				call_prob += 0.5;
		}
	}
	double p = ((double)rand())/RAND_MAX;
	const char *response;
	if (p < fold_prob) {
		response = Response[0];
	} else if (p < call_prob) {
		response = Response[2];
	} else {
		response = Response[3];
	}
	fout << "inquire_process_prob_decision_mode_1:\n" << endl
			<< "Ret:	"<<Ret<<endl
			<< "RetRate:   "<<RetRate<<endl
			<< "winProb:   "<<winProb<<endl
			<< "fold_prob: "<<fold_prob<<endl
			<< "call_prob: "<<call_prob<<endl
			<< "my_id"<<my_id<<endl
			<< "response:	" << response << endl;
	send(m_socket_id, response, (int)strlen(response) + 1, 0);
	return 1;
}*/

/*int prob_decision_mode_2_t() {
	double i_pot = 0.0;
	for (int i = 0; i != 8; ++i) {
		if (players[i].state == WAIT)
			i_pot += 1.0/bet_player_num * ((double)max_bet - players[i].bet);
	}
	double Ret = ((double)max_bet - players[my_id].bet)/((double)max_bet - players[my_id].bet + pot + i_pot);
	double winProb = get_winProb(bet_player_num);
	double RetRate = winProb/Ret;
	double fold_prob;
	double call_prob;
	if (Ret == 0) {
		Ret = ((double)max_bet - players[my_id].bet + 40)/((double)max_bet - players[my_id].bet + pot + i_pot + 40);
		RetRate = winProb/Ret;
		if (RetRate < 0.8) {			
			call_prob = 0.95;
		} else if (RetRate < 1.0) {
			call_prob = 0.8;
		} else if (RetRate < 1.3) {
			call_prob = 0.6;
		} else  {
			call_prob = 0.3;
		}
		fold_prob = 0;
		if (winProb < 1.5/bet_player_num)
			call_prob += 0.5;
	} else {
		if (RetRate < 0.8) {
			fold_prob = 0.95;
			call_prob = 0.0;
		} else if (RetRate < 1.0) {
			fold_prob = 0.8;
			call_prob = 0.05;
			if (winProb > 1.5/bet_player_num) {
				fold_prob -= 0.2;
				call_prob += 0.1;
			}
		} else if (RetRate < 1.3) {
			fold_prob = 0.0;
			call_prob = 0.6;
			if (winProb < 1.5/bet_player_num)
				call_prob += 0.2;
		} else {		
			fold_prob = 0.0;
			call_prob = 0.30;
			if (winProb < 1.5/bet_player_num)
				call_prob += 0.5;
		}
	}
	double p = ((double)rand())/RAND_MAX;
	const char *response;
	if (p < fold_prob) { //&&winProb < 1.5/alive_player_num
		response = Response[0];
	} else if (p < call_prob) {
		response = Response[2];
	} else {
		response = Response[3];
	}
	fout << "inquire_process_prob_decision_mode_1:\n" << endl
			<< "Ret:	"<<Ret<<endl
			<< "RetRate:   "<<RetRate<<endl
			<< "winProb:   "<<winProb<<endl
			<< "fold_prob: "<<fold_prob<<endl
			<< "call_prob: "<<call_prob<<endl
			<< "my_id"<<my_id<<endl
			<< "response:	" << response << endl;
	send(m_socket_id, response, (int)strlen(response) + 1, 0);
	return 1;
}*/

int prob_decision_mode_2_t() {
	double i_pot = 0.0;
	for (int i = 0; i != 8; ++i) {
		if (players[i].state == WAIT)
			i_pot += 1.0/bet_player_num * ((double)max_bet - players[i].bet);
	}
	double Ret = ((double)max_bet - players[my_id].bet)/((double)max_bet - players[my_id].bet + pot + i_pot);
	double winProb = get_winProb(bet_player_num);
	double RetRate = winProb/Ret;
	double fold_prob;
	double call_prob;
	if (Ret == 0) {
		Ret = ((double)max_bet - players[my_id].bet + 40)/((double)max_bet - players[my_id].bet + pot + i_pot + 40);
		RetRate = winProb/Ret;
		if (RetRate < 0.8) {			
			call_prob = 0.95;
		} else if (RetRate < 1.0) {
			call_prob = 0.8;
		} else if (RetRate < 1.3) {
			call_prob = 0.5;
		} else  {
			call_prob = 0.3;
		}
		fold_prob = 0.0;
		if (winProb < 1.5/(1+bet_player_num))
			call_prob += 0.5;
	} else {
		if (RetRate < 0.8) {
			fold_prob = 0.95;
			call_prob = 0.0;
			if (((double)max_bet - players[my_id].bet) >= 3*(players[my_id].bet+40.0)&&winProb < 2.5/(1+bet_player_num)) 
				fold_prob = 1.0;
		} else if (RetRate < 1.0) {
			fold_prob = 0.8;
			call_prob = 0.05;
			if ((((double)max_bet - players[my_id].bet) <= 3*(players[my_id].bet+40.0)&&winProb > 1.5/(1+bet_player_num))||(winProb > 2.5/(1+bet_player_num))) {
				fold_prob -= 0.2;
				call_prob += 0.1;
			} else if (((double)max_bet - players[my_id].bet) >= 3*(players[my_id].bet+40.0)&&winProb < 2.0/(1+bet_player_num)) {
				fold_prob += 0.1;
			}
		} else if (RetRate < 1.3) {
			fold_prob = 0.0;
			call_prob = 0.6;
			if (winProb < 1.5/(1+bet_player_num))
				call_prob += 0.2;
		} else {		
			fold_prob = 0.0;
			call_prob = 0.30;
			if (winProb < 1.5/(1+bet_player_num))
				call_prob += 0.5;
		}
	}
	double p = ((double)rand())/RAND_MAX;
	const char *response;
	if (p < fold_prob) {
		response = Response[0];
	} else if (p < call_prob) {
		response = Response[2];
	} else {
		if (stage > FLOP&&winProb > 2.5/(1+bet_player_num))
			response = Response[5];
		else
			response = Response[3];
	}
#ifdef FOUT
	fout << "inquire_process_prob_decision_mode_1:\n" << endl
			<< "Ret:	"<<Ret<<endl
			<< "RetRate:   "<<RetRate<<endl
			<< "winProb:   "<<winProb<<endl
			<< "fold_prob: "<<fold_prob<<endl
			<< "call_prob: "<<call_prob<<endl
			<< "my_id"<<my_id<<endl
			<< "response:	" << response << endl;
#endif
	send(m_socket_id, response, (int)strlen(response) + 1, 0);
	return 1;
}

int prob_all_in_mode() {
	char* response;
	const double prob = get_winProb(alive_player_num);
	if (prob > 2.0/(2 + alive_player_num)) {
		response = "all_in \n";
	} else {
		response = "fold \n";
	}
#ifdef FOUT
	fout << "inquire_process_prob_all_in_mode:\n" << endl
			<< "response:" << response << endl;
#endif
	done = true;
	send(m_socket_id, response, (int)strlen(response) + 1, 0);
	return 1;
}

int rand_mode() {
	char* response;
	int r = rand()%5;
	switch(r) {
	case 0:
		response = "fold \n";
		done = true;
		break;
	case 1:
		response = "check \n";
		break;
	case 2:
		response = "call \n";
		break;
	case 3:
		response = "raise 40 \n";
		break;
	case 4:
		response = "all_in \n";
		done = true;
		break;
	}
#ifdef FOUT
	fout << "inquire_process_rand_mode:\n" << endl
			<< "response:" << response << endl;
#endif
	send(m_socket_id, response, (int)strlen(response) + 1, 0);
	return 1;
}
int all_in_mode() {
	const char* response = "all_in \n";
#ifdef FOUT
	fout << "inquire_process_all_in_mode:\n" << endl
			<< "response:" << response << endl;
#endif
	done = true;
	send(m_socket_id, response, (int)strlen(response) + 1, 0);
	return 1;
}
int fold_mode() {
	const char* response = "fold \n";
#ifdef FOUT
	fout << "inquire_process_fold_mode:\n" << endl
			<< "response:" << response << endl;
#endif
	done = true;
	send(m_socket_id, response, (int)strlen(response) + 1, 0);
	return 1;
}
int check_mode() {
	const char* response = "check \n";
#ifdef FOUT
	fout << "inquire_process_check_mode:\n" << endl
			<< "response:" << response << endl;
#endif
	send(m_socket_id, response, (int)strlen(response) + 1, 0);
	return 1;
}
int raise_mode(int level){
	const char* response = Response[level + 3];
#ifdef FOUT
	fout << "inquire_process_raise_40_mode:\n" << endl
			<< "response:" << response << endl;
#endif
	send(m_socket_id, response, (int)strlen(response) + 1, 0);
	return 1;
}

int bet_msg_process(int size, const char* msg) {
	int i = 0, player_ix = 0;
	while (msg[i++] != '\n');
	char line[128], word[128];
	State tstate;
	for (player_ix = 0; player_ix != 8; ++player_ix) {
			players[player_ix].bet = 0;
			players[player_ix].state = WAIT;
	}
	player_ix = 0;
	int p_ix, tid, fold_num_t = 0;
	while (player_ix != 9) {
		getline(msg, line, i);
		int line_ix = 0;
		if (NULL != strstr(line, "/inquire")) {
			break;
		} else if (NULL != strstr(line, "total pot:")) {
			while (line[line_ix++] != ':');
			line_ix++;
			getword(line, word, line_ix);
			pot = atoi(word);
			continue;
		} else if (NULL != strstr(line, "blind")) {
			tstate = BLIND;
		} else if (NULL != strstr(line, "check")) {
			tstate = CHECK;
			if (first_inquire)
				fold_num_t = 0;
		} else if (NULL != strstr(line, "raise")) {
			tstate = RAISE;
			if (first_inquire)
				fold_num_t = 0;
		} else if (NULL != strstr(line, "all_in")) {
			tstate = ALL_IN;
			if (first_inquire)
				fold_num_t = 0;
		} else if (NULL != strstr(line, "fold")) {
			tstate = FOLD;
			if (first_inquire)
				fold_num_t++;
		} else if (NULL != strstr(line, "call")) {
			tstate = CALL; 
			if (first_inquire)
				fold_num_t = 0;
		} else {
			tstate = WAIT;
		}
		getword(line, word, line_ix);
		tid = atoi(word);
		for (p_ix = 0; p_ix != 8; ++p_ix) {
			if (tid == players[p_ix].id)
				break;
		}
		getword(line, word, line_ix);
		players[p_ix].jetton = atoi(word);
		getword(line, word, line_ix);
		players[p_ix].money = atoi(word);
		getword(line, word, line_ix);
		players[p_ix].bet = atoi(word);
		players[p_ix].state = tstate;
		if (players[p_ix].in == false&&tstate == RAISE||tstate == ALL_IN||tstate == CHECK||tstate == CALL)
			players[p_ix].in = true;
		player_ix++;
	}
	if (first_inquire) {
		bet_player_num = alive_player_num - fold_num_t;
	}
#ifdef FOUT
	fout << "Bet_message_prossess:\n"<<pot<<endl;
	for (player_ix = 0; player_ix != 8; ++player_ix) {
		fout << players[player_ix].id << "\t" << players[player_ix].jetton << "\t" << players[player_ix].money << "\t" << players[player_ix].bet << "\t" << players[player_ix].seat << "\t" << players[player_ix].state << endl;
	}
	fout << "Bet_message_prossess:\npot"<<pot<<endl
		<<"bet_player_num"<<bet_player_num<<endl;
#endif
	return 1;
}
int seat_msg_process(int size, const char* msg) {
	int i = 0, player_ix = 0;
	while (msg[i++] != '\n');
	char line[128], word[128];
	if (round_num == 0) {
		while (player_ix!=8) {
			getline(msg, line, i);
			int line_ix = 0;
			if (NULL != strstr(line, "/seat")) {
				break;
			} else if (NULL != strstr(line, "button")) {
				players[player_ix].seat = BUTTON;
				players[player_ix].state = WAIT;
				while (line[line_ix++] != ':');
				line_ix++;
			} else if (NULL != strstr(line, "small")) {
				players[player_ix].seat = SMALL_BLIND;
				players[player_ix].state = BLIND;
				while (line[line_ix++] != ':');
				line_ix++;
			} else if (NULL != strstr(line, "big")) {
				players[player_ix].seat = BIG_BLIND;
				players[player_ix].state = BLIND;
				while (line[line_ix++] != ':');
				line_ix++;
			} else {
				players[player_ix].state = WAIT;
				players[player_ix].seat = (Seat)player_ix;
			}
			getword(line, word, line_ix);
			players[player_ix].id = atoi(word);
			getword(line, word, line_ix);
			players[player_ix].jetton = atoi(word);
			getword(line, word, line_ix);
			players[player_ix].money = atoi(word);
			if (players[player_ix].id == my_id)
				my_id = player_ix;
			players[player_ix].in = false;
			players[player_ix].bet_num = 0;
			players[player_ix].bet_Prob = 1.0/alive_player_num;			
			player_ix++;
		}
	} else {
		for (player_ix = 0; player_ix != 8; ++player_ix) {
			players[player_ix].jetton = 0;
			players[player_ix].money = 0;
			players[player_ix].seat = OUT;
			players[player_ix].state = LOSE;
		}
		player_ix = 0;
		while (player_ix!=8) {
			getline(msg, line, i);
			int line_ix = 0,p_ix,tid;
			Seat tseat;
			State tstate;
			if (NULL != strstr(line, "/seat")) {
				break;
			} else if (NULL != strstr(line, "button")) {
				tseat = BUTTON;
				tstate = WAIT;
				while (line[line_ix++] != ':');
				line_ix++;
			} else if (NULL != strstr(line, "small")) {
				tseat = SMALL_BLIND;
				tstate = BLIND;
				while (line[line_ix++] != ':');
				line_ix++;
			} else if (NULL != strstr(line, "big")) {
				tseat = BIG_BLIND;
				tstate = BLIND;
				while (line[line_ix++] != ':');
				line_ix++;
			} else {
				tstate = WAIT;
				tseat = (Seat)player_ix;
			}
			getword(line, word, line_ix);
			tid = atoi(word);
			for (p_ix = 0; p_ix != 8; ++p_ix) {
				if (tid == players[p_ix].id)
					break;
			}
			getword(line, word, line_ix);
			players[p_ix].jetton = atoi(word);
			getword(line, word, line_ix);
			players[p_ix].money = atoi(word);
			players[p_ix].seat = tseat;
			players[p_ix].state = tstate;
			if (players[p_ix].in == true)
				players[p_ix].bet_num++;
			players[p_ix].bet_Prob = (double)players[p_ix].bet_num / round_num;
			players[p_ix].in = false;
			player_ix++;
		}
		if (alive_player_num != player_ix - 1) {			
			for (int i = 0; i != 8; ++i) {
				players[i].bet_Prob = players[i].bet_Prob*alive_player_num/(player_ix - 1.0);
			}
			alive_player_num = player_ix - 1;
		}
	}
	round_num++;
	first_inquire = true;
	bluffed = false;
	
//#ifdef FOUT
	if (round_num%10 == 1) {
		fout<<"\nRound:	"<<round_num<<endl;
		fout <<"Seat_message_prossess:\n"<<alive_player_num<<endl;
		for (player_ix = 0; player_ix != 8; ++player_ix) {
			fout<< players[player_ix].id << "\t" << players[player_ix].jetton << "\t" << players[player_ix].money <<"\t"
			<< players[player_ix].seat <<"\t"<<players[player_ix].state<<"\tbet_Prob	"<<players[player_ix].bet_Prob<< endl;
		}
	}
//#endif
	return 1;
}
int pot_win_msg_process(int size, const char* msg) {
	int i = 0;
	while (msg[i++] != '\n');
	char line[128];
	char word[128];
	do {
		getline(msg, line, i);
		int line_ix = 0,p_ix = -1,tid;
		getword(line, word, line_ix);
		while (word[++p_ix]!=':');
		word[p_ix] = '\0';
		tid = atoi(word);
		if (tid == players[my_id].id&&bluffed) {
			getword(line, word, line_ix);
			bluff_money += atoi(word);
		}
	} while (NULL == strstr(line, "pot-win/"));
	if (bluffed)
		bluff_money -= players[my_id].bet;
	fout<<"bluff_money:	"<<bluff_money<<endl;
	return 1;
}
void getword(const char *line, char *word, int &i_) {
	int word_ix = 0;
	while (line[i_] != ' '&&line[i_] != '\0') {
		word[word_ix++] = line[i_++];
	}
	i_++;
	word[word_ix] = '\0';
}
//处理card消息
int card_msg_process(int size, const char* msg, int card_ix, const int end_ix) {
	int i = 0;
	while (msg[i++] != '\n');
	char line[128];
	for (; card_ix != end_ix; ++card_ix) {
		getline(msg, line, i);
		str2card(line, cards[card_ix]);
	}
#ifdef FOUT
	fout << "card_msg_process:\nStage:  " << stage << "\n";
	for (int i = 0; i != end_ix; ++i) {
		fout << "card " << i << " : " << cards[i].color << '\t'
			<< cards[i].point << endl;
	}
#endif
	return 1;
}
void getline(const char *s, char *line, int &i_) {
	int line_ix = 0;
	while (s[i_] != '\n'&&s[i_] != '\0') {
		line[line_ix++] = s[i_++];
	}
	i_++;
	line[line_ix] = '\0';
}
void str2card(const char *s, Card &c) {
	int i = 0;
	switch (s[i]) {
	case 'S':
		c.color = SPADES;
		break;
	case 'H':
		c.color = HEARTS;
		break;
	case 'C':
		c.color = CLUBS;
		break;
	case 'D':
		c.color = DIAMONDS;
		break;
	}
	while (s[i++] != ' ');
	switch (s[i]) {
	case '2':
		c.point = 2;
		break;
	case '3':
		c.point = 3;
		break;
	case '4':
		c.point = 4;
		break;
	case '5':
		c.point = 5;
		break;
	case '6':
		c.point = 6;
		break;
	case '7':
		c.point = 7;
		break;
	case '8':
		c.point = 8;
		break;
	case '9':
		c.point = 9;
		break;
	case '1':
		c.point = 10;
		++i;
		break;
	case 'J':
		c.point = 11;
		break;
	case 'Q':
		c.point = 12;
		break;
	case 'K':
		c.point = 13;
		break;
	case 'A':
		c.point = 14;
		break;
	}
}

/*比较cards1 �?cards2 的牌�?返回 1 如果 cards1 强，-1 cards2 强， 0 平手*/
int compare(Card cards1[], Card cards2[]) {
	CardValue v1, v2;
	getValue(cards1, v1);
	getValue(cards2, v2);
	if (v1.rank != v2.rank) {
		return (v1.rank > v2.rank) ? 1 : -1;
	}
	for (int i = 0; i != 5; ++i) {
		if (v1.val[i] != v2.val[i]) {
			return (v1.val[i] > v2.val[i]) ? 1 : -1;
		}
	}
	return 0;
}
bool cmpCard(const Card &c1, const Card &c2) {
	return c1.point > c2.point;
}

//输入一个含7张扑克的卡组，输出其牌型，及用于比大小的其他参数（牌型相同时依次比较�?注意要求卡组已经sort过，cval是输出用
void getValue(Card cds[], CardValue &cval) {

	int color[4] = {};
	int max_color = 0, max_color_color;
	int point[16] = {};
	int seq_len = 0, max_seq_len = 0, max_seq_point = 0;
	int first = 0, first_point = 0, second = 0, second_point = 0, first_point_1 = 0, second_point_1 = 0, third_point_1 = 0;
	for (int i = 0; i != 7; ++i) {
		color[cds[i].color]++;
		point[cds[i].point]++;
	}
	for (int i = 0; i != 4; ++i) {
		if (color[i] > max_color) {
			max_color = color[i];
			max_color_color = i;
		}
	}
	for (int i = 2; i != 16; ++i) {
		if (point[i] == 0) {
			if (seq_len >= 5 && seq_len > max_seq_len) {
				max_seq_len = seq_len;
				max_seq_point = i - 1;
			}
			seq_len = 0;
		} else {
			++seq_len;
		}
		if (point[i] >= 2) {
			if (point[i] >= first) {
				if (second_point > first_point_1) {
					first_point_1 = second_point;
				}
				second = first;
				second_point = first_point;
				first = point[i];
				first_point = i;
				continue;
			}
			if (first == 3 && second == 0) {
				second = 2;
				second_point = i;
				continue;
			}
		}
		if (point[i] >= 1) {
			third_point_1 = second_point_1;
			second_point_1 = first_point_1;
			first_point_1 = i;
		}
	}

	for (int i = 0; i != 5; ++i) {
		cval.val[i] = 0;
	}

	if (max_color >= 5 && max_seq_len >= 5) {
		for (int i = 0; i != 7; ++i) {
			if (cds[i].color != max_color_color) {
				point[cds[i].point] = 0;
			}
		}
		max_seq_len = 0;
		max_seq_point = 0;
		for (int i = 2; i != 16; ++i) {
			if (point[i] == 0) {
				if (seq_len >= 5 && seq_len > max_seq_len) {
					max_seq_len = seq_len;
					max_seq_point = i - 1;
				}
				seq_len = 0;
			} else {
				++seq_len;
			}
		}
		if (max_seq_len >= 5) {
			cval.rank = STRAIGHT_FLUSH;
			cval.val[0] = max_seq_point;
			return;
		}
	}
	if (first == 4) {
		cval.rank = FOUR_OF_A_KIND;
		cval.val[0] = first_point;
		cval.val[1] = first_point_1 > second_point ? first_point_1 : second_point;
		return;
	}
	if (first == 3 && second == 2) {
		cval.rank = FULL_HOUSE;
		cval.val[0] = first_point;
		cval.val[1] = second_point;
		return;
	}
	if (max_color >= 5) {
		cval.rank = FLUSH;
		int ix = 0;
		for (int i = 0; i != 7 && ix != 5; ++i) {
			if (cds[i].color == max_color_color)
				cval.val[ix++] = cds[i].point;
		}
		return;
	}
	if (max_seq_len >= 5) {
		cval.rank = STRAIGHT;
		cval.val[0] = max_seq_point;
		return;
	}
	if (first == 3) {
		cval.rank = THREE_OF_A_KIND;
		cval.val[0] = first_point;
		cval.val[1] = first_point_1;
		cval.val[2] = second_point_1;
		return;
	}
	if (first == 2 && second == 2) {
		cval.rank = TWO_PAIR;
		cval.val[0] = first_point;
		cval.val[1] = second_point;
		cval.val[2] = first_point_1;
		return;
	}
	if (first == 2) {
		cval.rank = ONE_PAIR;
		cval.val[0] = first_point;
		cval.val[1] = first_point_1;
		cval.val[2] = second_point_1;
		cval.val[3] = third_point_1;
		return;
	}
	cval.rank = HIGH_CARD;
	for (int i = 0; i != 5; ++i) {
		cval.val[i] = cds[i].point;
	}
	return;
}

//计算胜率
void rand_b(int beg_, int rd[], int end_) {
	for (int i = beg_; i != end_; i++) {
		rd[i] = rand() % (52 - i);
		for (int j = 0; j != i; ++j) {
			if (rd[j] == rd[i]) {
				rd[i] = 51 - j;
			}
		}
	}
}

double get_winProb(const int opp_num, const int times) {
	switch (stage) {
	case HOLD:
		return AP[opp_num - 1][cards[0].to52()][cards[1].to52()];
		//return get_winProb_flop(times, 2, opp_num);
		break;
	case FLOP:
		return get_winProb_flop(times, 5, opp_num);
		break;
	case TURN:
		return get_winProb_flop(times, 6, opp_num);
		break;
	case RIVER:
		return get_winProb_flop(times, 7, opp_num);
		break;
	}
}
double get_winProb_flop(const int times, const int beg_, const int opp_num) {
	Card myCards[7], tCards[7];
	int rd[21];
	for (int j = 0; j != beg_; j++) {
		rd[j] = cards[j].to52();
	}
	double win_sum = 0.0;
	double t_sum = 0.0;
	for (int i = 0; i < times; i++) {
		rand_b(beg_, rd, 7 + 2*opp_num);
		for (int j = 0; j < 7; j++) {
			if (j < beg_) {
				myCards[j] = cards[j];
			} else {
				myCards[j].point = rd[j] % 13 + 2;
				myCards[j].color = (enum Color)(rd[j] / 13);
				cards[j] = myCards[j];
			}
		}		
		sort(myCards, myCards + 7, cmpCard);
		int tie = 0,t;
		double  w_sum = 0.0;//
		for (int k = 0; k != opp_num; k++) {
			w_sum += AP[alive_player_num - 1][rd[7 + k*2]][rd[8 + k*2]];
		}
		t_sum += w_sum;
		for (int k = 0; k != opp_num; k++) {
			/*
			if ((A[rd[7 + k*2]][rd[8 + k*2]] < 0.08)&&stage > HOLD&&mode == 8) {
				continue;
			}
			*/
			for (int j = 0; j < 7; j++) {
				if (j < 5) {
					tCards[j] = cards[j + 2];
				} else {
					tCards[j].point = rd[j + 2 + k*2] % 13 + 2;
					tCards[j].color = (enum Color)(rd[j + 2 + k*2] / 13);
				}
			}
			sort(tCards, tCards + 7, cmpCard);
			t = compare(myCards, tCards);
			if (t < 0) {
				break;
			}	
			else if (t == 0) {
				tie++;
			}
		}
		if (t < 0) {
			continue;
		}	
		//if (mode <= 4&&alive_player_num > 4&&stage > HOLD)//
		//	win_sum += w_sum / (tie + 1.0);
		//else
			win_sum += 1.0 / (tie + 1.0);
	}
	//if (mode <= 4&&alive_player_num > 4&&stage > HOLD)//
	//	return win_sum / t_sum;
	//else
		return win_sum / times;
}

double rand_d() {
	return ((double)rand())/RAND_MAX;
}

//比较差，已废弃

int my_mode_1() {
	const double win_p = get_winProb(alive_player_num);
	const double bet_p = win_p*(pot + max_bet*(1 + wait_num/4.0))/(win_p*pot + max_bet*(1 + win_p*wait_num/4.0));
	char* response;
	if(max_bet != players[my_id].bet&&bet_p < 0.5) { //
		response = "fold \n";
	} else if (bet_p < 0.7) {
		response = "call \n";
	} else if (bet_p < 0.8) {
		response = "raise 40 \n";
	} else if (bet_p < 0.9) {
		response = "raise 80 \n";
	} else if (bet_p < 0.95) {
		response = "raise 160 \n";
	} else {
		response = "all_in \n";
	}
#ifdef FOUT
	fout << "inquire_process_my_mode_1:\n" << endl
			<< "bet_p:   "<<bet_p<<endl
			<< "winProb:   "<<win_p<<endl
			<< "my_id"<<my_id<<endl
			<< "response:	" << response << endl;
#endif
	send(m_socket_id, response, (int)strlen(response) + 1, 0);
	return 1;
}
int my_mode_2() {
	const double win_p = get_winProb(alive_player_num);
	const double bet_ = (win_p*pot + 2*win_p*max_bet - max_bet - players[my_id].bet);
	const double bet_p = win_p*(pot + max_bet*(1 + wait_num/4.0))/(win_p*pot + max_bet*(1 + win_p*wait_num/4.0));
	char* response;
	if(bet_ < 0) { //||(players[my_id].money + players[my_id].jetton - max_bet) < 4*100&&win_p < 0.5
		response = "fold \n";
	} else if (bet_p < 0.6) {
		response = "call \n";
	} else if (bet_p < 0.8) {
		response = "raise 40 \n";
	} else {
		response = "all_in \n";
	}
#ifdef FOUT
	fout << "inquire_process_my_mode_2:\n" << endl
			<< "bet_:   "<<bet_<<endl
			<< "bet_p:   "<<bet_p<<endl
			<< "winProb:   "<<win_p<<endl
			<< "my_id"<<my_id<<endl
			<< "response:	" << response << endl;
#endif
	send(m_socket_id, response, (int)strlen(response) + 1, 0);
	return 1;
}